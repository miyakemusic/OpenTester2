package org.opentester.project.entityresource;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.apache.commons.lang3.StringUtils;
import org.opentester.project.TypeResourceManager;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.entity.ParentNode;
import org.opentester.project.entity.mapper.DtoMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;

public class CommonEntityResource<T> extends AbstractEntityResource {

	@Autowired
	private TypeResourceManager typeResourceManager;
	private String type;
	private Object defaultDto;
	
	public CommonEntityResource(String type, Object defaultDto) {
		this.type = type;
		this.defaultDto = defaultDto;
	}
	
	@Override
	public String getType() {
		return type;
	}

	@Override
	protected DtoMapper getMapper() {
		return this.typeResourceManager.get(type).getMapper();
	}

	@Override
	protected JpaRepository getParentRepository() {
		return this.typeResourceManager.get(typeResourceManager.parentType(type)).getRepository();
	}

	@Override
	protected void setParent(Object dto, Object parentEntity) {
		for (Field field : typeResourceManager.get(type).getClazz().getDeclaredFields()) {
			Annotation annotation = field.getAnnotation(ParentNode.class);
			if (annotation != null) {
				try {					
					KeyValueDto parentDto = KeyValueDto.builder()
							.key((Long)parentEntity.getClass().getMethod("getId").invoke(parentEntity))
							.value((String)parentEntity.getClass().getMethod("toString").invoke(parentEntity))
							.build();
					
					dto.getClass().getMethod("set" + StringUtils.capitalize(field.getName()), KeyValueDto.class).invoke(dto, parentDto);
				}
				catch (Exception e) {
					e.printStackTrace();
				}
				
			}
		}
	}

	@Override
	protected Object getDefaultDto() {
		return this.defaultDto;
	}

	@Override
	protected JpaRepository getRepository() {
		return this.typeResourceManager.get(type).getRepository();
	}

}
