package org.opentester.project.entityresource;

import java.lang.reflect.InvocationTargetException;
import java.util.List;
import org.opentester.project.HtmlGenerator;
import org.opentester.project.ProjectConfig;
import org.opentester.project.entity.mapper.DtoMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;

public abstract class AbstractEntityResource<T1, T2, T3> implements EntityResource {

//	protected abstract List<T1> findAll();
	
	@Autowired
	private HtmlGenerator<T2> generator;
	
	@Override
	public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
		Long id = extractId(type_id);
		List<T1> list; 
		if (id == null) {
			list = getRepository().findAll();
		}
		else {
			list = findByParent(id);
		}
		
		return getGenerator().createTable(
				getMapper().toDtoList(list), 
				getType(),
				extractId(type_id)
				);
	}

	protected abstract DtoMapper<T1, T2> getMapper();


	protected HtmlGenerator<T2> getGenerator() {
		return generator;
	}


	protected abstract List<T1> findByParent(Long parent);
	
	@Override
	public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		T2 dto = null;
		if (id == null) {
			dto = getDefaultDto();//TestResultDto.builder().build();
		}
		else {
			T1 entity = getRepository().findById(id).get();					
			if (entity != null) {
				dto = getMapper().toDto(entity);
			}
		}
		
		if (parent != null) {
			T3 parentEntity = findParentById(parent);
			setParent(parent, dto, parentEntity);
			//dto.setTestItem(KeyValueDto.builder().key(parent).value(parentEntity.toString()).build());
		}
		return getGenerator().createDialog(dto);
	}

	protected abstract T3 findParentById(Long parent);


	protected abstract void setParent(Long parent, T2 dto, T3 parentEntity);


	protected abstract T2 getDefaultDto();


//	protected abstract T1 findById(Long id);


	@Override
	public String getSingleSelectionHtml() {
		return new SelectHtml<T1>() {
			@Override
			protected String getText(T1 e) {
				return e.toString();
			}

			@Override
			protected String getId(T1 e) {
				return AbstractEntityResource.this.getId(e);
			}
			
		}.html(getRepository().findAll());
	}

	@Override
	public void delete(Long id) {
		deleteById(id);
	}

	protected void deleteById(Long id) {
		getRepository().deleteById(id);
	}


	protected abstract JpaRepository<T1, Long> getRepository();


	@Override
	public String getMultiSelectionHtml() {
		return new CheckBoxHtml<T1>() {
			@Override
			protected String getText(T1 e) {
				return e.toString();
			}

			@Override
			protected String getId(T1 e) {
				return AbstractEntityResource.this.getId(e);
			}
		}.html(getRepository().findAll());
	}

	protected String getId(T1 e) {
		try {
			Long id = (Long)e.getClass().getMethod("getId").invoke(e);
			return id.toString();
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
				| SecurityException e1) {
			e1.printStackTrace();
		}
		return "";
	}


	protected Long extractId(String type_id) {
		if (type_id == null) {
			return null;
		}
		return Long.valueOf(type_id.split("_")[1]);
	}
}
