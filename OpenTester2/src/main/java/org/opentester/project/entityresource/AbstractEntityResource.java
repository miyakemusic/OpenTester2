package org.opentester.project.entityresource;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.opentester.project.HierarchyButtonGenerator;
import org.opentester.project.HtmlGenerator;
import org.opentester.project.NameValue;
import org.opentester.project.ProjectConfig;
import org.opentester.project.TypeResource;
import org.opentester.project.TypeResourceManager;
import org.opentester.project.entity.mapper.DtoMapper;
import org.opentester.project.repository.FindAll;
import org.opentester.project.repository.FindByParent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.CrudRepository;
import org.thymeleaf.util.StringUtils;

public abstract class AbstractEntityResource<T1, T2, T3> implements EntityResource {

	@Autowired
	private HtmlGenerator<T2> generator;
	
	@Autowired
	private TypeResourceManager typeResourceManager;
	
	@Autowired
	private HierarchyButtonGenerator hierarchyButtonGenerator;
	
	@Override
	public String getTableHtml(String parent_type, Long parent_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, SecurityException, ClassNotFoundException, IllegalArgumentException {
		List<T1> list = null; 
		if (parent_id == null) {
			Type type = getRepository().getClass().getGenericInterfaces()[0];
			boolean called = false;
			for (Method method : Class.forName(type.getTypeName()).getDeclaredMethods()) {
				Annotation annotation = method.getAnnotation(FindAll.class);
				if (annotation != null) {
					list = (List<T1>) method.invoke(getRepository());
					called = true;
				}
			}
			if (!called) {
				list = getRepository().findAll();
			}
		}
		else {
			list = findByParent(parent_id);
		}
		
//		String parentType = extractType(parent_type_id);

		return getGenerator().createTable(
				hierarchyButtonGenerator.generate(parent_type, parent_id),
				getMapper().toDtoList(list), 
				getType(),
				parent_id
				);
	}

	protected abstract DtoMapper<T1, T2> getMapper();

	protected HtmlGenerator<T2> getGenerator() {
		return generator;
	}

	@Override
	public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		T2 dto = null;
		
		if (id == null) {
			dto = getDefaultDto();//TestResultDto.builder().build();
		}
		else {
			T1 entity = getRepository().findById(id).get();					
			if (entity != null) {
				dto = getMapper().toDto(entity);
			}
		}
		
		if (parent != null) {
			JpaRepository<T3, Long> parentReposiroty = getParentRepository();
			T3 parentEntity = parentReposiroty.findById(parent).get();//findParentById(parent);
			setParent(dto, parentEntity);
			//dto.setTestItem(KeyValueDto.builder().key(parent).value(parentEntity.toString()).build());
		}
		return getGenerator().createDialog(dto);
	}

	protected abstract JpaRepository<T3, Long> getParentRepository();

	protected List<T1> findByParent(Long parent) {
		JpaRepository<T1, Long> repository = this.getRepository();
		Type type = repository.getClass().getGenericInterfaces()[0];
		
		try {
			for (Method method : Class.forName(type.getTypeName()).getDeclaredMethods()) {
//				System.out.println(method.getName());
				Annotation annotation = method.getAnnotation(FindByParent.class);
				if (annotation != null) {
					try {
						return (List<T1>) repository.getClass().getMethod(method.getName(), Long.class).invoke(repository, parent);
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (SecurityException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
//	protected abstract T3 findParentById(Long parent);

	protected abstract void setParent(T2 dto, T3 parentEntity);

	protected abstract T2 getDefaultDto();

	@Override
	public String getSingleSelectionHtml() {
		return new SelectHtml<T1>() {
			@Override
			protected String getText(T1 e) {
				return e.toString();
			}

			@Override
			protected String getId(T1 e) {
				return AbstractEntityResource.this.getId(e);
			}
			
		}.html(getRepository().findAll());
	}

	@Override
	public void delete(Long id) {
		deleteById(id);
	}

	protected void deleteById(Long id) {
		getRepository().deleteById(id);
	}

	protected abstract JpaRepository<T1, Long> getRepository();

	@Override
	public String getMultiSelectionHtml() {
		return new CheckBoxHtml<T1>() {
			@Override
			protected String getText(T1 e) {
				return e.toString();
			}

			@Override
			protected String getId(T1 e) {
				return AbstractEntityResource.this.getId(e);
			}
		}.html(getRepository().findAll());
	}

	protected String getId(T1 e) {
		try {
			Long id = (Long)e.getClass().getMethod("getId").invoke(e);
			return id.toString();
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
				| SecurityException e1) {
			e1.printStackTrace();
		}
		return "";
	}

	protected Long extractId(String type_id) {
		if (type_id == null) {
			return null;
		}
		return Long.valueOf(type_id.split("_")[1]);
	}

	private String extractType(String type_id) {
		if (type_id == null) {
			return null;
		}
		return type_id.split("_")[0];
	}

	@Override
	public String getSummary(Long id) {
		String parentType = this.typeResourceManager.parentType(this.getType());
		String buttons = hierarchyButtonGenerator.generate(this.getType(), id);
		T2 dto = this.getMapper().toDto(this.getRepository().findById(id).get());
		return this.getGenerator().createSummary(buttons, dto, this.getType());
	
	}	
}
