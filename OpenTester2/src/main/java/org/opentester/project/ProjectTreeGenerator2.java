package org.opentester.project;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.opentester.project.dto.NodeDto;
import org.opentester.project.entity.NodeEntity;
import org.opentester.project.repository.NodeRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ProjectTreeGenerator2 {
	@Autowired
	private NodeRepository folderRepository;
	
	public List<TreeNode> generateTree() {
		List<NodeEntity> roots = folderRepository.findByParentNode_id(null);
		
		List<TreeNode> ret = new ArrayList<>();
		for (NodeEntity node : roots) {
			ret.add(convertTreeNode(node));
		}
		
		return ret;
//		return roots.stream().map(entity -> TreeNode.builder().id("folder_" + entity.getId().toString()).text(entity.getName()).build()).collect(Collectors.toList());
//		return Arrays.asList(TreeNode.builder().id("root_-1").text("Root").build());
	}

	private TreeNode convertTreeNode(NodeEntity node) {
		TreeNode rootTree = TreeNode.builder().id("folder_" + node.getId()).children(new ArrayList<TreeNode>()).text(node.getName()).build();
		recursive(node, rootTree);
		return rootTree;
	}

	private void recursive(NodeEntity node, TreeNode rootTree) {
		//TreeNode childTree = TreeNode.builder().id("folder_" + node.getId()).text(node.getName()).children(new ArrayList<TreeNode>()).build();
		//rootTree.getChildren().add(childTree);
		for (NodeEntity child : node.getChildren()) {
			TreeNode childTreeNode = TreeNode.builder().id("folder_" + child.getId()).text(child.getName()).children(new ArrayList<TreeNode>()).build();
			rootTree.getChildren().add(childTreeNode);
			recursive(child, childTreeNode);
		}
//		if (rootTree.getChildren().size() == 0) {
//			rootTree.setChildren(null);
//		}
	}


}
