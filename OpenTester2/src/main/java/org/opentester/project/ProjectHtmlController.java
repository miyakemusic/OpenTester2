package org.opentester.project;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectHierarchyDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.ProjectDto.ProjectDtoBuilder;
import org.opentester.project.entity.DtoConverter;
import org.opentester.project.entity.ProjectDutEntity;
import org.opentester.project.entity.ProjectDutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectTestItemTemplateEntity;
import org.opentester.project.entity.ProjectRawDataEntity;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectRawDataRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTestItemRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectTesterHistoryRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.opentester.project.entity.ProjectTestItemEntity;
import org.opentester.project.entity.ProjectTestPointEntity;
import org.opentester.project.entity.ProjectTestResultEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ProjectHtmlController {
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private ProjectTestItemRepository projectTestItemRepository;
	
	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	 
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private ProjectTesterHistoryRepository projectTesterHistoryRepository;
	
	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Autowired
	private ProjectTestPointRepository projectTestPointRepository;

	@Autowired
	private DutPackageRepository dutPackageRepository;

	@Autowired
	private DutRepository dutRepository;

	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private ProjectRawDataRepository projectRawDataRepository;
	
	@Autowired
	private TempDB tempDB;
	
	@GetMapping("/admin/fragment_projectlist")
	public String fragment_projectlist(Model model, Principal principal) {
		
//		tempDB.createProject();
		
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		List<ProjectDto> projects = new ArrayList<>();
		this.projectRepository.findAll().forEach(p -> {
			ProjectDto dto = DtoConverter.convertDto(p);
			projects.add(dto);
		});
		
		model.addAttribute(projects);
		
		model.addAttribute("list", projects);
		model.addAttribute("linkList", link);
		model.addAttribute("project", "active");
		
		return "fragment_projectlist";
	}


	
	@GetMapping("/admin/fragment_dutpackagelist")
	public String fragment_dutpackagelist(Model model, Principal principal, @RequestParam(value = "projectid", required=true) Long projectid) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
//		model.addAttribute("linkList", principal);
		List<DutPackageDto> dutPackages = new ArrayList<>();	
		
//		Project project = Project.testdata().get(id);
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		Optional<ProjectEntity> project = this.projectRepository.findById(projectid);
		link.add(ProjectHierarchyDto.builder().name(project.get().getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.get().getId()).build());
		
		for (ProjectDutPackageEntity dutPackage : this.projectRepository.findById(projectid).get().getDutPackages()/*TempDB.instance().getDutPackages(projectid)*/) {
			DutPackageDto dto = DtoConverter.convertDto(dutPackage);
			dutPackages.add(dto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", dutPackages);
		model.addAttribute("project", "active");
		return "fragment_dutpackagelist";	
	}
	
	@GetMapping("/admin/fragment_dutlist")
	public String fragment_dutlist(Model model, Principal principal, @RequestParam(value = "dutpackageid", required=true) Long dutpackageid) {
		List<DutDto> duts = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		ProjectDutPackageEntity dutPackage = this.dutPackageRepository.findById(dutpackageid).get();//TempDB.instance().dutPackage(dutpackageid);
		
		ProjectEntity project = this.dutPackageRepository.findById(dutpackageid).get().getProject();//TempDB.instance().projectByDutPackage(dutpackageid);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
	
		for (ProjectDutEntity dut : dutPackage.getDuts()) {
			DutDto dto = DtoConverter.convertDto(dut);
			duts.add(dto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", duts);
		model.addAttribute("project", "active");
		return "fragment_dutlist";
	}	
	

	@GetMapping("/admin/fragment_testpointlist")
	public String fragment_testpointlist(Model model, Principal principal, @RequestParam(value = "dutid", required=true) Long dutid) {
		List<TestPointDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		ProjectDutEntity dut = this.dutRepository.findById(dutid).get();
		ProjectEntity project = dut.getDutPackage().getProject(); //TempDB.instance().projectByDut(dutid);
		ProjectDutPackageEntity dutPackage = dut.getDutPackage();//TempDB.instance().dutPackageByDut(dutid);
//		DutEntity dut = TempDB.instance().dut(dutid); 
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());

		for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
				list.add(DtoConverter.convertDto(testPoint));
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		model.addAttribute("project", "active");
		return "fragment_testpointlist";
	}

	
	@GetMapping("/admin/fragment_testitemlist")
	public String fragment_testitemlist(Model model, Principal principal, @RequestParam(value = "testpointid", required=true) Long testpointid) {
		List<TestItemDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		ProjectTestPointEntity testpoint = this.projectTestPointRepository.findById(testpointid).get();//TempDB.instance().testPoint(testpointid); 
		ProjectDutEntity dut = testpoint.getDut();// TempDB.instance().dutByTestPoint(testpointid); 
		ProjectDutPackageEntity dutPackage = dut.getDutPackage();//TempDB.instance().dutPackageByTestPoint(testpointid);
		ProjectEntity project = dutPackage.getProject();//TempDB.instance().projectByTestPoint(testpointid); 

		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?testpointid=" + testpoint.getId()).build());

		for (ProjectTestItemEntity testItem : testpoint.getTestItems()) {
			TestItemDto testItemDto = DtoConverter.convertDto(testItem);
			list.add(testItemDto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		model.addAttribute("project", "active");
		
		return "fragment_testitemlist";
	}


	@GetMapping("/admin/fragment_resultdetail")
	public String fragment_resultdetail(Model model, Principal principal, @RequestParam(value = "testitemid", required=true) Long testitemid) {
		
		ProjectTestItemEntity testitem = this.projectTestItemRepository.findById(testitemid).get();
		ProjectTestPointEntity testpoint = testitem.getTestPoint();//TempDB.instance().testPointByTestItem(testitemid); 
		ProjectDutEntity dut = testpoint.getDut();//TempDB.instance().dutByTestItem(testitemid); 
		ProjectDutPackageEntity dutPackage = dut.getDutPackage();//TempDB.instance().dutPackageByTestItem(testitemid);
		ProjectEntity project = dutPackage.getProject();//TempDB.instance().projectByTestItem(testitemid); 

		TestItemDto testItemDto = DtoConverter.convertDto(testitem);
		testItemDto.setOperator(testitem.getOperator().full());
				
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?testpointid=" + testpoint.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testitem.getCriteria().getTestItemTemplate().getTestkey()).page("/admin/fragment_resultdetail?testitemid=" + testitem.getId()).build());
		
		model.addAttribute("linkList", link);
				
		String status = "";
		if (testItemDto.getCompleteDate() != null) {
			status = testItemDto.getStatus() + " on " + testItemDto.getCompleteDate() + " (Due Date: " + testItemDto.getCompleteDueDate() + ")";
		}
		else {
			status = "Untouched, " + "Due date: " + testItemDto.getCompleteDueDate();
		}
		String unit = convertUnit(testItemDto);
		
		List<NameValue> detailList = new ArrayList<>();
		detailList.add(NameValue.builder().name("Status").value(status).build());
		detailList.add(NameValue.builder().name("Result / Criteria").value(testItemDto.getKey() + " = " + testItemDto.getResult() + unit + " / " + testItemDto.getCriteria()).build());
		detailList.add(NameValue.builder().name("Operator").value(testItemDto.getOperator()).build());
		detailList.add(NameValue.builder().name("Tester").value(testItemDto.getTester()).build());
		
		if (testitem.getResultHistory().size() > 0) {
			ProjectTestResultEntity result = testitem.getResultHistory().get(testitem.getResultHistory().size() - 1);
			
			ProjectRawDataEntity rawData = result.getRawData();
			
			model.addAttribute("rawDataName", rawData.getName());
			model.addAttribute("rawDataUrl", "/api/project/admin/rawData?id=" + rawData.getId());
			model.addAttribute("imageUrl", "/api/project/admin/image?id=" + rawData.getId());
			
			
			List<ProjectTestItemEntity> relates =  rawData.getResults().stream().map(r -> r.getTestItem()).collect(Collectors.toList()); //TempDB.instance().relatedTestItemsByRawData(testItemDto.getRawData());
			for (ProjectTestItemEntity relatedItem : relates) {
				if (relatedItem.getId() == testItemDto.getId()) {
					continue;
				}
				TestItemDto relatedDto = DtoConverter.convertDto(relatedItem);
				String unit2 = convertUnit(relatedDto); 
				detailList.add(NameValue.builder().name("Related Result / Criteria").value(relatedDto.getKey() + " = " + relatedDto.getResult() + unit2 + " / " + relatedDto.getCriteria()).build());
				
			}		
		}

		detailList.add(NameValue.builder().name("History").value(testItemDto.getHistory()).build());
		
		model.addAttribute("detailList", detailList);
		model.addAttribute("project", "active");
		
		return "fragment_resultdetail";
	}
	public static String convertUnit(TestItemDto testItemDto) {
		String unit = "";
		if (testItemDto.getUnit() != null && !testItemDto.getUnit().isBlank()) {
			unit = "[" + testItemDto.getUnit() + "]";
		}
		return unit;
	}
	
	@GetMapping("/admin/fragment_project_tester")
	public String fragment_project_tester(Model model, Principal principal) {
		List<ProjectTesterDto> list = DtoConverter.convertDto(this.projectTesterRepository.findAll());
		model.addAttribute("list", list);
		model.addAttribute("tester", "active");
		
		model.addAttribute("url", "/admin/table/project_tester");
		
		return "fragment_project_common_table";
	}
	
	@GetMapping("/admin/fragment_project_tester_template")
	public String fragment_project_tester_template(Model model, Principal principal) {
		List<ProjectTesterTemplateDto> list = DtoConverter.convertTesterTemplateDto(this.projectTesterTemplateRepository.findAll());
		model.addAttribute("list", list);
		model.addAttribute("testertemplate", "active");
		model.addAttribute("url", "/admin/table/project_tester_template");
		return "fragment_project_common_table";
	}
	
	@GetMapping("/admin/fragment_project_testitem_template")
	public String fragment_project_testitem_template(Model model, Principal principal) {
		List<ProjectTestItemTemplateDto> list = DtoConverter.convertTestItemTemplateDto(this.projectTestItemTemplateRepository.findAll());
		model.addAttribute("list", list);
		model.addAttribute("testitemtemplate", "active");
		model.addAttribute("url", "/admin/table/project_testitem_template");
		
		return "fragment_project_common_table";
	}
		
	@GetMapping("/admin/fragment_project_operator")
	public String fragment_project_operator(Model model, Principal principal) {
		List<ProjectUserDto> list = DtoConverter.convertUserDto(this.projectUserRepository.findAll());
		model.addAttribute("list", list);
		model.addAttribute("operator", "active");
		model.addAttribute("url", "/admin/table/project_user");
		return "fragment_project_common_table";
	}
	
	@Autowired
	private EntityResourceManager entityResource;
	
	@GetMapping("/admin/fragment_project_common/{type}")
	public String fragment_project_operator(Model model, Principal principal, @PathVariable("type") String type) {
		List<ProjectUserDto> list = DtoConverter.convertUserDto(this.projectUserRepository.findAll());
		model.addAttribute("list", list);
		model.addAttribute(type, "active"); // should relate to dto
		model.addAttribute("url", "/admin/project_table_html/" + type);
		
		List<Tab> tabList = entityResource.titles().stream().map(e -> new Tab(e, "label.project." + e)).collect(Collectors.toList());
//		tabList.add(new Tab("project", "label.project.project"));
//		tabList.add(new Tab("supplier", "label.project.supplier"));
		model.addAttribute("tabList", tabList);
		return "fragment_project_common_table";
	}
}
class Tab {
	public Tab(String type, String title) {
		this.type = type;
		this.title = title;
	}
	public String type;
	public String title;
}
