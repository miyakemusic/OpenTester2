package org.opentester.project;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.Principal;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.io.IOUtils;
import org.opentester.project.entity.CriteriaTemplateEntity;
import org.opentester.project.entity.TestItemTemplateEntity;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.TestItemTemplateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ProjectHtmlController {
	
	@Autowired
	private EntityResourceManager entityResource;
	
	@GetMapping("/admin/fragment_new_project_main")
	public String fragment_new_project(Model model, Principal principal) {
		return "fragment_new_project_main";
	}
		
	@GetMapping("/admin/fragment_new_project_header")
	public String fragment_project_header(Model model, Principal principal) {
		List<Tab> tabList = entityResource.titles().stream().map(e -> new Tab(e, "label.project." + e, "")).collect(Collectors.toList());
		model.addAttribute("tabList", tabList);
		return "fragment_new_project_header";
	}
	
	@Autowired
	private ProjectTreeGenerator projectTreeGenerator;
	
	@GetMapping("/admin/fragment_new_project_tree")
	public String fragment_new_project_tree(Model model, Principal principal) {
		model.addAttribute("url", "/admin/project_tree_data/");
		model.addAttribute("tree", projectTreeGenerator.generateTree());
		return "fragment_new_project_tree";
	}

	@GetMapping(ProjectConfig.summaryURL  + "{type}/{id}")
	public String fragment_project_detail(Model model, Principal principal, @PathVariable("type") String type, 
			@PathVariable("id") String id) {
		model.addAttribute("url", "/admin/project_node/summary/" + type +  "/" + id);
		return fragment_project_common_table(model, type);
	}
	
	@GetMapping(path={ProjectConfig.tableURL + "{type}", ProjectConfig.tableURL  + "{type}/{id}"})
	public String fragment_project_operator(Model model, Principal principal, @PathVariable("type") String type, 
			@PathVariable(name="id", required=false) String id) {
		model.addAttribute("url", "/admin/project_table_html/" + type +  (id != null? "/" + id: ""));
		return fragment_project_common_table(model, type);
	}

	private String fragment_project_common_table(Model model, String type) {
		List<Tab> tabList = entityResource.titles().stream().map(e -> new Tab(e, "label.project." + e, e.equals(type) ? "active":"")).collect(Collectors.toList());
		model.addAttribute("tabList", tabList);
		return "fragment_project_common_table";
	}
}
class Tab {
	public Tab(String type, String title, String active) {
		this.type = type;
		this.title = title;
		this.active = active;
	}
	public String type;
	public String title;
	public String active;
}
