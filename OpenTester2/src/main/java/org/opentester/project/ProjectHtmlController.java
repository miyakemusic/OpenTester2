package org.opentester.project;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectHierarchyDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.ProjectDto.ProjectDtoBuilder;
import org.opentester.project.entity.DtoConverter;
import org.opentester.project.entity.Dut;
import org.opentester.project.entity.DutPackage;
import org.opentester.project.entity.Project;
import org.opentester.project.entity.ProjectTestItemTemplate;
import org.opentester.project.entity.TestItem;
import org.opentester.project.entity.TestPoint;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ProjectHtmlController {

	
	@GetMapping("/admin/projectlist")
	public String projects() {
		
		return "project";
	}
	
	@GetMapping("/admin/fragment_projectlist")
	public String fragment_projectlist(Model model, Principal principal) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		List<ProjectDto> projects = new ArrayList<>();
		TempDB.instance().projects() .forEach(p -> {
			ProjectDto dto = DtoConverter.convertDto(p);
			projects.add(dto);
		});
		
		model.addAttribute(projects);
		
		model.addAttribute("list", projects);
		model.addAttribute("linkList", link);
		model.addAttribute("projectclass", "active");
		
		return "fragment_projectlist";
	}


	
	@GetMapping("/admin/fragment_dutpackagelist")
	public String fragment_dutpackagelist(Model model, Principal principal, @RequestParam(value = "projectid", required=true) Integer projectid) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
//		model.addAttribute("linkList", principal);
		List<DutPackageDto> dutPackages = new ArrayList<>();	
		
//		Project project = Project.testdata().get(id);
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		Project project = TempDB.instance().project(projectid);
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		
		for (DutPackage dutPackage : TempDB.instance().getDutPackages(projectid)) {
			DutPackageDto dto = DtoConverter.convertDto(dutPackage);
			dutPackages.add(dto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", dutPackages);
		model.addAttribute("projectclass", "active");
		return "fragment_dutpackagelist";	
	}
	
	@GetMapping("/admin/fragment_dutlist")
	public String fragment_dutlist(Model model, Principal principal, @RequestParam(value = "dutpackageid", required=true) Integer dutpackageid) {
		List<DutDto> duts = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = TempDB.instance().projectByDutPackage(dutpackageid);
		DutPackage dutPackage = TempDB.instance().dutPackage(dutpackageid);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
	
		for (Dut dut : dutPackage.getDuts()) {
			DutDto dto = DtoConverter.convertDto(dut);
			duts.add(dto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", duts);
		model.addAttribute("projectclass", "active");
		return "fragment_dutlist";
	}	
	

	@GetMapping("/admin/fragment_testpointlist")
	public String fragment_testpointlist(Model model, Principal principal, @RequestParam(value = "dutid", required=true) Integer dutid) {
		List<TestPointDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = TempDB.instance().projectByDut(dutid);
		DutPackage dutPackage = TempDB.instance().dutPackageByDut(dutid);
		Dut dut = TempDB.instance().dut(dutid); 
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());

		for (TestPoint testPoint : dut.getTestPoints()) {
				list.add(DtoConverter.convertDto(testPoint));
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		model.addAttribute("projectclass", "active");
		return "fragment_testpointlist";
	}

	
	@GetMapping("/admin/fragment_testitemlist")
	public String fragment_testitemlist(Model model, Principal principal, @RequestParam(value = "testpointid", required=true) Integer testpointid) {
		List<TestItemDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = TempDB.instance().projectByTestPoint(testpointid); 
		DutPackage dutPackage = TempDB.instance().dutPackageByTestPoint(testpointid);
		Dut dut = TempDB.instance().dutByTestPoint(testpointid); 
		TestPoint testpoint = TempDB.instance().testPoint(testpointid); 
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?testpointid=" + testpoint.getId()).build());

		for (TestItem testItem : testpoint.getTestItems()) {
			TestItemDto testItemDto = DtoConverter.convertDto(testItem);
			list.add(testItemDto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		model.addAttribute("projectclass", "active");
		
		return "fragment_testitemlist";
	}


	@GetMapping("/admin/fragment_resultdetail")
	public String fragment_resultdetail(Model model, Principal principal, @RequestParam(value = "testitemid", required=true) Integer testitemid) {
		Project project = TempDB.instance().projectByTestItem(testitemid); 
		DutPackage dutPackage = TempDB.instance().dutPackageByTestItem(testitemid);
		Dut dut = TempDB.instance().dutByTestItem(testitemid); 
		TestPoint testpoint = TempDB.instance().testPointByTestItem(testitemid); 
		TestItem testItem = TempDB.instance().testItem(testitemid);
		
		TestItemDto testItemDto = DtoConverter.convertDto(testItem);
		testItemDto.setOperator(testItem.getOperator().full());
				
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_dutpackagelist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dutPackage.getName()).page("/admin/fragment_dutlist?dutpackageid=" + dutPackage.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?testpointid=" + testpoint.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testItem.getCriteria().getTestItemTemplate().getTarget()).page("/admin/fragment_resultdetail?testitemid=" + testItem.getId()).build());
		
		model.addAttribute("linkList", link);
		
		if (testItemDto.getRawData() != -1) {
			model.addAttribute("rawDataName", testItemDto.getRawDataName());
			model.addAttribute("rawDataUrl", "/api/project/admin/rawData?id=" + testItemDto.getRawData());
			model.addAttribute("imageUrl", "/api/project/admin/image?id=" + testItemDto.getRawData());
		}
		
		String status = "";
		if (testItemDto.getCompleteDate() != null) {
			status = testItemDto.getStatus() + " on " + testItemDto.getCompleteDate() + " (Due Date: " + testItemDto.getCompleteDueDate() + ")";
		}
		else {
			status = "Untouched, " + "Due date: " + testItemDto.getCompleteDueDate();
		}
		String unit = convertUnit(testItemDto);
		
		List<NameValue> detailList = new ArrayList<>();
		detailList.add(NameValue.builder().name("Status").value(status).build());
		detailList.add(NameValue.builder().name("Result / Criteria").value(testItemDto.getTestTarget() + " = " + testItemDto.getResult() + unit + " / " + testItemDto.getCriteria()).build());
		detailList.add(NameValue.builder().name("Operator").value(testItemDto.getOperator()).build());
		detailList.add(NameValue.builder().name("Tester").value(testItemDto.getTester()).build());
		
		if (testItemDto.getRawData() != -1) {
			Set<TestItem> relates = TempDB.instance().relatedTestItemsByRawData(testItemDto.getRawData());
			for (TestItem relatedItem : relates) {
				if (relatedItem.getId() == testItemDto.getId()) {
					continue;
				}
				TestItemDto relatedDto = DtoConverter.convertDto(relatedItem);
				String unit2 = convertUnit(relatedDto); 
				detailList.add(NameValue.builder().name("Related Result / Criteria").value(relatedDto.getTestTarget() + " = " + relatedDto.getResult() + unit2 + " / " + relatedDto.getCriteria()).build());
				
			}		
		}

		detailList.add(NameValue.builder().name("History").value(testItemDto.getHistory()).build());
		
		model.addAttribute("detailList", detailList);
		model.addAttribute("projectclass", "active");
		
		return "fragment_resultdetail";
	}
	public static String convertUnit(TestItemDto testItemDto) {
		String unit = "";
		if (testItemDto.getUnit() != null && !testItemDto.getUnit().isBlank()) {
			unit = "[" + testItemDto.getUnit() + "]";
		}
		return unit;
	}
	
	@GetMapping("/admin/fragment_project_tester")
	public String fragment_project_tester(Model model, Principal principal) {
		List<ProjectTesterDto> list = DtoConverter.convertDto(TempDB.instance().testers());
		model.addAttribute("list", list);
		model.addAttribute("testerclass", "active");
		
		return "fragment_project_tester";
	}
	
	@GetMapping("/admin/fragment_project_tester_template")
	public String fragment_project_tester_template(Model model, Principal principal) {
		List<ProjectTesterTemplateDto> list = DtoConverter.convertTesterTemplateDto(TempDB.instance().testerTemplates());
		model.addAttribute("list", list);
		model.addAttribute("testertemplateclass", "active");
		
		model.addAttribute("url", "/api/project/admin/table/project_tester_template");
	//	return "fragment_project_tester_template";
		return "fragment_project_testitem_template";
	}
	
	@GetMapping("/admin/fragment_project_testitem_template")
	public String fragment_project_testitem_template(Model model, Principal principal) {
		List<ProjectTestItemTemplateDto> list = DtoConverter.convertTestItemTemplateDto(TempDB.instance().testItemTemplates());
		model.addAttribute("list", list);
		model.addAttribute("testitemtemplateclass", "active");
		
		model.addAttribute("url", "/api/project/admin/table/project_testitem_template");
		
		return "fragment_project_testitem_template";
	}
		
	@GetMapping("/admin/fragment_project_operator")
	public String fragment_project_operator(Model model, Principal principal) {
		ProjectUserDto[] list = DtoConverter.convertUserDto(TempDB.instance().users());
		model.addAttribute("list", list);
		model.addAttribute("operatorclass", "active");
		return "fragment_project_operator";
	}
}
