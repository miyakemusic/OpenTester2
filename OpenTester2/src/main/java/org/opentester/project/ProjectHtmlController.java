package org.opentester.project;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.opentester.project.dto.ProjectDutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectHierarchyDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.ProjectDto.ProjectDtoBuilder;
import org.opentester.project.entity.ProjectDutEntity;
import org.opentester.project.entity.ProjectDutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectTestItemTemplateEntity;
import org.opentester.project.entity.ProjectRawDataEntity;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectRawDataRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectSubRoleRepository;
import org.opentester.project.repository.ProjectTestItemRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectTesterHistoryRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.opentester.project.trash.DtoConverter;
import org.opentester.project.entity.ProjectTestItemEntity;
import org.opentester.project.entity.ProjectTestPointEntity;
import org.opentester.project.entity.ProjectTestResultEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ProjectHtmlController {
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private ProjectTestItemRepository projectTestItemRepository;
	
	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	 
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
		
	@Autowired
	private EntityResourceManager entityResource;
	
	@GetMapping("/admin/fragment_new_project_main")
	public String fragment_new_project(Model model, Principal principal) {
		return "fragment_new_project_main";
	}
	
	@GetMapping("/admin/fragment_new_project_header")
	public String fragment_project_header(Model model, Principal principal) {
		List<Tab> tabList = entityResource.titles().stream().map(e -> new Tab(e, "label.project." + e, "")).collect(Collectors.toList());
		model.addAttribute("tabList", tabList);
		return "fragment_new_project_header";
	}
	
	@Autowired
	private ProjectTreeGenerator projectTreeGenerator;
	
	@GetMapping("/admin/fragment_new_project_tree")
	public String fragment_new_project_tree(Model model, Principal principal) {
		model.addAttribute("tree", projectTreeGenerator.generateTree());
		return "fragment_new_project_tree";
	}
	
//	@GetMapping("/admin/fragment_project_common/{type}")
//	public String fragment_project_operator(Model model, Principal principal, @PathVariable("type") String type) {
//		model.addAttribute("url", "/admin/project_table_html/" + type);
//		return fragment_project_common_table(model, type);
//	}

	@GetMapping(path={"/admin/fragment_project_common/{type}", "/admin/fragment_project_common/{type}/{id}"})
	public String fragment_project_operator(Model model, Principal principal, @PathVariable("type") String type, 
			@PathVariable(name="id", required=false) String id) {
		if (id != null) {
			model.addAttribute("parent", id);
		}
		model.addAttribute("url", "/admin/project_table_html/" + type +  (id != null? "/" + id: ""));
		return fragment_project_common_table(model, type);
	}

	private String fragment_project_common_table(Model model, String type) {
		List<Tab> tabList = entityResource.titles().stream().map(e -> new Tab(e, "label.project." + e, e.equals(type) ? "active":"")).collect(Collectors.toList());
		model.addAttribute("tabList", tabList);
		return "fragment_project_common_table";
	}
	
}
class Tab {
	public Tab(String type, String title, String active) {
		this.type = type;
		this.title = title;
		this.active = active;
	}
	public String type;
	public String title;
	public String active;
}
