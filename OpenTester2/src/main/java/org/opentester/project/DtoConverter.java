package org.opentester.project;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;

public class DtoConverter {
	private static final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd");
	
	public static TestPointDto convertDto(TestPoint testPoint) {
		List<TestItemDto> testItems = new ArrayList<>();
		testPoint.getTestItems().forEach(t -> testItems.add(convertDto(t)));;
		String status = createStatus(testPoint.passFail());
		return TestPointDto.builder().id(testPoint.getId()).name(testPoint.getName())
			.status(status)
			.operator(convertOperatorText2(testPoint.allOperators()))
			.location(testPoint.getLocation())
			.summary(testPoint.getTestItems().size() + " TEST ITEMS")
			.completeDueDate(formatDate(testPoint.completeDueDate()))
			.testItems(testItems)
			.passed(testPoint.passFail().getPassed()).failed(testPoint.passFail().getFailed()).untouched(testPoint.passFail().getUntouched())
					.build();
	}
	
	public static String convertOperatorText(Set<ProjectUser> operators) {
		String operator = operators.size() + " people ";
		Set<String> team = new HashSet<>();
		for (ProjectUser user : operators) {
			team.add(user.overview());
		}
		operator += team.toString();
		return operator;
	}
	
	public static String convertOperatorText2(Set<ProjectUser> operators) {
		String operator = "";
		Set<String> team = new HashSet<>();
		for (ProjectUser user : operators) {
			team.add(user.middle());
		}
		operator += team.toString();
		return operator;
	}
	
	public static String formatDate(Date date) {
		if (date == null) {
			return "";
		}
		else {
			return dateFormatter.format(date);
		}
	}

	public static ProjectDto convertDto(Project p) {
		Set<ProjectUser> operators = p.allOperators();
		String operator = convertOperatorText(operators);
		PassFail passFail = p.passFail();
		String status = createStatus(passFail);
		ProjectDto dto = ProjectDto.builder().id(p.getId()).name(p.getProjectName()).type(p.getType())
				.completeDueDate(formatDate(p.completeDueDate()))
				.completeDate(formatDate(p.completeData()))
				.status(status)
				.operator(operator)
				.location(p.allLocations().toString())
				.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched())
				.build();
		return dto;
	}

	private static String createStatus(PassFail passFail) {
		String status = "";
		if (passFail.percentage() == 0) {
			status = "NOT STARTED";
		}
		else if (passFail.getUntouched() > 0) {
			status = "ON-GOING, " + passFail.percentage() + "%";
		}
		else {
			status = "COMPLETED";
		}
		return status;
	}

	public static DutPackageDto convertDto(DutPackage dutPackage) {
		PassFail passFail = dutPackage.passFail();
		String status = createStatus(passFail);
		DutPackageDto dto = DutPackageDto.builder().id(dutPackage.getId()).name(dutPackage.getName())
				.status(status)
				.summary(dutPackage.getDuts().size() + " FIBERS," + dutPackage.testPointCount() + " TEST POINTS")
				.operator(convertOperatorText(dutPackage.allOprerators()))
				.completeDueDate(formatDate(dutPackage.comleteDueDate()))
				.completeDate(formatDate(dutPackage.comleteDate()))
				.location(dutPackage.allLocations().toString())
				.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build();
		
		return dto;
	}

	public static DutDto convertDto(Dut dut) {
		PassFail passFail = dut.passFail();
		List<TestPointDto> testPoints = new ArrayList<>();
		dut.getTestPoints().forEach(p -> testPoints.add(DtoConverter.convertDto(p)));
		String status = createStatus(passFail);
		
		DutDto dto = DutDto.builder().name(dut.getDutName()).id(dut.getId())
			.summary(dut.getTestPoints().size() + " Test Points, " + dut.totalTestItemCount() + " Test Items")
			.completeDueDate(formatDate(dut.completeDueDate()))
			.completeDate(formatDate(dut.completeDate()))	
			.operator(convertOperatorText2(dut.allOperators()))
			.location(dut.allLocations().toString())
			.status(status)
			.testPoints(testPoints)
			.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build();
		return dto;
	}

	public static TestItemDto convertDto(TestItem testItem) {
		String history = "";
		if (testItem.getResultHistory() == null) {
			history = "-";
		}
		else {
			for (int i = 0; i < testItem.getResultHistory().size()-1; i++) {
				TestResult testResult = testItem.getResultHistory().get(i);
				history += "[Result=" + testResult.getResult() + "@" + testResult.getDate() + "]";
			}
		}
		TestItemDto dto = TestItemDto.builder().id(testItem.getId())
				.testTarget(testItem.getCriteria().getTestItemTemplate().getTarget())
				.completeDate(formatDate(testItem.getCompleteDate()))	
				.unit(testItem.getCriteria().getTestItemTemplate().getUnit())
				.criteria(testItem.getCriteria().getCriteriaFormula())
				.status(testItem.status()).completeDueDate(formatDate(testItem.getCompleteDueDate()))
				.operator(testItem.getOperator().middle())
				.name(testItem.getCriteria().getTestItemTemplate().getName())
				.history(history)
				.build();
		
		if (testItem.getResultHistory() != null && testItem.getResultHistory().size()> 0) {
			TestResult testResult = testItem.getResultHistory().get(testItem.getResultHistory().size()-1);
			dto.setResult(testResult.getResult());
			dto.setCompleteDate(formatDate(testResult.getDate()));
			dto.setOperator(testResult.getOperator().middle());
			dto.setTester(testResult.getTester().getTesterTemplate().getModel() + "/" + testResult.getTester().getTesterTemplate().getSupplier() + "/" + testResult.getTester().getSerialNumber());
			if (testResult.getRawData() != null) {
				dto.setRawData(testResult.getRawData().getId());
				dto.setRawDataName(testResult.getRawData().getName());
			}
		}
		return dto;
	}	
}
