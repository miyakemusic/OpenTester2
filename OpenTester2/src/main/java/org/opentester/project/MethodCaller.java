package org.opentester.project;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

import org.opentester.project.dto.DtoFieldControl;
import org.opentester.project.entity.ChildNode;
import org.thymeleaf.util.StringUtils;

public class MethodCaller {

	private String methodName;
	private Object object;

	public MethodCaller(Object object) {
		this.object = object;
	}

	public Object get(Class annotationType) {
		try {
			String fieldName = getFieldName(annotationType);
			if (fieldName == null) {
				return null;
			}
			return object.getClass().getDeclaredMethod("get" + fieldName).invoke(object);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public void set(Class annotationType, Object value) {
		try {
			String fieldName = getFieldName(annotationType);
			if (fieldName == null) {
				return;
			}
			this.object.getClass().getDeclaredMethod("set" + fieldName, value.getClass()).invoke(object, value);
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
				| SecurityException e) {
			e.printStackTrace();
		}
	}

	private String getFieldName(Class annotationType) {
		for (Field field : object.getClass().getDeclaredFields()) {
			Annotation annotation = field.getAnnotation(annotationType);
			if (annotation != null) {
				return StringUtils.capitalize(field.getName());
			}
		}
		return null;
	}

	public Field[] allFields() {
		return this.object.getClass().getDeclaredFields();
	}

	public Annotation getAnnotation(Field field, Class class1) {
		return field.getAnnotation(class1);
	}

	public Object value(Field field) {
		try {
			Object value = this.object.getClass().getMethod("get" + StringUtils.capitalize(field.getName())).invoke(object);
			if (value != null) {
				return value;
			}
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
				| SecurityException e) {
			e.printStackTrace();
		}
		return null;
	}
}
