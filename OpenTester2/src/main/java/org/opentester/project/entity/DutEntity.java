package org.opentester.project.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.PassFailDto;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OrderBy;
import jakarta.persistence.Table;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Builder
@Data
@Entity
@Table(name = "project_dut")
public class DutEntity implements Cloneable {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String name;
	
	@ManyToOne
	@JoinColumn(name = "dutpackage_id")
	@ParentNode
	private DutPackageEntity dutPackage;
	
	@OneToMany(mappedBy = "dut", cascade = CascadeType.ALL)
	@OrderBy("name ASC")
	@ChildNode
	private List<TestPointEntity> testPoints = new ArrayList<>();

	@Tolerate
	public DutEntity() {}
	
	public int totalTestItemCount() {
		int i = 0;
		for (TestPointEntity testPoint : this.testPoints) {
			i += testPoint.getTestItems().size();
		}
		return i;
	}

	public Set<ProjectUserEntity> allOperators() {
		Set<ProjectUserEntity> operators = new HashSet<>();
		for (TestPointEntity testPoint : this.testPoints) {
			operators.addAll(testPoint.allOperators());
//			for (TestItem testItem : testPoint.getTestItems()) {
//				operators.addAll(testItem.allOperators());
//			}
		}
		return operators;
	}

	public Set<String> allLocations() {
		Set<String> ret = new HashSet<>();
		this.testPoints.forEach(t -> ret.add(t.getLocation()));
		return ret;
	}

	public PassFailDto passFail() {
		PassFailDto ret = PassFailDto.builder().pass(0).fail(0).untouched(0).build();
		this.testPoints.forEach(f -> {
			ret.add(f.passFail());
		});
		return ret;
	}

	public Date completeDueDate() {
		LatestDate latest = new LatestDate();
		for (TestPointEntity testPoint : this.testPoints) {
			Date date = testPoint.completeDueDate();
			latest.add(date);
		}
		return latest.latest(false);
	}

	public Date completeDate() {
		LatestDate latest = new LatestDate();
		for (TestPointEntity testPoint : this.testPoints) {
			Date date = testPoint.completeDate();
			latest.add(date);
		}
		return latest.latest(true);
	}
	
	@Override
	public String toString() {
		return this.name;
	}
	
	@Override
	public DutEntity clone() {
		try {
			DutEntity ret = (DutEntity)super.clone();
			ret.setId(null);
			ret.setTestPoints(null);
			ret.setDutPackage(null);
			return ret;
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return null;
	}
}
