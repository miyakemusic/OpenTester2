package org.opentester.project.entity.mapper;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.TestPointRepository;
import org.opentester.project.repository.TestResultRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class TestItemMapper extends DtoMapper<TestItemEntity, TestItemDto>{

	@Autowired
	private CriteriaTemplateRepository projectCriteriaTemplateRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private TestPointRepository projectTestPointRepository;
	
	@Autowired TestResultRepository projectTestResultRepository;
	
	@Override
	public TestItemDto toDto(TestItemEntity e) {
		return TestItemDto.builder()
				.id(e.getId())
				.testPoint(isNotNull(e.getTestPoint()) ? KeyValueDto.builder().key(e.getTestPoint().getId()).value(e.getTestPoint().getName()).build() : null)
				.criteria(isNotNull(e.getCriteria()) ? KeyValueDto.builder().key(e.getCriteria().getId()).value(e.getCriteria().toString()).build() : null)
				.operator(isNotNull(e.getOperator()) ?  KeyValueDto.builder().key(e.getOperator().getId()).value(e.getOperator().toString()).build() : null)
				//.results(isNotNull(e.getResultHistory()) ? e.getResultHistory().stream().map(h -> KeyValueDto.builder().key(h.getId()).value(h.getDate() != null ? h.getDate().toString(): null).build()).collect(Collectors.toList()) : null)
				.result(isNotNull(e.getResultHistory()) && e.getResultHistory().size() > 0 ? e.getResultHistory().get(e.getResultHistory().size()-1).getResult() : "-")
//				.passFailProgress(e.passFail())
				.build();
	}

	@Override
	public TestItemEntity toEntity(TestItemDto d) {
		return TestItemEntity.builder()
				.id(d.getId())
				.testPoint(isNotNull(d.getTestPoint().getKey()) ? projectTestPointRepository.findById(d.getTestPoint().getKey()).get() : null)
				.criteria(isNotNull(d.getCriteria()) ? projectCriteriaTemplateRepository.findById(d.getCriteria().getKey()).get() : null)
				.operator(isNotNull(d.getOperator()) ? projectUserRepository.findById(d.getOperator().getKey()).get() : null)
//				.resultHistory(isNotNull(d.getResults()) ? projectTestResultRepository.findAllById(d.getResults().stream().map(r -> r.getKey()).collect(Collectors.toList())): null)
				.build();
	}

}
