package org.opentester.project.entity;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.opentester.project.dto.PassFailDto;
import org.opentester.project.entity.PassFailCalculator.PassFailEnum;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Data
@Builder
@Entity
@Table(name="project_testitem")
public class TestItemEntity implements Cloneable {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@ManyToOne
	@JoinColumn(name = "criteria_id")
	private CriteriaTemplateEntity criteria;
	
	@ManyToOne
	@JoinColumn(name = "operator_id")
	private ProjectUserEntity operator;
	
	private Date completeDueDate;
	
	@ManyToOne
	@JoinColumn(name = "testpoint_id")
	@ParentNode
	private TestPointEntity testPoint;
	
	@Tolerate
	public TestItemEntity() {}
	
	@OneToMany(mappedBy = "testItem", cascade = CascadeType.ALL)
	private List<TestResultEntity> resultHistory = new ArrayList<>();
	
	@ManyToOne
	@JoinColumn(name = "tester_id")
	private TesterEntity tester;
	
	public TestResultEntity latestResult() {
		if (this.resultHistory != null && resultHistory.size() > 0) {
			return this.sortedHistory().get(this.sortedHistory().size() - 1);
		}
		return null;
	}
	public List<TestResultEntity> sortedHistory() {
		if (resultHistory == null) {
			return null;
		}
		return this.resultHistory.stream().sorted(Comparator.comparing(TestResultEntity::getDate)).collect(Collectors.toList());	
	}
	
	public Set<ProjectUserEntity> allOperators() {
		Set<ProjectUserEntity> ret = new HashSet<>();
		ret.add(this.operator);
		if (resultHistory != null) {
			resultHistory.forEach(r -> ret.add(r.getOperator()));
		}
		return ret;
	}
//	public ProjectTestItemEntity calculate() {
//		if (this.resultHistory != null) {
//			for (ProjectTestResultEntity result : this.resultHistory) {
//				PassFailEnum passFail = PassFailCalculator.judgePassFail(criteria.getCriteriaFormula(), result.getResult());
//				result.setStatus(passFail.toString());
//			}
//			
//		}
//		return this;
//	}
	
	public String status() {
		if (this.resultHistory != null && this.resultHistory.size() > 0) {
			String result = this.resultHistory.get(this.resultHistory.size()-1).getStatus();
			if (result == null) {
				result = PassFailEnum.Untouched.name();
			}
			return result;
		}
		return PassFailEnum.Untouched.toString();
	}
	
	public PassFailDto passFail() {	
		if (status().equals(PassFailEnum.Passed.name())) {
			return PassFailDto.builder().pass(1).fail(0).untouched(0).build();
		}
		else if (status().equals(PassFailEnum.Failed.name())) {
			return PassFailDto.builder().pass(0).fail(1).untouched(0).build();
		}
		return PassFailDto.builder().pass(0).fail(0).untouched(1).build();
	}

	public Date completeDate() {
		if (this.resultHistory != null && this.resultHistory.size() > 0) {
			TestResultEntity result = this.resultHistory.get(this.resultHistory.size() - 1);
			return result.getDate();
		}
		return null;
	}

	@Override
	public String toString() {
		if (this.criteria != null) {
			return criteria.toString() + " @ " + this.testPoint.toString();
		}
		return "Not Defined";
	}
	
	@Override
	public TestItemEntity clone() {
		try {
			TestItemEntity ret = (TestItemEntity)super.clone();
			ret.setResultHistory(null);
			ret.setId(null);
			return ret;
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return null;
	}
}
