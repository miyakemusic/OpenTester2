package org.opentester.project.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.PassFailDto;
import org.opentester.project.dto.ProjectUserDto;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Data
@Builder
@Entity
@Table(name="project_testpoint")
public class ProjectTestPointEntity {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	private String name;
	private String location;
	
	@ManyToOne
	@JoinColumn(name = "operator_id")
	private ProjectUserEntity operator;
	
	@ManyToOne
	@JoinColumn(name = "dut_id")
	private ProjectDutEntity dut;
	
	@OneToMany(mappedBy = "testPoint", cascade = CascadeType.ALL)
	private List<ProjectTestItemEntity> testItems = new ArrayList<>();
	
	@Tolerate
	public ProjectTestPointEntity() {}
//	private List<TestResult> testResults = new ArrayList<>();
	
//	public TestPoint testItem(String testItem, String criteria) {
//		this.testItems.add(TestItem.builder().testTarget(testItem).criteria(criteria).build());
//		return this;
//	}
	
	public Set<ProjectUserEntity> allOperators() {
		Set<ProjectUserEntity> ret = new HashSet<>();
		this.testItems.forEach(t -> ret.addAll(t.allOperators()));
		return ret;
	}

	public PassFailDto passFail() {
		PassFailDto ret = PassFailDto.builder().pass(0).fail(0).untouched(0).build();
		this.testItems.forEach(f -> {
			ret.add(f.passFail());
		});
		return ret;
	}

	public Date completeDueDate() {
		LatestDate latest = new LatestDate();
		for (ProjectTestItemEntity testItem :this.testItems) {
			Date date = testItem.getCompleteDueDate();
			latest.add(date);
		}
		return latest.latest();
	}

	public Date completeDate() {
		LatestDate latest = new LatestDate();
		for (ProjectTestItemEntity testItem :this.testItems) {
			Date date = testItem.getCompleteDate();
			latest.add(date);
		}
		return latest.latest();
	}

	@Override
	public String toString() {
		return this.name;
	}
}
