package org.opentester.project.entity.mapper;

import java.util.stream.Collectors;

import org.opentester.project.ProjectSubRoleRepository;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ProjectUserMapper extends DtoMapper<ProjectUserEntity, ProjectUserDto> {

	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Override
	public ProjectUserDto toDto(ProjectUserEntity entity) {
		return ProjectUserDto.builder()
				.id(entity.getId())
				.fullName(entity.getFullName())
				.organization(entity.getOrganization())
				.qualification(entity.getQualification())
				.project(isNotNull(entity.getProject()) ? KeyValueDto.builder().key(entity.getProject().getId()).value(entity.getProject().getProjectName()).build() : null)
				.subRoles(isNotNull(entity.getSubRoles()) ? entity.getSubRoles().stream().map(sr -> KeyValueDto.builder().key(sr.getId()).value(sr.getName()).build()).collect(Collectors.toList()) : null)
				.team(entity.getTeam())
				.testers(isNotNull(entity.getTesters()) ? entity.getTesters().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getSerialNumber()).build()).collect(Collectors.toList()) : null)
				.username(entity.getUsername())
				.build();
	}

	@Override
	public ProjectUserEntity toEntity(ProjectUserDto dto) {
		return ProjectUserEntity.builder()
				.id(dto.getId())
				.fullName(dto.getFullName())
				.organization(dto.getOrganization())
				.qualification(dto.getQualification())
				.project(isNotNull(dto.getProject()) ? projectRepository.findById(dto.getProject().getKey()).get() : null)
				.subRoles(isNotNull(dto.getSubRoles()) ? dto.getSubRoles().stream().map(sr -> projectSubRoleRepository.findById(sr.getKey()).get()).collect(Collectors.toList()): null)
				.team(dto.getTeam())
				.testers(isNotNull(dto.getTesters()) ? dto.getTesters().stream().map(sr -> projectTesterRepository.findById(sr.getKey()).get()).collect(Collectors.toList()): null)
				.username(dto.getUsername())
				.build();
	}

}
