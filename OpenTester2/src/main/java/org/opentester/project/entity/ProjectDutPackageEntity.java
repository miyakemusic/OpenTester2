package org.opentester.project.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.ProjectUserDto;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Builder
@Data
@Entity
@Table(name = "project_dutpackage")
public class ProjectDutPackageEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	private String name;
	
	@ManyToOne
	@JoinColumn(name = "project_id")
	private ProjectEntity project;
	
	@Tolerate
	public ProjectDutPackageEntity() {}
	
	@OneToMany(mappedBy = "dutPackage", cascade = CascadeType.ALL)
	private List<ProjectDutEntity> duts;// = new ArrayList<>();
//	private List<DutPackageEntity> subPackage;// = new ArrayList<>();
	public int testPointCount() {
		int i = 0;
		for (ProjectDutEntity dut : duts) {
			i += dut.getTestPoints().size();
		}
		return i;
	}
	
	public Set<ProjectUserEntity> allOprerators() {
		Set<ProjectUserEntity> operators = new HashSet<>();
		
		for (ProjectDutEntity dut : duts) {
			operators.addAll(dut.allOperators());
		}
		
		return operators;
	}

	public Set<String> allLocations() {
		Set<String> ret = new HashSet<>();
		this.duts.forEach(d -> ret.addAll(d.allLocations()));
		return ret;
	}

	public PassFail passFail() {
		PassFail ret = new PassFail(0, 0, 0);
		this.duts.forEach(f -> {
			ret.add(f.passFail());
		});
		return ret;
	}

	public Date comleteDueDate() {
		LatestDate latest = new LatestDate();
		for (ProjectDutEntity dut : duts) {
			Date date = dut.completeDueDate();
			latest.add(date);
		}
		return latest.latest();
	}

	public Date comleteDate() {
		LatestDate latest = new LatestDate();
		for (ProjectDutEntity dut : duts) {
			Date date = dut.completeDate();
			latest.add(date);
		}
		return latest.latest();
	}
}
