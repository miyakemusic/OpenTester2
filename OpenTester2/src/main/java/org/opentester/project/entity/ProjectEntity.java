package org.opentester.project.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.PassFailDto;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Data
@Builder
@Entity
@Table(name = "project")
public class ProjectEntity {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(unique=true)
	private String projectName;
	private String type;
	
	@OneToMany(mappedBy = "project", cascade = CascadeType.ALL)
	private List<DutPackageEntity> dutPackages = new ArrayList<>();

	@Tolerate
	public ProjectEntity() {}
	
	public Set<ProjectUserEntity> allOperators() {
		Set<ProjectUserEntity> ret = new HashSet<>();
		if (this.dutPackages != null) {
			this.dutPackages.forEach(f -> ret.addAll(f.allOprerators()));
		}
		return ret;
	}

	public Set<String> allLocations() {
		Set<String> ret = new HashSet<>();
		if (this.dutPackages != null) {
			this.dutPackages.forEach(f -> ret.addAll(f.allLocations()));
		}
		return ret;
	}
	public PassFailDto passFail() {
		PassFailDto ret = PassFailDto.builder().pass(0).fail(0).untouched(0).build();
		if (this.dutPackages != null) {
			this.dutPackages.forEach(f -> {
				ret.add(f.passFail());
			});
		}
		return ret;
	}
	public Date completeDueDate() {
		LatestDate latest = new LatestDate();
		
		if (this.dutPackages != null) {
			this.dutPackages.forEach(dp -> latest.add(dp.comleteDueDate()));
		}
//		for (ProjectDutPackageEntity dutPackage : this.dutPackages) {
//			Date date = dutPackage.comleteDueDate();
//			latest.add(date);
//		}
		return latest.latest();
	}

	public Date completeData() {
		LatestDate latest = new LatestDate();
		if (this.dutPackages != null) {
			for (DutPackageEntity dutPackage : this.dutPackages) {
				Date date = dutPackage.comleteDate();
				latest.add(date);
			}
		}
		return latest.latest();
	}

	@Override
	public String toString() {
		return this.projectName;
	}
}
