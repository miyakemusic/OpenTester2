package org.opentester.project.entity;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.opentester.project.TempDB;
import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TesterSupplierDto;

public class DtoConverter {
	public static final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd");
	
	public static TestPointDto convertDto(ProjectTestPointEntity testPoint) {
		List<TestItemDto> testItems = new ArrayList<>();
		testPoint.getTestItems().forEach(t -> testItems.add(convertDto(t)));;
		String status = createStatus(testPoint.passFail());
		return TestPointDto.builder().id(testPoint.getId()).name(testPoint.getName())
			.status(status)
			.operator(convertOperatorText2(testPoint.allOperators()))
			.location(testPoint.getLocation())
			.summary(testPoint.getTestItems().size() + " TEST ITEMS")
			.completeDueDate(formatDate(testPoint.completeDueDate()))
			.testItems(testItems)
			.passed(testPoint.passFail().getPassed()).failed(testPoint.passFail().getFailed()).untouched(testPoint.passFail().getUntouched())
					.build();
	}
	
	public static String convertOperatorText(Set<ProjectUserEntity> operators) {
		String operator = operators.size() + " people ";
		Set<String> team = new HashSet<>();
		for (ProjectUserEntity user : operators) {
			team.add(user.overview());
		}
		operator += team.toString();
		return operator;
	}
	
	public static String convertOperatorText2(Set<ProjectUserEntity> operators) {
		String operator = "";
		Set<String> team = new HashSet<>();
		for (ProjectUserEntity user : operators) {
			team.add(user.middle());
		}
		operator += team.toString();
		return operator;
	}
	
	public static String formatDate(Date date) {
		if (date == null) {
			return "";
		}
		else {
			return dateFormatter.format(date);
		}
	}

	public static ProjectDto convertDto(ProjectEntity p) {
		Set<ProjectUserEntity> operators = p.allOperators();
		String operator = convertOperatorText(operators);
		PassFail passFail = p.passFail();
		String status = createStatus(passFail);
		ProjectDto dto = ProjectDto.builder().id(p.getId()).name(p.getProjectName()).type(p.getType())
				//.completeDueDate(formatDate(p.completeDueDate()))
				.completeDueDate(p.completeDueDate())
				//.completeDate(formatDate(p.completeData()))
				.completeDate(p.completeData())
				.status(status)
				.operator(operator)
				.location(p.allLocations().toString())
				.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched())
				.build();
		return dto;
	}

	private static String createStatus(PassFail passFail) {
		String status = "";
		if (passFail.percentage() == 0) {
			status = "NOT STARTED";
		}
		else if (passFail.getUntouched() > 0) {
			status = "ON-GOING, " + passFail.percentage() + "%";
		}
		else {
			status = "COMPLETED";
		}
		return status;
	}

	public static DutPackageDto convertDto(ProjectDutPackageEntity dutPackage) {
		PassFail passFail = dutPackage.passFail();
		String status = createStatus(passFail);
		DutPackageDto dto = DutPackageDto.builder().id(dutPackage.getId()).name(dutPackage.getName())
				.status(status)
				.summary(dutPackage.getDuts().size() + " FIBERS," + dutPackage.testPointCount() + " TEST POINTS")
				.operator(convertOperatorText(dutPackage.allOprerators()))
				.completeDueDate(formatDate(dutPackage.comleteDueDate()))
				.completeDate(formatDate(dutPackage.comleteDate()))
				.location(dutPackage.allLocations().toString())
				.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build();
		
		return dto;
	}

	public static DutDto convertDto(ProjectDutEntity dut) {
		PassFail passFail = dut.passFail();
		List<TestPointDto> testPoints = new ArrayList<>();
		dut.getTestPoints().forEach(p -> testPoints.add(DtoConverter.convertDto(p)));
		String status = createStatus(passFail);
		
		DutDto dto = DutDto.builder().name(dut.getDutName()).id(dut.getId())
			.summary(dut.getTestPoints().size() + " Test Points, " + dut.totalTestItemCount() + " Test Items")
			.completeDueDate(formatDate(dut.completeDueDate()))
			.completeDate(formatDate(dut.completeDate()))	
			.operator(convertOperatorText2(dut.allOperators()))
			.location(dut.allLocations().toString())
			.status(status)
			.testPoints(testPoints)
			.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build();
		return dto;
	}

	public static TestItemDto convertDto(ProjectTestItemEntity testItem) {
		String history = "";
		if (testItem.getResultHistory() == null) {
			history = "-";
		}
		else {
			for (int i = 0; i < testItem.getResultHistory().size()-1; i++) {
				ProjectTestResultEntity testResult = testItem.getResultHistory().get(i);
				history += "[Result=" + testResult.getResult() + "@" + testResult.getDate() + "]";
			}
		}
		TestItemDto dto = TestItemDto.builder().id(testItem.getId())
				.key(testItem.getCriteria().getTestItemTemplate().getTestkey())
				.completeDate(formatDate(testItem.getCompleteDate()))	
				.unit(testItem.getCriteria().getTestItemTemplate().getUnit())
				.criteria(testItem.getCriteria().getCriteriaFormula())
				.status(testItem.status()).completeDueDate(formatDate(testItem.getCompleteDueDate()))
				.operator(testItem.getOperator().middle())
				.description(testItem.getCriteria().getTestItemTemplate().getDescription())
				.history(history)
				.build();
		
		if (testItem.getResultHistory() != null && testItem.getResultHistory().size()> 0) {
			ProjectTestResultEntity testResult = testItem.getResultHistory().get(testItem.getResultHistory().size()-1);
			dto.setResult(testResult.getResult());
			dto.setCompleteDate(formatDate(testResult.getDate()));
			dto.setOperator(testResult.getOperator().middle());
			dto.setTester(testResult.getTester().getTesterTemplate().getModel() + "/" + testResult.getTester().getTesterTemplate().getSupplier() + "/" + testResult.getTester().getSerialNumber());
			if (testResult.getRawData() != null) {
				dto.setRawData(testResult.getRawData().getId());
				dto.setRawDataName(testResult.getRawData().getName());
			}
		}
		return dto;
	}

	public static List<ProjectTesterDto> convertDto(List<ProjectTesterEntity> testers) {
		List<ProjectTesterDto> ret = new ArrayList<>();
		testers.forEach(t -> ret.add(convertDto(t)));
		return ret;
	}

	public static KeyValueDto convertSubRoleDto(ProjectSubRoleEntity entity) {
		return KeyValueDto.builder().key(entity.getId()).value(entity.getName()).build();
	}

	
	public static ProjectUserDto convertDto(ProjectUserEntity user) {
		
//		List<KeyValueDto> roles = user.getSubRoles().stream().map( r -> DtoConverter.convertSubRoleDto(r) ).collect(Collectors.toList());	
		ProjectUserDto dto = ProjectUserDto.builder()
			.id(user.getId())
			.assignedProject(user.getCurrentProject().getProjectName())
			.belongings(user.getTesters().stream().map(t->t.getCurrentUser().getUsername()).collect(Collectors.toList()))
			.fullName(user.getFullName())
			.organization(user.getOrganization())
			.qualification(user.getQualification())
			.subRoles(user.getSubRoles().stream().map( r -> DtoConverter.convertSubRoleDto(r) ).collect(Collectors.toList()))
			.team(user.getTeam())
			.build();
			

//		List<ProjectEntity> projects = TempDB.instance().projects().stream().filter(p -> p.allOperators().contains(user)).collect(Collectors.toList());
//		
//		for (ProjectEntity p : projects) {
//			p.getProjectName();
//		}
//		List<String> assignedProject = projects.stream().map(p -> p.getProjectName()).collect(Collectors.toList());
//		
//		List<ProjectTesterEntity> testers = TempDB.instance().testers();
//		
//		List<String> belongings = testers.stream().filter(p -> p.getCurrentUser() != null).filter(p -> p.getCurrentUser().getId() == user.getId()).map(p -> p.getTesterTemplate().getModel() + "/" + p.getSerialNumber()).collect(Collectors.toList());
////		.filter(p -> p.getCurrentUser().getId() == user.getId())
//
//		ProjectUserDto ret = ProjectUserDto.builder().id(user.getId()).organization(user.getOrganization())
//				.fullName(user.getFullName())
//				.qualification(user.getQualification())
//				.subRole(user.getSubRole().stream().map(r-> KeyValueDto.builder().key(r.getId()).value(r.getName()).build()).collect(Collectors.toList()))
//				.assignedProject(assignedProject.toString())
//				.belongings(belongings)
//				.team(user.getTeam()).username(user.getUsername()).build();		

		return dto;
	}

	public static List<ProjectUserDto> convertUserDto(List<ProjectUserEntity> users) {
		return users.stream().map(p -> DtoConverter.convertDto(p)).collect(Collectors.toList());
//		List<ProjectUserDto> ret = new ArrayList<>();
//		users.forEach(u -> ret.add(convertDto(u)));
//		return ret.toArray(new ProjectUserDto[0]);
	}

	public static ProjectTesterTemplateDto convertDto(ProjectTesterTemplateEntity testerTemplate) {	
		
//		KeyValueDto supplier = null;
		
//		if (testerTemplate.getSupplier() != null) {
		KeyValueDto	supplier = KeyValueDto.builder().key(testerTemplate.getSupplier().getId()).value(testerTemplate.getSupplier().getName()).build();
//		}
		
		return ProjectTesterTemplateDto.builder().id(testerTemplate.getId()).keyword(testerTemplate.getKeyword())
				.model(testerTemplate.getModel())
				.supplier(supplier)
				.testItemTemplates(testerTemplate.getTestItemTemplates().stream()
						.map(p-> KeyValueDto.builder().key(p.getId()).value(p.getTestkey()).build())
						.collect(Collectors.toList()))
				.build();
	}

	public static List<ProjectTesterTemplateDto> convertTesterTemplateDto(List<ProjectTesterTemplateEntity> testerTemplates) {
		return testerTemplates.stream().map(p -> DtoConverter.convertDto(p)).collect(Collectors.toList());	
	}
	
	public static ProjectTestItemTemplateDto convertDto(ProjectTestItemTemplateEntity testItemTemplates) {	
		return ProjectTestItemTemplateDto.builder().id(testItemTemplates.getId()).description(testItemTemplates.getDescription())
				.key(testItemTemplates.getTestkey())
				.unit(testItemTemplates.getUnit())
				.build();
	}
	
	public static List<ProjectTestItemTemplateDto> convertTestItemTemplateDto(
			List<ProjectTestItemTemplateEntity> testItemTemplates) {
				
		return testItemTemplates.stream().map(t -> DtoConverter.convertDto(t)).collect(Collectors.toList());
	}

	public static ProjectTesterDto convertDto(ProjectTesterEntity t) {
		return ProjectTesterDto.builder().id(t.getId()).model(t.getTesterTemplate().getModel())
			.supplier(t.getTesterTemplate().getSupplier().getName())
			.serialNumber(t.getSerialNumber())
			.status(t.getStatus())
			.keyword(t.getTesterTemplate().getKeyword())
			.currentUser(t.getCurrentUser() != null ? t.getCurrentUser().getUsername() : "")
			.history(t.getHistory().toString())
			.ability(t.getTesterTemplate().getTestItemTemplates().stream().map(p -> p.getTestkey()).collect(Collectors.toList()) )
			.reservedFrom(formatDate(t.getReservedFrom()))
			.reservedTo(formatDate(t.getReservedTo()))
			.build();
	}

	public static TesterSupplierDto convertDto(ProjectTesterSupplierEntity supplier) {
		return TesterSupplierDto.builder().id(supplier.getId()).name(supplier.getName())
				.url(supplier.getUrl())
				.build();
	}
	
	public static List<TesterSupplierDto> convertTestSupplier(List<ProjectTesterSupplierEntity> testerSuppliers) {
		return testerSuppliers.stream().map(ts -> DtoConverter.convertDto(ts)).collect(Collectors.toList());
	}

	public static List<ProjectDto> convertProjectDto(List<ProjectEntity> projects) {
		return projects.stream().map(p -> DtoConverter.convertDto(p)).collect(Collectors.toList());
	}

}
