package org.opentester.project.entity.mapper;

import java.util.stream.Collectors;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.entity.ProjectTesterTemplateEntity;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ProjectTesterTemplateMapper extends DtoMapper<ProjectTesterTemplateEntity, ProjectTesterTemplateDto>{

	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Override
	public ProjectTesterTemplateDto toDto(ProjectTesterTemplateEntity e) {
		return ProjectTesterTemplateDto.builder()
				.id(e.getId())
				.keyword(e.getKeyword())
				.url(e.getUrl())
				.model(e.getModel())
				.supplier(isNotNull(e.getSupplier()) ? KeyValueDto.builder().key(e.getSupplier().getId()).value(e.getSupplier().getName()).build() : null)
				.testItemTemplates(isNotNull(e.getTestItemTemplates()) ? e.getTestItemTemplates().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getTestkey()).build()).collect(Collectors.toList()) : null)
				.build();
	}

	@Override
	public ProjectTesterTemplateEntity toEntity(ProjectTesterTemplateDto d) {
		return ProjectTesterTemplateEntity.builder()
				.id(d.getId())
				.url(d.getUrl())
				.keyword(d.getKeyword())
				.model(d.getModel())
				.supplier(isNotNull(d.getSupplier()) ? projectTesterSupplierRepository.findById(d.getSupplier().getKey()).get() : null)
				.testItemTemplates(isNotNull(d.getTestItemTemplates()) ? d.getTestItemTemplates().stream().map(sr -> projectTestItemTemplateRepository.findById(sr.getKey()).get()).collect(Collectors.toList()): null)
				.build();
	}

}
