package org.opentester.project.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.entity.PassFailCalculator.PassFailEnum;

import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Data
@Builder
public class TestItem {

	private int id;
	
	private ProjectCriteriaTemplate criteria;
	private ProjectUser operator;
	private Date completeDueDate;
	private List<TestResult> resultHistory = new ArrayList<>();
	
	@Tolerate
	public TestItem() {}
	
	public Set<ProjectUser> allOperators() {
		Set<ProjectUser> ret = new HashSet<>();
		ret.add(this.operator);
		if (resultHistory != null) {
			resultHistory.forEach(r -> ret.add(r.getOperator()));
		}
		return ret;
	}
	public TestItem calculate() {
		if (this.resultHistory != null) {
			for (TestResult result : this.resultHistory) {
				PassFailEnum passFail = PassFailCalculator.judgePassFail(criteria.getCriteriaFormula(), result.getResult());
				result.setStatus(passFail.toString());
			}
			
		}
		return this;
	}
	
	public String status() {
		if (this.resultHistory != null && this.resultHistory.size() > 0) {
			String result = this.resultHistory.getLast().getStatus();
			return result;
		}
		return PassFailEnum.Untouched.toString();
	}
	
	public PassFail passFail() {	
		if (status().equals(PassFailEnum.Passed.toString())) {
			return new PassFail(1, 0, 0);
		}
		else if (status().equals(PassFailEnum.Failed.toString())) {
			return new PassFail(0, 1, 0);
		}
		return new PassFail(0, 0, 1);
	}

	public Date getCompleteDate() {
		if (this.resultHistory != null && this.resultHistory.size() > 0) {
			TestResult result = this.resultHistory.getLast();
			return result.getDate();
		}
		return null;
	}

}
