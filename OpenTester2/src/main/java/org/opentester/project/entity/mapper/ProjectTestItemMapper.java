package org.opentester.project.entity.mapper;

import org.opentester.instrument.TestItemEntity;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.entity.ProjectTestItemEntity;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectTestItemRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ProjectTestItemMapper extends DtoMapper<ProjectTestItemEntity, TestItemDto>{

	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectTestPointRepository projectTestPointRepository;
	
	@Override
	public TestItemDto toDto(ProjectTestItemEntity e) {
		return TestItemDto.builder()
				.id(e.getId())
				.testPoint(isNotNull(e.getTestPoint()) ? KeyValueDto.builder().key(e.getTestPoint().getId()).value(e.getTestPoint().getName()).build() : null)
				.criteria(isNotNull(e.getCriteria()) ? KeyValueDto.builder().key(e.getCriteria().getId()).value(e.getCriteria().toString()).build() : null)
				.operator(isNotNull(e.getOperator()) ?  KeyValueDto.builder().key(e.getOperator().getId()).value(e.getOperator().toString()).build() : null)
				.build();
	}

	@Override
	public ProjectTestItemEntity toEntity(TestItemDto d) {
		return ProjectTestItemEntity.builder()
				.id(d.getId())
				.testPoint(isNotNull(d.getTestPoint().getKey()) ? projectTestPointRepository.findById(d.getTestPoint().getKey()).get() : null)
				.criteria(isNotNull(d.getCriteria()) ? projectCriteriaTemplateRepository.findById(d.getCriteria().getKey()).get() : null)
				.operator(isNotNull(d.getOperator()) ? projectUserRepository.findById(d.getOperator().getKey()).get() : null)
				.build();
	}

}
