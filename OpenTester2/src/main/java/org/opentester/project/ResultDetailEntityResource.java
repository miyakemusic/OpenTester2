package org.opentester.project;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

import org.opentester.project.entity.TestResultEntity;
import org.opentester.project.entityresource.EntityResource;
import org.opentester.project.repository.RawDataRepository;
import org.opentester.project.repository.TestResultRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.thymeleaf.util.StringUtils;

public class ResultDetailEntityResource implements EntityResource {

	@Autowired
	private HierarchyButtonGenerator hierarchyButtonGenerator;
	
	@Autowired
	private TestResultRepository repository;
	
	@Autowired
	private RawDataRepository rawDataRepository;

	@Autowired
	private TypeResourceManager typeResourceManager;
	
	@Override
	public String getTableHtml(String type, Long id)
			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

		String buttons =  hierarchyButtonGenerator.generate(type, id);
		
		Object dto = this.typeResourceManager.get(type).getDto(id);//.getRepository().findById(id);
		
		TestResultEntity entity = repository.findById(id).get();
		
		StringBuilder html = new StringBuilder();
		html.append("<table class=\"table table-striped table-bordered\">");
		html.append("<head><tr><th>Item</th><th>Value</th></tr></head>");
//		for (Field field : dto.getClass().getDeclaredFields()) {
//			
//			if (!Modifier.isStatic(field.getModifiers())) {
//				Method method = dto.getClass().getMethod("get"+ StringUtils.capitalize(field.getName()));
//				Object value = method.invoke(dto);
//				html.append("<tr><td>" + StringUtils.capitalize(field.getName()) + "</td><td>" + value + "</td></td>");
//			}
//		}
		html.append("<body>");
		html.append("<tr><td>Complete Date</td><td>" +  entity.getTestItem().getCompleteDate() + "</td></tr>");
		html.append("<tr><td>Complete Due Date</td><td>" +  entity.getTestItem().getCompleteDueDate() + "</td></tr>");
		html.append("<tr><td>Planned Operator</td><td>" +  entity.getTestItem().getOperator() + "</td></tr>");
		html.append("<tr><td>Description</td><td>" +  entity.getTestItem().getCriteria().getDescription() + "</td></tr>");
		html.append("<tr><td>Criteria Formula</td><td>" +  entity.getTestItem().getCriteria().getCriteriaFormula() + "</td></tr>");
		html.append("<tr><td>Status</td><td>"+ entity.getStatus() + "</td></tr>");
		html.append("<tr><td>Result</td><td>"+ entity.getResult() + "</td></tr>");
		html.append("<tr><td>Operator</td><td>" + entity.getOperator() + "</td></tr>");
		html.append("<tr><td>Date</td><td>" + entity.getDate() + "</td></tr>");
		html.append("<tr><td>Tester</td><td>" + entity.getTester() + "</td></tr>");
		html.append("<tr><td>RawData</td><td>" + entity.getRawData() + "</td></tr>");
		if (entity.getRawData() != null) {
			html.append("<tr><td>Related Results</td><td>");
			for (TestResultEntity result : entity.getRawData().getResults()) {
				html.append("<div><button class=\"btn btn-link\">" + result.getTestItem().getCriteria().getDescription() + "/" +  result.getResult() + "/" + result.getStatus()+ "</button></div>");
			}
			html.append("</td>");
		}
		html.append("</body>");
		html.append("</table>");
		return buttons + html.toString();
	}

	@Override
	public String getMultiSelectionHtml() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Long id) {
		// TODO Auto-generated method stub

	}

	@Override
	public String getSingleSelectionHtml() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getDialogHtml(String type, Long id, Long parent)
			throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getType() {
		return ProjectConfig.resultDetail;
	}

}
