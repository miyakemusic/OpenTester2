package org.opentester.project;

import java.util.List;
import java.util.Map;

import org.opentester.project.dto.CriteriaTemplateDto;
import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.RawDataDto;
import org.opentester.project.dto.SubRoleDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestItemTemplateDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TestProcedureDto;
import org.opentester.project.dto.TestResultDto;
import org.opentester.project.dto.TesterDto;
import org.opentester.project.dto.TesterSupplierDto;
import org.opentester.project.dto.TesterTemplateDto;
import org.opentester.project.entity.CriteriaTemplateEntity;
import org.opentester.project.entity.DutEntity;
import org.opentester.project.entity.DutPackageEntity;
import org.opentester.project.entity.PassFailCalculator;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.entity.RawDataEntity;
import org.opentester.project.entity.SubRoleEntity;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.TestItemTemplateEntity;
import org.opentester.project.entity.TestPointEntity;
import org.opentester.project.entity.TestProcedureEntity;
import org.opentester.project.entity.TestResultEntity;
import org.opentester.project.entity.TesterEntity;
import org.opentester.project.entity.TesterSupplierEntity;
import org.opentester.project.entity.TesterTemplateEntity;
import org.opentester.project.entity.mapper.CriteriaTemplateMapper;
import org.opentester.project.entity.mapper.DutMapper;
import org.opentester.project.entity.mapper.DutPackageMapper;
import org.opentester.project.entity.mapper.ProjectMapper;
import org.opentester.project.entity.mapper.ProjectUserMapper;
import org.opentester.project.entity.mapper.RawDataMapper;
import org.opentester.project.entity.mapper.SubRoleMapper;
import org.opentester.project.entity.mapper.TestItemMapper;
import org.opentester.project.entity.mapper.TestItemTemplateMapper;
import org.opentester.project.entity.mapper.TestPointMapper;
import org.opentester.project.entity.mapper.TestProcedureMapper;
import org.opentester.project.entity.mapper.TestResultMapper;
import org.opentester.project.entity.mapper.TesterMapper;
import org.opentester.project.entity.mapper.TesterSupplierMapper;
import org.opentester.project.entity.mapper.TesterTemplateMapper;
import org.opentester.project.entityresource.CommonEntityResource;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.opentester.project.repository.RawDataRepository;
import org.opentester.project.repository.SubRoleRepository;
import org.opentester.project.repository.TestItemRepository;
import org.opentester.project.repository.TestItemTemplateRepository;
import org.opentester.project.repository.TestPointRepository;
import org.opentester.project.repository.TestProcedureRepository;
import org.opentester.project.repository.TestResultRepository;
import org.opentester.project.repository.TesterRepository;
import org.opentester.project.repository.TesterSupplierRepository;
import org.opentester.project.repository.TesterTemplateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ProjectConfig {

	public static final String baseURL = "/api/project/admin/";
	public static final String tableURL = "/admin/fragment_project_common/";
	public static final String summaryURL = "/admin/fragment_project_node/";
	
	public static final String project = "project";
	public static final String supplier = "supplier";
	public static final String testItemTemplate = "testItemTemplate";
	public static final String testerTemplate = "testerTemplate";
	public static final String tester = "tester";
	public static final String user = "user";
	public static final String subRole = "subRole";
	public static final String dutPackage = "dutPackage";
	public static final String testPoint = "testPoint";
	public static final String dut = "dut";
	public static final String testItem = "testItem";
	public static final String result = "result";
	public static final String rawData = "rawData";
	public static final String criteriaTemplate = "criteriaTemplate";
	public static final String resultPackage = "resultPackage";
	public static final String resultDetail = "resultDetail";
	public static final String procedure = "procedure";
	

	
	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private ProjectMapper projectMapper;
	
	@Autowired
	private DutPackageRepository dutPackageResitory;
	
	@Autowired
	private DutPackageMapper dutPackageMapper;

	@Autowired
	private DutRepository dutRepository;
	
	@Autowired
	private DutMapper dutMapper;
	
	@Autowired
	private TestPointRepository testPointReposiroty;
	
	@Autowired
	private TestPointMapper testPointMapper;
	
	@Autowired
	private TestItemRepository testItemRepository;
	
	@Autowired
	private TestItemMapper testItemMapper;
	
	@Autowired
	private TestResultRepository testResultRepository;
	
	@Autowired
	private TestResultMapper testResultMapper;
	
	@Autowired
	private RawDataRepository rawDataRepository;
	
	@Autowired
	private RawDataMapper rawDataMapper;
	
	@Autowired
	private CriteriaTemplateRepository criteriaTemplateRepository;
	
	@Autowired
	private CriteriaTemplateMapper criteriaTemplateMapper;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectUserMapper projectUserMapper;
	
	@Autowired
	private SubRoleRepository subRoleRepository;
	
	@Autowired
	private SubRoleMapper subRoleMapper;
	
	@Autowired
	private TesterRepository testerRepository;
	
	@Autowired
	private TesterMapper testerMapper;
	
	@Autowired
	private TesterSupplierRepository testerSupplierRepository;
	
	@Autowired
	private TesterSupplierMapper testerSupplierMapper;
	
	@Autowired
	private TesterTemplateRepository testerTemplateRepository;
	
	@Autowired
	private TesterTemplateMapper testerTemplateMapper;
	
	@Autowired
	private TestItemTemplateRepository testItemTemplateRepository;
	
	@Autowired
	private TestItemTemplateMapper testItemTemplateMapper;
	
	@Autowired
	private TestProcedureRepository testProcedureRepository;
	
	@Autowired
	private TestProcedureMapper testProcedureMapper;
	
	
	@Bean
	public TypeResourceManager typeResourceManager() {
		return new TypeResourceManager() {

			@Override
			void createMap(Map<String, TypeResource> map) {
				map.put(project, new TypeResource(projectRepository, projectMapper, ProjectEntity.class));
				map.put(dutPackage, new TypeResource(dutPackageResitory, dutPackageMapper, DutPackageEntity.class));
				map.put(dut, new TypeResource(dutRepository, dutMapper, DutEntity.class));
				map.put(testPoint, new TypeResource(testPointReposiroty, testPointMapper, TestPointEntity.class));
				map.put(testItem, new TypeResource(testItemRepository, testItemMapper, TestItemEntity.class));
				map.put(result, new TypeResource(testResultRepository, testResultMapper, TestResultEntity.class));
				map.put(rawData, new TypeResource(rawDataRepository, rawDataMapper, RawDataEntity.class));
				
				map.put(criteriaTemplate, new TypeResource(criteriaTemplateRepository, criteriaTemplateMapper, CriteriaTemplateEntity.class));
				map.put(user, new TypeResource(projectUserRepository, projectUserMapper, ProjectUserEntity.class));
				map.put(subRole, new TypeResource(subRoleRepository, subRoleMapper, SubRoleEntity.class));
				map.put(tester, new TypeResource(testerRepository, testerMapper, TesterEntity.class));
				map.put(supplier, new TypeResource(testerSupplierRepository, testerSupplierMapper, TesterSupplierEntity.class));
				map.put(testerTemplate, new TypeResource(testerTemplateRepository, testerTemplateMapper, TesterTemplateEntity.class));
				map.put(testItemTemplate, new TypeResource(testItemTemplateRepository, testItemTemplateMapper, TestItemTemplateEntity.class));
//				map.put(procedure, new TypeResource(testProcedureRepository, testProcedureMapper, TestProcedureEntity.class));

			}

			@Override
			void createLink(List<String> link) {
				link.add(project);
				link.add(dutPackage);
				link.add(dut);
				link.add(testPoint);
				link.add(testItem);
				link.add(result);
				link.add(rawData);
			}
			
		};
	}
	
	@Bean
	public CommonEntityResource<ProjectEntity> projectEntiryResource() {
		return new CommonEntityResource(ProjectConfig.project, ProjectDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<DutPackageEntity> dutPackageEntiryResource() {
		return new CommonEntityResource(ProjectConfig.dutPackage, DutPackageDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<DutEntity> dutEntiryResource() {
		return new CommonEntityResource(ProjectConfig.dut, DutDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TestPointEntity> testPointEntiryResource() {
		return new CommonEntityResource(ProjectConfig.testPoint, TestPointDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TestItemEntity> testItemEntiryResource() {
		return new CommonEntityResource(ProjectConfig.testItem, TestItemDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TestResultEntity> testResultEntiryResource() {
		return new CommonEntityResource(ProjectConfig.result, TestResultDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<RawDataEntity> rawDataEntiryResource() {
		return new CommonEntityResource(ProjectConfig.rawData, RawDataDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<CriteriaTemplateEntity> criteriaTemplateEntiryResource() {
		return new CommonEntityResource(ProjectConfig.criteriaTemplate, CriteriaTemplateDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<ProjectUserEntity> projectUserEntiryResource() {
		return new CommonEntityResource(ProjectConfig.user, ProjectUserDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<SubRoleEntity> subRoleEntiryResource() {
		return new CommonEntityResource(ProjectConfig.subRole, SubRoleDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TesterEntity> testerEntiryResource() {
		return new CommonEntityResource(ProjectConfig.tester, TesterDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TesterSupplierEntity> supplierEntiryResource() {
		return new CommonEntityResource(ProjectConfig.supplier, TesterSupplierDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TesterTemplateEntity> testerTemplateEntiryResource() {
		return new CommonEntityResource(ProjectConfig.testerTemplate, TesterTemplateDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TestItemTemplateEntity> testItemTemplateEntiryResource() {
		return new CommonEntityResource(ProjectConfig.testItemTemplate, TestItemTemplateDto.builder().build());
	}
	
	@Bean
	public CommonEntityResource<TestProcedureEntity> testItemProcedureResource() {
		return new CommonEntityResource(ProjectConfig.procedure, TestProcedureDto.builder().build());
	}
	
	@Bean
	public ResultDetailEntityResource resultDetailEntityResource() {
		return new ResultDetailEntityResource();
	}
	@Bean
	public PassFailCalculator passFailCalculator() {
		return new PassFailCalculator();
	}
	
	@Bean
	public ProjectTreeGenerator projectTreeGenerator() {
		return new ProjectTreeGenerator();
	}
	
	@Bean 
	public HierarchyButtonGenerator hierarchyButtonGenerator() {
		return new HierarchyButtonGenerator();
	}
}

