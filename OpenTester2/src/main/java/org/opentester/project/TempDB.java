package org.opentester.project;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;

import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.entity.Dut;
import org.opentester.project.entity.DutPackage;
import org.opentester.project.entity.Project;
import org.opentester.project.entity.ProjectCriteriaTemplate;
import org.opentester.project.entity.ProjectTestItemTemplate;
import org.opentester.project.entity.ProjectTester;
import org.opentester.project.entity.ProjectTesterTemplate;
import org.opentester.project.entity.ProjectUser;
import org.opentester.project.entity.RawData;
import org.opentester.project.entity.TestItem;
import org.opentester.project.entity.TestPoint;
import org.opentester.project.entity.TestResult;
import org.opentester.project.entity.TesterHistory;
import org.opentester.project.entity.TesterSupplier;

public class TempDB {

	private List<Project> projects = null;
	private List<RawData> rawData = null;
	private Map<Integer, ProjectTesterTemplate> testerTemplates = new HashMap<>();
	private Map<Integer, ProjectTestItemTemplate> testItemTemplates = new HashMap<>();
	private Map<Integer, ProjectCriteriaTemplate> criteriaTemplate = new HashMap<>();
	private Map<Integer, ProjectUser> users = new HashMap<>();
	private Map<Integer, ProjectTester> testers = new HashMap<>();
	private Map<Integer, TesterSupplier> testerSuppliers = new HashMap<>(); 

	public List<DutPackage> getDutPackages(int id) {
		return project(id).getDutPackages();
	}

	private TempDB() {
		try {
			rawData = new ArrayList<>();	
			projects = new ArrayList<>();
			
			addDbUser(ProjectUser.builder().username("dr.dre@aftermath.com").fullName("Andre Young").team("TEAM#999").role(Arrays.asList("Leader", "Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("icecube@aftermath.com").fullName("Calvin Cordozar Broadus, Jr.").team("TEAM#999").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("eminem@aftermath.com").fullName("Marshal Mathers").team("TEAM#999").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("snoopdogg@aftermath.com").fullName("O'Shea Jackson").team("TEAM#999").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("tupac@aftermath.com").fullName("Tupac Amaru Shakur").team("TEAM#999").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());

			addDbUser(ProjectUser.builder().username("puffy@badboy.com").fullName("Sean John Combs").team("TEAM#001").role(Arrays.asList("Leader", "Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("biggie@badboy.com").fullName("Christopher George Latore Wallace").team("TEAM#001").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("faithevans@badboy.com").fullName("Faith Ren√©e Evans").team("TEAM#001").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("rickross@badboy.com").fullName("William Leonard Roberts").team("TEAM#001").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			addDbUser(ProjectUser.builder().username("frenchmontana@badboy.com").fullName("Karim Kharbouch ").team("TEAM#001").role(Arrays.asList("Technician")).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			
			ProjectTestItemTemplate testItemTemplateFiberTotalLength = ProjectTestItemTemplate.builder().id(0).target("FIBER.TOTAL_LENGTH").name("Total Length of Fiber").unit("km").build();
			ProjectTestItemTemplate testItemTemplateFiberTotalLoss = ProjectTestItemTemplate.builder().id(1).target("FIBER.TOTAL_LOSS").name("Total Loss of fiber").unit("dB").build();
			ProjectTestItemTemplate testItemTemplateFiberMacrobendCount = ProjectTestItemTemplate.builder().id(2).target("FIBER.MACROBEND_COUNT").name("Total Macrobend Count").unit("").build();
			ProjectTestItemTemplate testItemTemplateFiberORL = ProjectTestItemTemplate.builder().id(3).target("FIBER.ORL").name("Total Optical Return Loss").unit("dB").build();
			ProjectTestItemTemplate testItemTemplateFiberSpliceLoss = ProjectTestItemTemplate.builder().id(4).target("FIBER.SPLICELOSS").name("Splice Loss").unit("dB").build();
			ProjectTestItemTemplate testItemTemplateFiberConnectionLoss = ProjectTestItemTemplate.builder().id(5).target("FIBER.CONNECTIONLOSS").name("Connection Loss").unit("dB").build();
			ProjectTestItemTemplate testItemTemplateFiberReflection = ProjectTestItemTemplate.builder().id(6).target("FIBER.REFLECTION").name("Reflection").unit("dB").build();
			ProjectTestItemTemplate testItemTemplateFiberEndfaceScratchCount = ProjectTestItemTemplate.builder().id(10).target("FIBER.ENDFACE.SCRATCH_COUNT").name("Scratch Count of Fiber End-Face").unit("").build();
			ProjectTestItemTemplate testItemTemplateFiberEndfaceDefectCount = ProjectTestItemTemplate.builder().id(11).target("FIBER.ENDFACE.DEFECT_COUNT").name("Defect Count of Fiber End-Face").unit("").build();
			ProjectTestItemTemplate testItemTemplateRxPower = ProjectTestItemTemplate.builder().id(20).target("RX.POWER").name("Received Optical Power").unit("dBm").build();
			
			ProjectCriteriaTemplate criteriaTemplateFiberTotalLength = ProjectCriteriaTemplate.builder().id(0).testItemTemplate(testItemTemplateFiberTotalLength).criteriaFormula("(20.00 <= x) && (x <= 20.01)").build();
			ProjectCriteriaTemplate criteriaTemplateFiberTotalLoss = ProjectCriteriaTemplate.builder().id(1).testItemTemplate(testItemTemplateFiberTotalLoss).criteriaFormula("x <= 10.00").build();
			ProjectCriteriaTemplate criteriaTemplateFiberMacrobendCount = ProjectCriteriaTemplate.builder().id(2).testItemTemplate(testItemTemplateFiberMacrobendCount).criteriaFormula("x == 0").build();
			ProjectCriteriaTemplate criteriaTemplateFiberORL = ProjectCriteriaTemplate.builder().id(3).testItemTemplate(testItemTemplateFiberORL).criteriaFormula("x > 50").build();
			ProjectCriteriaTemplate criteriaTemplateFiberSpliceLoss = ProjectCriteriaTemplate.builder().id(4).testItemTemplate(testItemTemplateFiberSpliceLoss).criteriaFormula("x< = 0.3").build();
			ProjectCriteriaTemplate criteriaTemplateFiberConnectionLoss = ProjectCriteriaTemplate.builder().id(5).testItemTemplate(testItemTemplateFiberConnectionLoss).criteriaFormula("x <= 0.5").build();
			ProjectCriteriaTemplate criteriaTemplateFiberReflection = ProjectCriteriaTemplate.builder().id(6).testItemTemplate(testItemTemplateFiberReflection).criteriaFormula("x <= -50").build();
			ProjectCriteriaTemplate criteriaTemplateFiberEndfaceScratchCount = ProjectCriteriaTemplate.builder().id(7).testItemTemplate(testItemTemplateFiberEndfaceScratchCount).criteriaFormula("x == 0").build();
			ProjectCriteriaTemplate criteriaTemplateFiberEndfaceDefectCount = ProjectCriteriaTemplate.builder().id(8).testItemTemplate(testItemTemplateFiberEndfaceDefectCount).criteriaFormula("x == 0").build();
			ProjectCriteriaTemplate criteriaTemplateRxPower = ProjectCriteriaTemplate.builder().id(9).testItemTemplate(testItemTemplateRxPower).criteriaFormula("x >= -40").build();
			 
			addDbItemTemplate(testItemTemplateFiberTotalLength);
			addDbItemTemplate(testItemTemplateFiberTotalLoss);
			addDbItemTemplate(testItemTemplateFiberMacrobendCount);
			addDbItemTemplate(testItemTemplateFiberORL);
			addDbItemTemplate(testItemTemplateFiberSpliceLoss);
			addDbItemTemplate(testItemTemplateFiberConnectionLoss);
			addDbItemTemplate(testItemTemplateFiberReflection);
			addDbItemTemplate(testItemTemplateFiberEndfaceScratchCount);
			addDbItemTemplate(testItemTemplateFiberEndfaceDefectCount);
			addDbItemTemplate(testItemTemplateRxPower);
			
			addDbCriteriaTemplate(criteriaTemplateFiberTotalLength);
			addDbCriteriaTemplate(criteriaTemplateFiberTotalLoss);
			addDbCriteriaTemplate(criteriaTemplateFiberMacrobendCount);
			addDbCriteriaTemplate(criteriaTemplateFiberORL);
			addDbCriteriaTemplate(criteriaTemplateFiberSpliceLoss);
			addDbCriteriaTemplate(criteriaTemplateFiberConnectionLoss);
			addDbCriteriaTemplate(criteriaTemplateFiberReflection);
			addDbCriteriaTemplate(criteriaTemplateFiberEndfaceScratchCount);
			addDbCriteriaTemplate(criteriaTemplateFiberEndfaceDefectCount);
			addDbCriteriaTemplate(criteriaTemplateRxPower);

			List<ProjectTestItemTemplate> otdr =  Arrays.asList(
					testItemTemplateFiberTotalLength, 
					testItemTemplateFiberTotalLoss, 
					testItemTemplateFiberMacrobendCount, 
					testItemTemplateFiberORL, 
					testItemTemplateFiberSpliceLoss, 
					testItemTemplateFiberConnectionLoss, 
					testItemTemplateFiberReflection, 
					testItemTemplateRxPower);
			List<ProjectTestItemTemplate> fip =  Arrays.asList(
					testItemTemplateFiberEndfaceScratchCount, 
					testItemTemplateFiberEndfaceDefectCount
					);		
			
			
			TesterSupplier anritsu = TesterSupplier.builder().name("Anristu").build();
			TesterSupplier exfo = TesterSupplier.builder().name("EXFO").build();
			TesterSupplier viavi = TesterSupplier.builder().name("Viavi").build();
			
			addTestSupplier(anritsu);
			addTestSupplier(exfo);
			addTestSupplier(viavi);
			
			ProjectTesterTemplate mt9085a053_template = ProjectTesterTemplate.builder().id(0).model("MT9085A-053").supplier(anritsu)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplate maxTester715D_template = ProjectTesterTemplate.builder().id(1).model("MaxTester 715D").supplier(exfo)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplate maxTester730D_template = ProjectTesterTemplate.builder().id(2).model("MaxTester 730D").supplier(exfo)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplate smartOTDR_template = ProjectTesterTemplate.builder().id(3).model("SmartOTDR 100AS").supplier(viavi)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplate fip500_template = ProjectTesterTemplate.builder().id(4).model("FIP 500").supplier(exfo)
					.keyword("FIP")
					.testItemTemplates(fip).build();
			
			addTesterTemplate(mt9085a053_template);
			addTesterTemplate(maxTester715D_template);
			addTesterTemplate(maxTester730D_template);
			addTesterTemplate(smartOTDR_template);
			addTesterTemplate(fip500_template);
			
			TesterHistory historyPurchase = TesterHistory.builder().id(0).type("PURCHASED").date(new Date()).build();
			TesterHistory historyRepair = TesterHistory.builder().id(1).type("REPAIRED").date(new Date()).build();
			
					
			for (int i= 0; i < 10; i++) {
				ProjectTester mt9085a053 = ProjectTester.builder().serialNumber("SN"+mt9085a053_template.hashCode() + i).history(Arrays.asList(historyPurchase)).testerTemplate(mt9085a053_template)
						.status("In Use").currentUser(randomUser())
						.reservedFrom(new Date())
						.reservedTo(new Date())
						.build();
				ProjectTester maxTester715D = ProjectTester.builder().serialNumber("SN"+maxTester715D_template.hashCode() + i).history(Arrays.asList(historyPurchase, historyRepair)).testerTemplate(maxTester715D_template)
						.status("Under Repair").build();
				ProjectTester maxTester730D = ProjectTester.builder().serialNumber("SN" + maxTester730D_template.hashCode()+ i).history(Arrays.asList(historyPurchase, historyRepair)).testerTemplate(maxTester730D_template)
						.status("In Use").currentUser(randomUser())
						.reservedFrom(new Date())
						.reservedTo(new Date())
						.build();
				ProjectTester smartOTDR = ProjectTester.builder().serialNumber("SN" + smartOTDR_template.hashCode() + i).history(Arrays.asList(historyPurchase)).testerTemplate(smartOTDR_template)
						.status("Available").build();
				ProjectTester fip500 = ProjectTester.builder().serialNumber("SN" + fip500_template.hashCode()+ i).history(Arrays.asList(historyPurchase)).testerTemplate(fip500_template)
						.reservedFrom(new Date())
						.reservedTo(new Date())						
						.status("In Use").currentUser(randomUser()).build();
				
				addDbTester(mt9085a053);
				addDbTester(maxTester715D);
				addDbTester(maxTester730D);
				addDbTester(smartOTDR);
				addDbTester(fip500);
			}
			
			List<DutPackage> cables = new ArrayList<>();
			for (int cableid = 0; cableid < 8; cableid++) {
				List<Dut> duts = new ArrayList<>();
				DutPackage cable = DutPackage.builder().id(cableid).name("CABLEID00" + String.valueOf(cableid)).build();
				for (int fiberid = 0; fiberid < 8; fiberid++) {
					TestPoint testPointMarunouchi = createTestPoint("MARUNOUCHI", "PORT#0");
					TestPoint testPointMachida = createTestPoint("MACHIDA", "PORT#1");
					
					Dut fiber = Dut.builder().id(fiberid + cableid*8).dutName("FIBER#00" + String.valueOf(fiberid)).testPoints(
							Arrays.asList(testPointMarunouchi, testPointMachida)).build();
					duts.add(fiber);
				}
				cable.setDuts(duts);
				cables.add(cable);
			}

			Project projectConstruction = Project.builder().id(0).projectName("DCI Construction@MARUNOURI-MACCHIDA").
					type("CONSTRUCTION")
	//				.startDueDate(new Date()). startDate(new Date()).completeDueDate(new Date()).completeDate(new Date())
					.dutPackages(cables)
					.build();
			
			Project projectConstruction2 = Project.builder().id(1).projectName("FTTH@ATSUGI")
					.type("CONSTRUCTION")//.location("Shinbashi, Shinjuku, Yokohama")
	//				.startDueDate(new Date()).completeDueDate(new Date())
					.dutPackages(cables)
					.build();			
			
			Project projectRepair = Project.builder().id(2).projectName("UENO_SHIBUYA")
					.type("REPAIR")//.location("Ueno, Shibuya")
					.dutPackages(cables)
					.build();	
			
			projects.add(projectConstruction);
			projects.add(projectConstruction2);
			projects.add(projectRepair);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void addTestSupplier(TesterSupplier supplier) {
		int id = testerSuppliers.size();
		this.testerSuppliers .put(id, supplier);
	}

	private void addTesterTemplate(ProjectTesterTemplate testerTemplate) {
		int id = this.testerTemplates.size();
		this.testerTemplates.put(id, testerTemplate);
	}

	private ProjectUser randomUser() {
		int index = new Random().nextInt(users.size());
		return users.get(index);
	}
	
	private void addDbTester(ProjectTester tester) {
		int id = this.testers.size();
		tester.setId(id);
		this.testers.put(id, tester);
	}

	private void addDbUser(ProjectUser user) {
		int id = this.users.size();
		user.setId(id);
		this.users.put(id, user);
	}

	private void addDbCriteriaTemplate(ProjectCriteriaTemplate criteria) {
		int id = this.criteriaTemplate.size();
		criteria.setId(id);
		this.criteriaTemplate.put(id, criteria);
	}

	private void addDbItemTemplate(ProjectTestItemTemplate template) {
		int id = this.testItemTemplates.size();
		template.setId(id);
		this.testItemTemplates.put(id, template);
	}

	private int testItemId = 0;
	private int testPointId = 0;
	private TestPoint createTestPoint(String location, String port) {
		Calendar calendar = Calendar.getInstance();
		calendar.set(2023, 11, 15);
		Date dueDate1215 = calendar.getTime();
		
		calendar.set(2023, 11, 30);
		Date dueDate1230 = calendar.getTime();
		
		int otdr = this.rawDataOtdr();
		int fip = this.rawDataFip();
		
		List<TestItem> testItemsMarunouchi = Arrays.asList(
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(0)).operator(randomUser())
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(1)).operator(users.get(1))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(2)).operator(users.get(2))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(3)).operator(users.get(3))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(4)).operator(randomUser())
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(5)).operator(users.get(1))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(6)).operator(users.get(1))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(7)).operator(users.get(1))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(8)).operator(users.get(1))
					.completeDueDate(dueDate1215)
					.build().calculate()
				);
		TestPoint testPoint = TestPoint.builder().id(testPointId++).name(port).location(location).testItems(testItemsMarunouchi).build();
		return testPoint;
	}

	private int rawDataFip() {
		try {
			RawData fip = RawData.builder().id(rawDataId++)
					.name("VIP.vipi")
					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png")))
					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png"))).build();
			this.rawData.add(fip);
			return fip.getId();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	private int rawDataId = 0;
	private int rawDataOtdr() {
		try {
			RawData otdr = RawData.builder().id(rawDataId++)
					.name("otdr.sor")
					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG")))
					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"))).build();
			this.rawData.add(otdr);
			return otdr.getId();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	private static TempDB instance = null;
	public static TempDB instance() {
		if (instance == null) {
			instance = new TempDB();

		}
		return instance;
	}
	public Project project(Integer id) {
		for (Project project : projects) {
			if (project.getId() == id) {
				return project;
			}
		}
		return null;
	}

	public Project projectByDutPackage(Integer folderid) {
		for (Project project : projects) {
			for (DutPackage dutPackage : project.getDutPackages()) {
				if (dutPackage.getId() == folderid) {
					return project;
				}
				for (Dut dut : dutPackage.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackage(Integer packageid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				if (folder.getId() == packageid) {
					return folder;
				}
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByDut(Integer dutid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return project;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackageByDut(Integer dutid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return folder;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return project;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackageByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return folder;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dutByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return dut;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public TestPoint testPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return testPoint;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dut(Integer dutid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return dut;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return project;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackageByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return folder;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dutByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return dut;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public TestPoint testPointByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return testPoint;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public TestItem testItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return testItem;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public void addRawData(RawData fip) {
		fip.setId(rawData.size()+1);
		rawData.add(fip);
	}

	public RawData rawData(int id) {
		for (RawData d : rawData) {
			if (d.getId() == id) {
				return d;
			}
		}
		return null;
	}

	public List<Project> projects() {
		return this.projects;
	}

	public Set<TestItem> relatedTestItemsByRawData(int rawData2) {
		Set<TestItem> ret = new HashSet<>();
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getResultHistory() == null) {
								continue;
							}
							for (TestResult result : testItem.getResultHistory()) {
								if (result.getRawData() != null && result.getRawData().getId() == rawData2) {
									ret.add(testItem);
								}
							}
						}
					}
				}
			}
		}
		return ret;
	}

	public ProjectUser user(int operator) {
		return this.users.get(operator);
	}

	public int rawDataId() {
		return this.rawData.size() + 1;
	}

	public ProjectTester tester(int tester) {
		return this.testers.get(tester);
	}

	public List<DutPackage> dutPackageByProject(Integer id) {
		return this.project(id).getDutPackages();
	}

	public List<ProjectUser> users() {
		return new ArrayList<ProjectUser>( this.users.values() );
	}

	public List<ProjectTester> testers() {
		return this.testers.values().stream().sorted(new Comparator<ProjectTester>() {

			@Override
			public int compare(ProjectTester o1, ProjectTester o2) {
				return (o1.getTesterTemplate().getModel() + o1.getSerialNumber()).compareTo(o2.getTesterTemplate().getModel() + o2.getSerialNumber());
			}
			
		}).collect(Collectors.toList());
//		return new ArrayList<ProjectTester>();
	}

	public List<ProjectTesterTemplate> testerTemplates() {
		return this.testerTemplates.values().stream().collect(Collectors.toList());
	}

	public List<ProjectTestItemTemplate> testItemTemplates() {
		return testItemTemplates.values().stream().sorted((t1,t2)-> t1.getTarget().compareTo(t2.getTarget())).collect(Collectors.toList());
	}

	public ProjectTestItemTemplate testItemTemplate(Integer id) {
		return this.testItemTemplates.get(id);
	}

	public ProjectTesterTemplate testerTemplate(Integer id) {
		return this.testerTemplates.get(id);
	}

//	public List<TestItemDto> getTestItemsByProjct(Integer id) {
//		Set<TestItem> ret = new HashSet<>();
//		for (Project project : projects) {
//			if (project.getId()	== id) {
//				continue;
//			}
//			 
//			for (DutPackage folder : project.getDutPackages()) {
//				for (Dut dut : folder.getDuts()) {
//					for (TestPoint testPoint : dut.getTestPoints()) {
//						for (TestItem testItem : testPoint.getTestItems()) {
//							if (testItem.getResultHistory() == null) {
//								continue;
//							}
//							for (TestResult result : testItem.getResultHistory()) {
//								if (result.getRawData() != null && result.getRawData().getId() == rawData2) {
//									ret.add(testItem);
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		return ret;
//	}

}
