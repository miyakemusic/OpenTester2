package org.opentester.project;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;

import org.opentester.instrument.TestItemEntity;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.entity.ProjectDutEntity;
import org.opentester.project.entity.ProjectDutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectCriteriaTemplateEntity;
import org.opentester.project.entity.ProjectSubRoleEntity;
import org.opentester.project.entity.ProjectTestItemTemplateEntity;
import org.opentester.project.entity.ProjectTesterEntity;
import org.opentester.project.entity.ProjectTesterTemplateEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.entity.ProjectRawDataEntity;
import org.opentester.project.entity.ProjectTestItemEntity;
import org.opentester.project.entity.ProjectTestPointEntity;
import org.opentester.project.entity.ProjectTestResultEntity;
import org.opentester.project.entity.ProjectTesterHistoryEntity;
import org.opentester.project.entity.ProjectTesterSupplierEntity;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectTesterHistoryRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.repository.CrudRepository;

@Configuration
public class TempDB {

//	private List<ProjectEntity> projects = null;
	private List<ProjectRawDataEntity> rawData = null;
//	private Map<Integer, ProjectTesterTemplateEntity> testerTemplates = new HashMap<>();
//	private Map<Integer, ProjectTestItemTemplateEntity> testItemTemplates = new HashMap<>();
////	private Map<Integer, ProjectCriteriaTemplateEntity> criteriaTemplate = new HashMap<>();
//	private Map<Long, ProjectUserEntity> users = new HashMap<>();
//	private Map<Integer, ProjectTesterEntity> testers = new HashMap<>();
//	private Map<Integer, TesterSupplierEntity> testerSuppliers = new HashMap<>(); 
//	private Map<Integer, ProjectSubRoleEntity> roles = new HashMap<>();
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	 
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private ProjectTesterHistoryRepository projectTesterHistoryRepository;
	
	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Autowired
	private ProjectTestPointRepository projectTestPointRepository;

	@Autowired
	private DutPackageRepository dutPackageRepository;

	@Autowired
	private DutRepository dutRepository;

	@Autowired
	private ProjectRepository projectRepository;
	
//	public List<DutPackageEntity> getDutPackages(int id) {
//		return project(id).getDutPackages();
//	}

	public void createInitDB() {
		try {
			rawData = new ArrayList<>();	
//			projects = new ArrayList<>();
			
			ProjectSubRoleEntity leader = ProjectSubRoleEntity.builder().name("Leader").build();
			ProjectSubRoleEntity technician = ProjectSubRoleEntity.builder().name("Technician").build();
			ProjectSubRoleEntity designer = ProjectSubRoleEntity.builder().name("Test Designer").build();
			
			projectSubRoleRepository.save(leader);
			projectSubRoleRepository.save(technician);
			projectSubRoleRepository.save(designer);
			
			projectUserRepository.save(ProjectUserEntity.builder().username("dr.dre@aftermath.com").fullName("Andre Young").team("TEAM#999").subRoles(Arrays.asList(leader, technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("icecube@aftermath.com").fullName("Calvin Cordozar Broadus, Jr.").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("eminem@aftermath.com").fullName("Marshal Mathers").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("snoopdogg@aftermath.com").fullName("O'Shea Jackson").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("tupac@aftermath.com").fullName("Tupac Amaru Shakur").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("puffy@badboy.com").fullName("Sean John Combs").team("TEAM#001").subRoles(Arrays.asList(leader, technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("biggie@badboy.com").fullName("Christopher George Latore Wallace").team("TEAM#001").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("faithevans@badboy.com").fullName("Faith Ren√©e Evans").team("TEAM#001").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("rickross@badboy.com").fullName("William Leonard Roberts").team("TEAM#001").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			projectUserRepository.save(ProjectUserEntity.builder().username("frenchmontana@badboy.com").fullName("Karim Kharbouch ").team("TEAM#001").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
			
			ProjectTestItemTemplateEntity testItemTemplateFiberTotalLength = ProjectTestItemTemplateEntity.builder().testkey("FIBER.TOTAL_LENGTH").description("Total Length of Fiber").unit("km").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberTotalLoss = ProjectTestItemTemplateEntity.builder().testkey("FIBER.TOTAL_LOSS").description("Total Loss of fiber").unit("dB").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberMacrobendCount = ProjectTestItemTemplateEntity.builder().testkey("FIBER.MACROBEND_COUNT").description("Total Macrobend Count").unit("").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberORL = ProjectTestItemTemplateEntity.builder().testkey("FIBER.ORL").description("Total Optical Return Loss").unit("dB").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberSpliceLoss = ProjectTestItemTemplateEntity.builder().testkey("FIBER.SPLICELOSS").description("Splice Loss").unit("dB").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberConnectionLoss = ProjectTestItemTemplateEntity.builder().testkey("FIBER.CONNECTIONLOSS").description("Connection Loss").unit("dB").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberReflection = ProjectTestItemTemplateEntity.builder().testkey("FIBER.REFLECTION").description("Reflection").unit("dB").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberEndfaceScratchCount = ProjectTestItemTemplateEntity.builder().testkey("FIBER.ENDFACE.SCRATCH_COUNT").description("Scratch Count of Fiber End-Face").unit("").build();
			ProjectTestItemTemplateEntity testItemTemplateFiberEndfaceDefectCount = ProjectTestItemTemplateEntity.builder().testkey("FIBER.ENDFACE.DEFECT_COUNT").description("Defect Count of Fiber End-Face").unit("").build();
			ProjectTestItemTemplateEntity testItemTemplateRxPower = ProjectTestItemTemplateEntity.builder().testkey("RX.POWER").description("Received Optical Power").unit("dBm").build();
			
			projectTestItemTemplateRepository.save(testItemTemplateFiberTotalLength);
			projectTestItemTemplateRepository.save(testItemTemplateFiberTotalLoss);
			projectTestItemTemplateRepository.save(testItemTemplateFiberMacrobendCount);
			projectTestItemTemplateRepository.save(testItemTemplateFiberORL);
			projectTestItemTemplateRepository.save(testItemTemplateFiberSpliceLoss);
			projectTestItemTemplateRepository.save(testItemTemplateFiberConnectionLoss);
			projectTestItemTemplateRepository.save(testItemTemplateFiberReflection);
			projectTestItemTemplateRepository.save(testItemTemplateFiberEndfaceScratchCount);
			projectTestItemTemplateRepository.save(testItemTemplateFiberEndfaceDefectCount);
			projectTestItemTemplateRepository.save(testItemTemplateRxPower);
			
			ProjectCriteriaTemplateEntity criteriaTemplateFiberTotalLength = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberTotalLength).criteriaFormula("(20.00 <= x) && (x <= 20.01)").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberTotalLoss = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberTotalLoss).criteriaFormula("x <= 10.00").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberMacrobendCount = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberMacrobendCount).criteriaFormula("x == 0").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberORL = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberORL).criteriaFormula("x > 50").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberSpliceLoss = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberSpliceLoss).criteriaFormula("x< = 0.3").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberConnectionLoss = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberConnectionLoss).criteriaFormula("x <= 0.5").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberReflection = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberReflection).criteriaFormula("x <= -50").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberEndfaceScratchCount = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberEndfaceScratchCount).criteriaFormula("x == 0").build();
			ProjectCriteriaTemplateEntity criteriaTemplateFiberEndfaceDefectCount = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateFiberEndfaceDefectCount).criteriaFormula("x == 0").build();
			ProjectCriteriaTemplateEntity criteriaTemplateRxPower = ProjectCriteriaTemplateEntity.builder().testItemTemplate(testItemTemplateRxPower).criteriaFormula("x >= -40").build();
			 
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberTotalLength);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberTotalLoss);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberMacrobendCount);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberORL);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberSpliceLoss);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberConnectionLoss);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberReflection);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberEndfaceScratchCount);
			projectCriteriaTemplateRepository.save(criteriaTemplateFiberEndfaceDefectCount);
			projectCriteriaTemplateRepository.save(criteriaTemplateRxPower);
			
//			addDbItemTemplate(testItemTemplateFiberTotalLength);
//			addDbItemTemplate(testItemTemplateFiberTotalLoss);
//			addDbItemTemplate(testItemTemplateFiberMacrobendCount);
//			addDbItemTemplate(testItemTemplateFiberORL);
//			addDbItemTemplate(testItemTemplateFiberSpliceLoss);
//			addDbItemTemplate(testItemTemplateFiberConnectionLoss);
//			addDbItemTemplate(testItemTemplateFiberReflection);
//			addDbItemTemplate(testItemTemplateFiberEndfaceScratchCount);
//			addDbItemTemplate(testItemTemplateFiberEndfaceDefectCount);
//			addDbItemTemplate(testItemTemplateRxPower);
//			
//			addDbCriteriaTemplate(criteriaTemplateFiberTotalLength);
//			addDbCriteriaTemplate(criteriaTemplateFiberTotalLoss);
//			addDbCriteriaTemplate(criteriaTemplateFiberMacrobendCount);
//			addDbCriteriaTemplate(criteriaTemplateFiberORL);
//			addDbCriteriaTemplate(criteriaTemplateFiberSpliceLoss);
//			addDbCriteriaTemplate(criteriaTemplateFiberConnectionLoss);
//			addDbCriteriaTemplate(criteriaTemplateFiberReflection);
//			addDbCriteriaTemplate(criteriaTemplateFiberEndfaceScratchCount);
//			addDbCriteriaTemplate(criteriaTemplateFiberEndfaceDefectCount);
//			addDbCriteriaTemplate(criteriaTemplateRxPower);

			List<ProjectTestItemTemplateEntity> otdr =  Arrays.asList(
					testItemTemplateFiberTotalLength, 
					testItemTemplateFiberTotalLoss, 
					testItemTemplateFiberMacrobendCount, 
					testItemTemplateFiberORL, 
					testItemTemplateFiberSpliceLoss, 
					testItemTemplateFiberConnectionLoss, 
					testItemTemplateFiberReflection, 
					testItemTemplateRxPower);
			List<ProjectTestItemTemplateEntity> fip =  Arrays.asList(
					testItemTemplateFiberEndfaceScratchCount, 
					testItemTemplateFiberEndfaceDefectCount
					);		
			
			
			ProjectTesterSupplierEntity anritsu = ProjectTesterSupplierEntity.builder().name("Anristu").build();
			ProjectTesterSupplierEntity exfo = ProjectTesterSupplierEntity.builder().name("EXFO").build();
			ProjectTesterSupplierEntity viavi = ProjectTesterSupplierEntity.builder().name("Viavi").build();
			
			projectTesterSupplierRepository.save(anritsu);
			projectTesterSupplierRepository.save(exfo);
			projectTesterSupplierRepository.save(viavi);

			//			addTestSupplier(anritsu);
//			addTestSupplier(exfo);
//			addTestSupplier(viavi);
			
			ProjectTesterTemplateEntity mt9085a053_template = ProjectTesterTemplateEntity.builder().model("MT9085A-053").supplier(anritsu)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplateEntity maxTester715D_template = ProjectTesterTemplateEntity.builder().model("MaxTester 715D").supplier(exfo)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplateEntity maxTester730D_template = ProjectTesterTemplateEntity.builder().model("MaxTester 730D").supplier(exfo)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplateEntity smartOTDR_template = ProjectTesterTemplateEntity.builder().model("SmartOTDR 100AS").supplier(viavi)
					.keyword("OTDR,OPM")
					.testItemTemplates(otdr).build();
			ProjectTesterTemplateEntity fip500_template = ProjectTesterTemplateEntity.builder().model("FIP 500").supplier(exfo)
					.keyword("FIP")
					.testItemTemplates(fip).build();
			
			projectTesterTemplateRepository.save(mt9085a053_template);
			projectTesterTemplateRepository.save(maxTester715D_template);
			projectTesterTemplateRepository.save(maxTester730D_template);
			projectTesterTemplateRepository.save(smartOTDR_template);
			projectTesterTemplateRepository.save(fip500_template);
			
//			addTesterTemplate(mt9085a053_template);
//			addTesterTemplate(maxTester715D_template);
//			addTesterTemplate(maxTester730D_template);
//			addTesterTemplate(smartOTDR_template);
//			addTesterTemplate(fip500_template);
			
			
			for (int i= 0; i < 10; i++) {
				{
					ProjectTesterHistoryEntity historyPurchase = ProjectTesterHistoryEntity.builder().type("PURCHASED").date(new Date()).build();
					ProjectTesterHistoryEntity historyRepair = ProjectTesterHistoryEntity.builder().type("REPAIRED").date(new Date()).build();
					projectTesterHistoryRepository.save(historyPurchase);
					projectTesterHistoryRepository.save(historyRepair);
	
					ProjectTesterEntity mt9085a053 = ProjectTesterEntity.builder().serialNumber(createSerialNumber())
							.history(Arrays.asList(historyPurchase, historyRepair)).testerTemplate(mt9085a053_template)
							.status("In Use").currentUser(randomUser())
							.reservedFrom(new Date())
							.reservedTo(new Date())
							.build();
					
					projectTesterRepository.save(mt9085a053);
				}
				{
					ProjectTesterHistoryEntity historyPurchase = ProjectTesterHistoryEntity.builder().type("PURCHASED").date(new Date()).build();
					ProjectTesterHistoryEntity historyRepair = ProjectTesterHistoryEntity.builder().type("REPAIRED").date(new Date()).build();
					projectTesterHistoryRepository.save(historyPurchase);
					projectTesterHistoryRepository.save(historyRepair);
					ProjectTesterEntity maxTester715D = ProjectTesterEntity.builder().serialNumber(createSerialNumber())
							.history(Arrays.asList(historyPurchase, historyRepair)).testerTemplate(maxTester715D_template)
							.status("Under Repair").build();
					
					projectTesterRepository.save(maxTester715D);
				}
				
				{
					ProjectTesterHistoryEntity historyPurchase = ProjectTesterHistoryEntity.builder().type("PURCHASED").date(new Date()).build();
					ProjectTesterHistoryEntity historyRepair = ProjectTesterHistoryEntity.builder().type("REPAIRED").date(new Date()).build();
					projectTesterHistoryRepository.save(historyPurchase);
					projectTesterHistoryRepository.save(historyRepair);

					ProjectTesterEntity maxTester730D = ProjectTesterEntity.builder().serialNumber(createSerialNumber())
							.history(Arrays.asList(historyPurchase, historyRepair))
							.testerTemplate(maxTester730D_template)
							.status("In Use").currentUser(randomUser())
							.reservedFrom(new Date())
							.reservedTo(new Date())
							.build();
					
					projectTesterRepository.save(maxTester730D);
				}
				
				{
					ProjectTesterHistoryEntity historyPurchase = ProjectTesterHistoryEntity.builder().type("PURCHASED").date(new Date()).build();
					projectTesterHistoryRepository.save(historyPurchase);
					ProjectTesterEntity smartOTDR = ProjectTesterEntity.builder().serialNumber(createSerialNumber()).history(Arrays.asList(historyPurchase)).testerTemplate(smartOTDR_template)
						.status("Available").build();
					projectTesterRepository.save(smartOTDR);
				}
				
				{
					ProjectTesterHistoryEntity historyPurchase = ProjectTesterHistoryEntity.builder().type("PURCHASED").date(new Date()).build();
					projectTesterHistoryRepository.save(historyPurchase);
					ProjectTesterEntity fip500 = ProjectTesterEntity.builder().serialNumber(createSerialNumber()).history(Arrays.asList(historyPurchase)).testerTemplate(fip500_template)
						.reservedFrom(new Date())
						.reservedTo(new Date())						
						.status("In Use").currentUser(randomUser()).build();
					projectTesterRepository.save(fip500);
				}
				
				
//				addDbTester(mt9085a053);
//				addDbTester(maxTester715D);
//				addDbTester(maxTester730D);
//				addDbTester(smartOTDR);
//				addDbTester(fip500);
			}
			
			List<ProjectDutPackageEntity> cables = new ArrayList<>();
			for (int cableid = 0; cableid < 8; cableid++) {
				List<ProjectDutEntity> duts = new ArrayList<>();
				ProjectDutPackageEntity cable = ProjectDutPackageEntity.builder().name("CABLEID00" + String.valueOf(cableid)).build();
			
				dutPackageRepository.save(cable);
				
				for (int fiberid = 0; fiberid < 8; fiberid++) {
					ProjectTestPointEntity testPointMarunouchi = createTestPoint("MARUNOUCHI", "PORT#0");
					ProjectTestPointEntity testPointMachida = createTestPoint("MACHIDA", "PORT#1");
					
					projectTestPointRepository.save(testPointMarunouchi);
					projectTestPointRepository.save(testPointMachida);
					
					ProjectDutEntity fiber = ProjectDutEntity.builder().dutName("FIBER#00" + String.valueOf(fiberid)).testPoints(
							Arrays.asList(testPointMarunouchi, testPointMachida)).build();
					
					dutRepository.save(fiber);
					
					duts.add(fiber);
				}
				cable.setDuts(duts);
				cables.add(cable);
			}

			ProjectEntity projectConstruction = ProjectEntity.builder().projectName("DCI Construction@MARUNOURI-MACCHIDA").
					type("CONSTRUCTION")
					.dutPackages(cables)
					.build();
			
			projectRepository.save(projectConstruction);
			
			
			ProjectEntity projectConstruction2 = ProjectEntity.builder().projectName("FTTH@ATSUGI")
					.type("CONSTRUCTION")//.location("Shinbashi, Shinjuku, Yokohama")
	//				.startDueDate(new Date()).completeDueDate(new Date())
					.dutPackages(cables)
					.build();			
			
			ProjectEntity projectRepair = ProjectEntity.builder().projectName("UENO_SHIBUYA")
					.type("REPAIR")//.location("Ueno, Shibuya")
					.dutPackages(cables)
					.build();	
			
			projectRepository.save(projectConstruction2);
			projectRepository.save(projectRepair);
			
//			projects.add(projectConstruction);
//			projects.add(projectConstruction2);
//			projects.add(projectRepair);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	private ProjectUserEntity randomUser() {
	    List<ProjectUserEntity> list = this.projectUserRepository.findAll();
		Random rand = new Random();
	    int num = rand.nextInt((int)list.size());
	    
		return list.get(num);
	}

	private ProjectCriteriaTemplateEntity randomCriteriaTemplate() {
	    List<ProjectCriteriaTemplateEntity> list = this.projectCriteriaTemplateRepository.findAll();
		Random rand = new Random();
	    int num = rand.nextInt((int)list.size());
	    
		return list.get(num);
	}
	
	private String createSerialNumber() {
		return "SN" + System.currentTimeMillis();
	}

//	private void addRole(ProjectSubRoleEntity role) {
//		int id = this.roles.size();
//		role.setId((long)id);
//		this.roles.put(id, role);
//	}

//	private void addTestSupplier(TesterSupplierEntity supplier) {
//		int id = testerSuppliers.size();
//		supplier.setId((long)id);
//		this.testerSuppliers .put(id, supplier);
//	}
//
//	private void addTesterTemplate(ProjectTesterTemplateEntity testerTemplate) {
//		int id = this.testerTemplates.size();
//		this.testerTemplates.put(id, testerTemplate);
//	}
//
//	private ProjectUserEntity randomUser() {
//		int index = new Random().nextInt(users.size());
//		return users.get(index);
//	}
//	
//	private void addDbTester(ProjectTesterEntity tester) {
//		int id = this.testers.size();
//		tester.setId(id);
//		this.testers.put(id, tester);
//	}

//	private void addDbUser(ProjectUserEntity user) {
//		Long id = (long)this.users.size();
//		user.setId(id);
//		this.users.put(id, user);
//	}
//
//	private void addDbCriteriaTemplate(ProjectCriteriaTemplateEntity criteria) {
//		int id = this.criteriaTemplate.size();
//		criteria.setId(id);
//		this.criteriaTemplate.put(id, criteria);
//	}
//
//	private void addDbItemTemplate(ProjectTestItemTemplateEntity template) {
//		int id = this.testItemTemplates.size();
//		template.setId((long)id);
//		this.testItemTemplates.put(id, template);
//	}

	private int testItemId = 0;
	private int testPointId = 0;
	private ProjectTestPointEntity createTestPoint(String location, String port
//			, List<ProjectCriteriaTemplateEntity> criteriaTemplate, List<ProjectUserEntity> user
			) {
		
		ProjectTestItemEntity item1 = ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item2 = ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item3 = ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item4 = ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item5 =	ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item6 =	ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item7 =	ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item8 =	ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
		ProjectTestItemEntity item9 =	ProjectTestItemEntity.builder().criteria(randomCriteriaTemplate()).operator(randomUser())
				.completeDueDate(new Date())
				.build().calculate();
				
		List<ProjectTestItemEntity> testItemsMarunouchi = Arrays.asList(item1, item2, item3, item4, item5, item6, item7, item8, item9);
		ProjectTestPointEntity testPoint = ProjectTestPointEntity.builder().name(port).location(location).testItems(testItemsMarunouchi).build();
		return testPoint;
	}

//	private int rawDataFip() {
//		try {
//			RawDataEntity fip = RawDataEntity.builder().id(rawDataId++)
//					.name("VIP.vipi")
//					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png")))
//					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png"))).build();
//			this.rawData.add(fip);
//			return fip.getId();
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return 0;
//	}
//
//	private int rawDataId = 0;
//	private int rawDataOtdr() {
//		try {
//			RawDataEntity otdr = RawDataEntity.builder().id(rawDataId++)
//					.name("otdr.sor")
//					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG")))
//					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"))).build();
//			this.rawData.add(otdr);
//			return otdr.getId();
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return 0;
//	}

//	private static TempDB instance = null;
//	public static TempDB instance() {
//		if (instance == null) {
//			instance = new TempDB();
//
//		}
//		return instance;
//	}
//	public ProjectEntity project(Integer id) {
//		for (ProjectEntity project : projects) {
//			if (project.getId() == id) {
//				return project;
//			}
//		}
//		return null;
//	}

//	public ProjectEntity projectByDutPackage(Integer folderid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity dutPackage : project.getDutPackages()) {
//				if (dutPackage.getId() == folderid) {
//					return project;
//				}
//				for (DutEntity dut : dutPackage.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}

//	public DutPackageEntity dutPackage(Integer packageid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				if (folder.getId() == packageid) {
//					return folder;
//				}
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}

//	public ProjectEntity projectByDut(Integer dutid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					if (dut.getId() == dutid) {
//						return project;
//					}
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public DutPackageEntity dutPackageByDut(Integer dutid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					if (dut.getId() == dutid) {
//						return folder;
//					}
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}

//	public ProjectEntity projectByTestPoint(Integer testpointid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						if (testPoint.getId() == testpointid) {
//							return project;
//						}
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public DutPackageEntity dutPackageByTestPoint(Integer testpointid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						if (testPoint.getId() == testpointid) {
//							return folder;
//						}
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}

//	public DutEntity dutByTestPoint(Integer testpointid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						if (testPoint.getId() == testpointid) {
//							return dut;
//						}
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public ProjectTestPointEntity testPoint(Integer testpointid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						if (testPoint.getId() == testpointid) {
//							return testPoint;
//						}
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public DutEntity dut(Integer dutid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					if (dut.getId() == dutid) {
//						return dut;
//					}
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public ProjectEntity projectByTestItem(Integer testitemid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							if (testItem.getId() == testitemid) {
//								return project;
//							}
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public DutPackageEntity dutPackageByTestItem(Integer testitemid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							if (testItem.getId() == testitemid) {
//								return folder;
//							}
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public DutEntity dutByTestItem(Integer testitemid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							if (testItem.getId() == testitemid) {
//								return dut;
//							}
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public ProjectTestPointEntity testPointByTestItem(Integer testitemid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							if (testItem.getId() == testitemid) {
//								return testPoint;
//							}
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//
//	public TestItemEntity testItem(Integer testitemid) {
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							if (testItem.getId() == testitemid) {
//								return testItem;
//							}
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}

//	public void addRawData(RawDataEntity fip) {
//		fip.setId(rawData.size()+1);
//		rawData.add(fip);
//	}

	public ProjectRawDataEntity rawData(int id) {
		for (ProjectRawDataEntity d : rawData) {
			if (d.getId() == id) {
				return d;
			}
		}
		return null;
	}
//
//	public List<ProjectEntity> projects() {
//		return this.projects;
//	}

//	public Set<TestItemEntity> relatedTestItemsByRawData(int rawData2) {
//		
//		Set<TestItemEntity> ret = new HashSet<>();
//		for (ProjectEntity project : projects) {
//			for (DutPackageEntity folder : project.getDutPackages()) {
//				for (DutEntity dut : folder.getDuts()) {
//					for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//						for (TestItemEntity testItem : testPoint.getTestItems()) {
//							if (testItem.getResultHistory() == null) {
//								continue;
//							}
//							for (TestResult result : testItem.getResultHistory()) {
//								if (result.getRawData() != null && result.getRawData().getId() == rawData2) {
//									ret.add(testItem);
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		return ret;
//	}

//	public ProjectUserEntity user(int operator) {
//		return this.users.get(operator);
//	}

	public int rawDataId() {
		return this.rawData.size() + 1;
	}

	public void createProject() {
		// create new project
		try {
		ProjectEntity savedProject = this.projectRepository.save(
				ProjectEntity.builder()
					.projectName("PROJECT#1")
					.type("CONSTRUCTION")
					.build()
				);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}

//	public ProjectTesterEntity tester(int tester) {
//		return this.testers.get(tester);
//	}
//
//	public List<DutPackageEntity> dutPackageByProject(Integer id) {
//		return this.project(id).getDutPackages();
//	}

//	public List<ProjectUserEntity> users() {
//		return new ArrayList<ProjectUserEntity>( this.users.values() );
//	}
//
//	public List<ProjectTesterEntity> testers() {
//		return this.testers.values().stream().sorted(new Comparator<ProjectTesterEntity>() {
//
//			@Override
//			public int compare(ProjectTesterEntity o1, ProjectTesterEntity o2) {
//				return (o1.getTesterTemplate().getModel() + o1.getSerialNumber()).compareTo(o2.getTesterTemplate().getModel() + o2.getSerialNumber());
//			}
//			
//		}).collect(Collectors.toList());
//	}

//	public List<ProjectTesterTemplateEntity> testerTemplates() {
//		return this.testerTemplates.values().stream().collect(Collectors.toList());
//	}
//
//	public List<ProjectTestItemTemplateEntity> testItemTemplates() {
//		return testItemTemplates.values().stream().sorted((t1,t2)-> t1.getkey().compareTo(t2.getkey())).collect(Collectors.toList());
//	}
//
//	public ProjectTestItemTemplateEntity testItemTemplate(Integer id) {
//		return this.testItemTemplates.get(id);
//	}
//
//	public ProjectTesterTemplateEntity testerTemplate(Integer id) {
//		return this.testerTemplates.get(id);
//	}
//
//	public List<TesterSupplierEntity> testerSuppliers() {
//		return testerSuppliers.values().stream().sorted((a1,a2)->a1.getName().compareTo(a2.getName())).collect(Collectors.toList());
//	}
//	public List<TestItemDto> getTestItemsByProjct(Integer id) {
//		Set<TestItem> ret = new HashSet<>();
//		for (Project project : projects) {
//			if (project.getId()	== id) {
//				continue;
//			}
//			 
//			for (DutPackage folder : project.getDutPackages()) {
//				for (Dut dut : folder.getDuts()) {
//					for (TestPoint testPoint : dut.getTestPoints()) {
//						for (TestItem testItem : testPoint.getTestItems()) {
//							if (testItem.getResultHistory() == null) {
//								continue;
//							}
//							for (TestResult result : testItem.getResultHistory()) {
//								if (result.getRawData() != null && result.getRawData().getId() == rawData2) {
//									ret.add(testItem);
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		return ret;
//	}

//	public List<ProjectSubRoleEntity> roles() {
//		return this.roles.values().stream() 
//				.sorted((a1,a2) -> a1.getName().compareTo(a2.getName()))
//				.collect(Collectors.toList());
//	}

}
