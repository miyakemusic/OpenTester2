package org.opentester.project;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class TempDB {

	private List<Project> projects = null;
	private List<RawData> rawData = null;
	private Map<Integer, ProjectTestItemTemplate> testItemTemplate = new HashMap<>();
	private Map<Integer, ProjectCriteriaTemplate> criteriaTemplate = new HashMap<>();
	private Map<Integer, ProjectUser> users = new HashMap<>();
	private Map<Integer, ProjectTester> testers = new HashMap<>();
	
	public List<DutPackage> getDutPackages(int id) {
		return project(id).getDutPackages();
	}

	private TempDB() {
		try {
			rawData = new ArrayList<>();	
			projects = new ArrayList<>();
			
			ProjectUser andersonPaak = ProjectUser.builder().id(0).username("Anderson Paak").team("MA34").role("Drummer").organization("Aftermath").build();
			ProjectUser andreYoung = ProjectUser.builder().id(1).username("Andre Young").team("MA34").role("Producer/Rapper").organization("Aftermath").build();
			ProjectUser marshalMathers = ProjectUser.builder().id(2).username("Marshal Mathers").team("MA34").role("Rapper").organization("Aftermath").build();
			ProjectUser chrisBrown = ProjectUser.builder().id(3).username("Chris Brown").team("MA34").role("Singer").organization("JIVE").build();
			
			users.put(andersonPaak.getId(), andersonPaak);
			users.put(andreYoung.getId(), andreYoung);
			users.put(marshalMathers.getId(), marshalMathers);
			users.put(chrisBrown.getId(), chrisBrown);
			
			
			ProjectTestItemTemplate testItemTemplateFiberTotalLength = ProjectTestItemTemplate.builder().id(0).target("FIBER.TOTAL_LENGTH").name("Total Length of a Fiber").unit("km").build();
			ProjectTestItemTemplate testItemTemplateFiberTotalLoss = ProjectTestItemTemplate.builder().id(1).target("FIBER.TOTAL_LOSS").name("Total Loss of a Fiber").unit("dB").build();
			ProjectTestItemTemplate testItemTemplateFiberMacrobendCount = ProjectTestItemTemplate.builder().id(2).target("FIBER.MACROBEND_COUNT").name("Total Macrobend Count").unit("").build();
			ProjectTestItemTemplate testItemTemplateFiberEndfaceScratchCount = ProjectTestItemTemplate.builder().id(3).target("FIBER.ENDFACE.SCRATCH_COUNT").name("Scratch Count of Fiber End-Face").unit("").build();
			ProjectTestItemTemplate testItemTemplateFiberEndfaceDefectCount = ProjectTestItemTemplate.builder().id(4).target("FIBER.ENDFACE.DEFECT_COUNT").name("Defect Count of Fiber End-Face").unit("").build();
			ProjectTestItemTemplate testItemTemplateRxPower = ProjectTestItemTemplate.builder().id(5).target("RX.POWER").name("Received Optical Power").unit("dBm").build();
			
			ProjectCriteriaTemplate criteriaTemplateFiberTotalLength = ProjectCriteriaTemplate.builder().id(0).testItemTemplate(testItemTemplateFiberTotalLength).criteriaFormula("(20.00 <= x) && (x <= 20.01)").build();
			ProjectCriteriaTemplate criteriaTemplateFiberTotalLoss = ProjectCriteriaTemplate.builder().id(1).testItemTemplate(testItemTemplateFiberTotalLoss).criteriaFormula("x<=10.00").build();
			ProjectCriteriaTemplate criteriaTemplateFiberMacrobendCount = ProjectCriteriaTemplate.builder().id(2).testItemTemplate(testItemTemplateFiberMacrobendCount).criteriaFormula("x==0").build();
			ProjectCriteriaTemplate criteriaTemplateFiberEndfaceScratchCount = ProjectCriteriaTemplate.builder().id(3).testItemTemplate(testItemTemplateFiberEndfaceScratchCount).criteriaFormula("x==0").build();
			ProjectCriteriaTemplate criteriaTemplateFiberEndfaceDefectCount = ProjectCriteriaTemplate.builder().id(4).testItemTemplate(testItemTemplateFiberEndfaceDefectCount).criteriaFormula("x==0").build();
			ProjectCriteriaTemplate criteriaTemplateRxPower = ProjectCriteriaTemplate.builder().id(5).testItemTemplate(testItemTemplateRxPower).criteriaFormula("x >= -40").build();
			 
			testItemTemplate.put(testItemTemplateFiberTotalLength.getId(), testItemTemplateFiberTotalLength);
			testItemTemplate.put(testItemTemplateFiberTotalLoss.getId(), testItemTemplateFiberTotalLoss);
			testItemTemplate.put(testItemTemplateFiberMacrobendCount.getId(), testItemTemplateFiberMacrobendCount);
			testItemTemplate.put(testItemTemplateFiberEndfaceScratchCount.getId(), testItemTemplateFiberEndfaceScratchCount);
			testItemTemplate.put(testItemTemplateFiberEndfaceDefectCount.getId(), testItemTemplateFiberEndfaceDefectCount);
			testItemTemplate.put(testItemTemplateRxPower.getId(), testItemTemplateRxPower);
			
			criteriaTemplate.put(criteriaTemplateFiberTotalLength.getId(), criteriaTemplateFiberTotalLength);
			criteriaTemplate.put(criteriaTemplateFiberTotalLoss.getId(), criteriaTemplateFiberTotalLoss);
			criteriaTemplate.put(criteriaTemplateFiberMacrobendCount.getId(), criteriaTemplateFiberMacrobendCount);
			criteriaTemplate.put(criteriaTemplateFiberEndfaceScratchCount.getId(), criteriaTemplateFiberEndfaceScratchCount);
			criteriaTemplate.put(criteriaTemplateFiberEndfaceDefectCount.getId(), criteriaTemplateFiberEndfaceDefectCount);
			criteriaTemplate.put(criteriaTemplateRxPower.getId(), criteriaTemplateRxPower);
			
			ProjectTester mt9085a053 = ProjectTester.builder().id(0).model("MT9085A-053").supplier("Anritsu").build();
			ProjectTester maxTester715D = ProjectTester.builder().id(1).model("MaxTester 715D").supplier("EXFO").build();
			ProjectTester maxTester730D = ProjectTester.builder().id(2).model("MaxTester 730D").supplier("EXFO").build();
			ProjectTester smartOTDR = ProjectTester.builder().id(3).model("SmartOTDR 100AS").supplier("Viavi Solutions").build();
			ProjectTester fip500 = ProjectTester.builder().id(4).model("FIP 500").supplier("EXFO").build();
			this.testers.put(mt9085a053.getId(), mt9085a053);
			this.testers.put(maxTester715D.getId(), maxTester715D);
			this.testers.put(maxTester730D.getId(), maxTester730D);
			this.testers.put(smartOTDR.getId(), smartOTDR);
			this.testers.put(fip500.getId(), fip500);
			
			List<DutPackage> cables = new ArrayList<>();
			for (int cableid = 0; cableid < 8; cableid++) {
				List<Dut> duts = new ArrayList<>();
				DutPackage cable = DutPackage.builder().id(cableid).name("CABLEID00" + String.valueOf(cableid)).build();
				for (int fiberid = 0; fiberid < 8; fiberid++) {
					TestPoint testPointMarunouchi = createTestPoint("MARUNOUCHI");
					TestPoint testPointMachida = createTestPoint("MACHIDA");
					
					Dut fiber = Dut.builder().id(fiberid + cableid*8).dutName("FIBER#00" + String.valueOf(fiberid)).testPoints(
							Arrays.asList(testPointMarunouchi, testPointMachida)).build();
					duts.add(fiber);
				}
				cable.setDuts(duts);
				cables.add(cable);
			}

			Project projectConstruction = Project.builder().id(0).projectName("DCI Construction@MARUNOURI-MACCHIDA").
					type("CONSTRUCTION")
					.status("COMPLETED")
	//				.startDueDate(new Date()). startDate(new Date()).completeDueDate(new Date()).completeDate(new Date())
					.dutPackages(cables)
					.build();
			
			Project projectConstruction2 = Project.builder().id(1).projectName("FTTH@ATSUGI")
					.type("CONSTRUCTION")//.location("Shinbashi, Shinjuku, Yokohama")
					.status("ON GOING\n2weeks delayed")
	//				.startDueDate(new Date()).completeDueDate(new Date())
					.dutPackages(cables)
					.build();			
			
			Project projectRepair = Project.builder().id(2).projectName("UENO_SHIBUYA")
					.type("REPAIR")//.location("Ueno, Shibuya")
					.status("UNDER PLANNING")
					.dutPackages(cables)
					.build();	
			
			projects.add(projectConstruction);
			projects.add(projectConstruction2);
			projects.add(projectRepair);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private int testItemId = 0;
	private int testPointId = 0;
	private TestPoint createTestPoint(String location) {
		Calendar calendar = Calendar.getInstance();
		calendar.set(2023, 11, 15);
		Date dueDate1215 = calendar.getTime();
		
		calendar.set(2023, 11, 30);
		Date dueDate1230 = calendar.getTime();
		
		int otdr = this.rawDataOtdr();
		int fip = this.rawDataFip();
		
		List<TestItem> testItemsMarunouchi = Arrays.asList(
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(0)).operator(users.get(0))
//					.resultHistory(Arrays.asList(TestResult.builder().id(0).result("20.001").date(new Date()).operator(users.get(0)).tester("MT9085A-053").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(1)).operator(users.get(1))
//					.resultHistory(Arrays.asList(TestResult.builder().id(1).result("6.5").date(new Date()).operator(users.get(1)).tester("MT9085A-053").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(2)).operator(users.get(2))
//					.resultHistory(Arrays.asList(TestResult.builder().id(2).result("0").date(new Date()).operator(users.get(2)).tester("MT9085A-053").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(3)).operator(users.get(3))
//					.resultHistory(Arrays.asList(TestResult.builder().id(3).result("0").date(new Date()).operator(users.get(3)).tester("MT9085A-053").rawData(fip).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(4)).operator(users.get(0))
//					.resultHistory(Arrays.asList(TestResult.builder().id(4).result("0").date(new Date()).operator(users.get(0)).tester("MT9085A-053").rawData(fip).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(testItemId++).criteria(criteriaTemplate.get(5)).operator(users.get(1))
//					.resultHistory(Arrays.asList(TestResult.builder().id(5).result("-41").date(new Date()).operator(users.get(1)).tester("CMA5").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate()
				);
		TestPoint testPoint = TestPoint.builder().id(testPointId++).name("PORT#0").location(location).testItems(testItemsMarunouchi).build();
		return testPoint;
	}

	private int rawDataFip() {
		try {
			RawData fip = RawData.builder().id(rawDataId++)
					.name("VIP.vipi")
					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png")))
					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png"))).build();
			this.rawData.add(fip);
			return fip.getId();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	private int rawDataId = 0;
	private int rawDataOtdr() {
		try {
			RawData otdr = RawData.builder().id(rawDataId++)
					.name("otdr.sor")
					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG")))
					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"))).build();
			this.rawData.add(otdr);
			return otdr.getId();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	private static TempDB instance = null;
	public static TempDB instance() {
		if (instance == null) {
			instance = new TempDB();

		}
		return instance;
	}
	public Project project(Integer id) {
		for (Project project : projects) {
			if (project.getId() == id) {
				return project;
			}
		}
		return null;
	}

	public Project projectByDutPackage(Integer folderid) {
		for (Project project : projects) {
			for (DutPackage dutPackage : project.getDutPackages()) {
				if (dutPackage.getId() == folderid) {
					return project;
				}
				for (Dut dut : dutPackage.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackage(Integer packageid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				if (folder.getId() == packageid) {
					return folder;
				}
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByDut(Integer dutid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return project;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackageByDut(Integer dutid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return folder;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return project;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackageByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return folder;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dutByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return dut;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public TestPoint testPoint(Integer testpointid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return testPoint;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dut(Integer dutid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return dut;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return project;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public DutPackage dutPackageByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return folder;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dutByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return dut;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public TestPoint testPointByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return testPoint;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public TestItem testItem(Integer testitemid) {
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return testItem;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public void addRawData(RawData fip) {
		fip.setId(rawData.size()+1);
		rawData.add(fip);
	}

	public RawData rawData(int id) {
		for (RawData d : rawData) {
			if (d.getId() == id) {
				return d;
			}
		}
		return null;
	}

	public List<Project> projects() {
		return this.projects;
	}

	public Set<TestItem> relatedTestItemsByRawData(int rawData2) {
		Set<TestItem> ret = new HashSet<>();
		for (Project project : projects) {
			for (DutPackage folder : project.getDutPackages()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getResultHistory() == null) {
								continue;
							}
							for (TestResult result : testItem.getResultHistory()) {
								if (result.getRawData() != null && result.getRawData().getId() == rawData2) {
									ret.add(testItem);
								}
							}
						}
					}
				}
			}
		}
		return ret;
	}

	public ProjectUser user(int operator) {
		return this.users.get(operator);
	}

	public int rawDataId() {
		return this.rawData.size() + 1;
	}

	public ProjectTester tester(int tester) {
		return this.testers.get(tester);
	}

}
