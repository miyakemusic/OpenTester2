package org.opentester.project;

import java.security.Principal;
import java.util.List;
import java.util.stream.Collectors;

import org.opentester.project.dto.CommonOptionDto;
import org.opentester.project.dto.CriteriaTemplateDto;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.NodeDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestProcedureDto;
import org.opentester.project.entity.CriteriaTemplateEntity;
import org.opentester.project.entity.NodeEntity;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.mapper.NodeMapper;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.NodeRepository;
import org.opentester.project.repository.TestItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProjectRestController2 {
	
	@Autowired
	private ProjectTreeGenerator2 projectTreeGenerator;
	
	@Autowired
	private NodeRepository nodeRepository;
	
	@Autowired
	private CriteriaTemplateRepository criteriaTemplateRepository;
	
	@Autowired
	private TestItemRepository testItemRepository;
		
	@GetMapping("/admin/2nd/project_tree_data/")
	public List<TreeNode> tree_data(Model model, Principal principal) {
		return projectTreeGenerator.generateTree();
	}
	
	@PostMapping("/admin/2nd/node")
	public String folder(Model model, Principal principal, @RequestBody NodeDto node) {
		NodeEntity parent = null;
		
		if (node.getParentId() != null) {
			parent = this.nodeRepository.findById(node.getParentId()).get();
		}
		this.nodeRepository.save(NodeEntity.builder().id(node.getId()).parentNode(parent).name(node.getName()).build());
		return "OK";
	}
	
	@PostMapping("/admin/2nd/testItem")
	public String testItem(Model model, Principal principal, @RequestBody TestItemDto testItem) {
		
		CriteriaTemplateEntity criteria = criteriaTemplateRepository.findById(testItem.getCriteria().getKey()).get();
		NodeEntity parent = nodeRepository.findById(testItem.getParentNode()).get();
		
		TestItemEntity entity = TestItemEntity.builder().criteria(criteria).parentNode(parent).build();
		testItemRepository.save(entity);
		
		return "OK";
	}
	
	@DeleteMapping("/admin/2nd/node/{id}")
	public String deleteFolder(Model model, Principal principal, @PathVariable("id") Long id) {
		this.nodeRepository.deleteById(id);
		return "OK";
	}
	
	@GetMapping("/admin/2nd/fragment_project_header")
	public String newProject(Model model, Principal principal) {
		
		String html = new ResourceReader("projectmenu.html")
				.text();
		
		return html;
	}
	
	@GetMapping("/admin/2nd/fragment_project_subheader")
	public String subHeader(Model model, Principal principal) {
		
		DtoToHtml nodeNewProject = new DtoToHtml(NodeDto.builder().name("Create Project").build());
		String html = new ResourceReader("projectsubmenu.html")
				.replace("postNodeUrl", "/admin/2nd/node")
				.replace("newNodeContentHtml", nodeNewProject.html())
				.replace("newNodeObjectImpl", nodeNewProject.objectImpl())
				.text();
		
		return html;
	}
	
	@GetMapping("/admin/2nd/nodeListHtml/{id}")
	public String folderSheet(Model model, Principal principal, @PathVariable("id") Long id) {
		NodeEntity nodeEntity = this.nodeRepository.findById(id).get();
		
		NodeDto dto = new NodeMapper().toDto(nodeEntity);
		DtoToHtml nodeDtoEdit = new DtoToHtml(dto);
		DtoToHtml nodeDtoNew = new DtoToHtml(NodeDto.builder().parentId(id).build());////new ClassToHtml(dto.getClass()).defaultValue("parentId", id.toString());
		DtoToHtml testItemDto = new DtoToHtml(TestItemDto.builder().parentNode(id).build());
		String datatable = new ResourceReader("datatable.html")
				.replace("id", id.toString())
				//.replace("postNodeUrl", "")
				//.replace("delNodeUrl", "/admin/2nd/node/" + id)
				.replace("newNodeContentHtml", nodeDtoNew.html())
				.replace("newNodeObjectImpl", nodeDtoNew.objectImpl())
				.replace("editNodeContentHtml", nodeDtoEdit.html())
				.replace("editNodeObjectImpl", nodeDtoEdit.objectImpl())
				.replace("newTestItemContentHtml", testItemDto.html())
				.replace("newTestItemObjectImpl", testItemDto.objectImpl())
				.replace("getOptions", testItemDto.javascriptFunction())
				.text();
		
		return datatable;
	}
		
	@GetMapping("/admin/2nd/nodeListJson/{id}")
	public List<NodeDto> nodeListJson(Model model, Principal principal, @PathVariable("id") Long id) {
		List<NodeDto> ret= this.nodeRepository.findById(id).get().getChildren().stream().map(n -> NodeDto.builder().id(n.getId()).name(n.getName()).build()).collect(Collectors.toList());
		return ret;
	}
	
	@GetMapping("/admin/options/{cls}")
	public List<CommonOptionDto> options(Model model, Principal principal, @PathVariable("cls") String cls) {
		if (cls.equals(CriteriaTemplateDto.class.getName()) ) {
			return this.criteriaTemplateRepository.findAll()
					.stream().map(c -> CommonOptionDto.builder()
							.id(c.getId())
							.primary(c.getTestItemTemplate().getTestkey())
							.secondary(c.getTestItemTemplate().getDescription())
							.tertiary(c.getCriteriaFormula())
							.build()).collect(Collectors.toList());
		}
		return null;
	}
}
