package org.opentester.project;

import java.security.Principal;
import java.util.List;
import java.util.stream.Collectors;

import org.opentester.project.dto.NodeDto;
import org.opentester.project.dto.TestProcedureDto;
import org.opentester.project.entity.NodeEntity;
import org.opentester.project.entity.mapper.NodeMapper;
import org.opentester.project.repository.NodeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProjectRestController2 {
	
	@Autowired
	private ProjectTreeGenerator2 projectTreeGenerator;
	
	@Autowired
	private NodeRepository nodeRepository;
	
	@GetMapping("/admin/2nd/project_tree_data/")
	public List<TreeNode> tree_data(Model model, Principal principal) {
		return projectTreeGenerator.generateTree();
	}
	
	@PostMapping("/admin/2nd/node")
	public String folder(Model model, Principal principal, @RequestBody NodeDto node) {
		NodeEntity parent = null;
		
		if (node.getParentId() != null) {
			parent = this.nodeRepository.findById(node.getParentId()).get();
		}
		this.nodeRepository.save(NodeEntity.builder().id(node.getId()).parentNode(parent).name(node.getName()).build());
		return "OK";
	}
	
	@DeleteMapping("/admin/2nd/node/{id}")
	public String folder(Model model, Principal principal, @PathVariable("id") Long id) {
		this.nodeRepository.deleteById(id);
		return "OK";
	}
	
	@GetMapping("/admin/2nd/nodeListHtml/{id}")
	public String folderSheet(Model model, Principal principal, @PathVariable("id") Long id) {
		NodeEntity nodeEntity = this.nodeRepository.findById(id).get();
		
		NodeDto dto = new NodeMapper().toDto(nodeEntity);
		DtoToHtml dtoHtml = new DtoToHtml(dto);
		ClassToHtml classHtml = new ClassToHtml(dto.getClass()).defaultValue("parentId", id.toString());
		
		String datatable = new ResourceReader("datatable.html")
				.replace("geturl", "/admin/2nd/nodeListJson/" + id)
				.replace("posturl", "/admin/2nd/node")
				.replace("delurl", "/admin/2nd/node/" + id)
				.replace("newContentHtml", classHtml.html())
				.replace("newObjectImpl", classHtml.objectImpl())
				.replace("editContentHtml", dtoHtml.html())
				.replace("editObjectImpl", dtoHtml.objectImpl())
				.html();
		return datatable;
	}
		
	@GetMapping("/admin/2nd/nodeListJson/{id}")
	public List<NodeDto> nodeListJson(Model model, Principal principal, @PathVariable("id") Long id) {
		List<NodeDto> ret= this.nodeRepository.findById(id).get().getChildren().stream().map(n -> NodeDto.builder().id(n.getId()).name(n.getName()).build()).collect(Collectors.toList());
		return ret;
	}
}
