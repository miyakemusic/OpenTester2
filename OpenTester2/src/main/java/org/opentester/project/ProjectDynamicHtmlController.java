package org.opentester.project;

import java.lang.reflect.InvocationTargetException;
import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.entity.DtoConverter;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTestItemRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectTesterHistoryRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProjectDynamicHtmlController {
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private ProjectTestItemRepository projectTestItemRepository;
	
	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	 
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private ProjectTesterHistoryRepository projectTesterHistoryRepository;
	
	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Autowired
	private ProjectTestPointRepository projectTestPointRepository;

	@Autowired
	private DutPackageRepository dutPackageRepository;

	@Autowired
	private DutRepository dutRepository;

	@Autowired
	private ProjectRepository projectRepository;
	
	private static HtmlGenerator<ProjectDto> projectGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectTesterDto> projectTesterGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectUserDto> projectUserGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectTestItemTemplateDto> projectTestItemTemplateGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectTesterTemplateDto> projectTesterTemplateGenerator = new HtmlGenerator<>();
	
	@GetMapping("/admin/fragment_project_dialog")
	public String fragment_project_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Long id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectDto dto =  DtoConverter.convertDto( this.projectRepository.findById(id).get() );
		
		Map<String, String> getter = new HashMap<>();
//		getter.put("role", "/admin/roles");
		return projectGenerator.createDialog(dto, getter, "/admin/table/project");
	}
	
	@GetMapping("/admin/fragment_project_user_dialog")
	public String fragment_project_user_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Long id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectUserDto dto =  DtoConverter.convertDto( this.projectUserRepository.findById(id).get() );
		
		Map<String, String> getter = new HashMap<>();
		getter.put("role", "/admin/roles");
		return projectUserGenerator.createDialog(dto, getter, "/admin/table/project_user");
	}
	
	@GetMapping("/admin/table/project_testitem_template")
	public String project_testitem_template(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectTestItemTemplateDto> list = DtoConverter.convertTestItemTemplateDto( this.projectTestItemTemplateRepository.findAll() );
		String url = "/admin/fragment_project_testitem_template_dialog?id=";
		return projectTestItemTemplateGenerator.createTable(list, url);
	}
	
	@GetMapping("/admin/fragment_project_testitem_template_dialog")
	public String fragment_project_testitem_template_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Long id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectTestItemTemplateDto dto =  DtoConverter.convertTestItemTemplateDto( this.projectTestItemTemplateRepository.findById(id).get() );
		
		Map<String, String> getter = new HashMap<>();
		return projectTestItemTemplateGenerator.createDialog(dto, getter, "/admin/table/project_testitem_template");
	}
	
	@GetMapping("/admin/fragment_project_tester_dialog")
	public String fragment_project_tester_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Long id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectTesterDto dto =  DtoConverter.convertDto( this.projectTesterRepository.findById(id).get() );
		
		Map<String, String> getter = new HashMap<>();
		return projectTesterGenerator.createDialog(dto, getter, "/admin/table/project_tester");
	}
	@GetMapping("/admin/table/project")
	public String project(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectDto> list = DtoConverter.convertProjectDto( this.projectRepository.findAll() );
		String url = "/admin/fragment_project_dialog?id=";
		return projectGenerator.createTable(list, url);
	}
	@GetMapping("/admin/table/project_user")
	public String project_user(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectUserDto> list = DtoConverter.convertUserDto( this.projectUserRepository.findAll() );
		String url = "/admin/fragment_project_user_dialog?id=";
		return projectUserGenerator.createTable(list, url);
	}
	@GetMapping("/admin/table/project_tester")
	public String project_tester(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectTesterDto> list = DtoConverter.convertDto( this.projectTesterRepository.findAll() );
		String url = "/admin/fragment_project_tester_dialog?id=";
		return projectTesterGenerator.createTable(list, url);
	}

	@GetMapping("/admin/table/project_tester_template")
	public String project_tester_template(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectTesterTemplateDto> list = DtoConverter.convertTesterTemplateDto( this.projectTesterTemplateRepository.findAll() );
		String url = "/admin/fragment_project_tester_template_dialog?id=";
		return projectTesterTemplateGenerator.createTable(list, url);
	}
	

	@GetMapping("/admin/fragment_project_tester_template_dialog")
	public String fragment_project_tester_template_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Long id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectTesterTemplateDto dto =  DtoConverter.convertDto( this.projectTesterTemplateRepository.findById(id).get() );
		Map<String, String> getter = new HashMap<>();
		getter.put("supplier", "/admin/suppliers");
		getter.put("testItemTemplates", "/admin/testItemTemplates");
		return projectTesterTemplateGenerator.createDialog(dto, getter, "/admin/table/project_tester_template");
	}
	
	@GetMapping("/admin/suppliers")
	public String suppliers(Model model, Principal principal) {
		List<KeyValueDto> list = this.projectTesterSupplierRepository.findAll().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getName()).build()).collect(Collectors.toList());
		return generateListHtml(list);
	}
	
	@GetMapping("/admin/testItemTemplates")
	public String testItemTemplates(Model model, Principal principal) {
		List<KeyValueDto> list = this.projectTestItemTemplateRepository.findAll().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getName()).build()).collect(Collectors.toList());
		return generateCheckBoxHtml(list);
	}

	@GetMapping("/admin/roles")
	public String roles(Model model, Principal principal) {
		List<KeyValueDto> list = this.projectSubRoleRepository.findAll().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getName()).build()).collect(Collectors.toList());
		return generateCheckBoxHtml(list);
	}
	
	private String generateCheckBoxHtml(List<KeyValueDto> list) {
		StringBuffer str = new StringBuffer();
		list.forEach(kv -> str.append("<div class=\"form-check\"><label class=\"form-check-label\">" + kv.getValue() + "</label><input class=\"form-check-input\" type=\"checkbox\" id=\"" + kv.getKey() + "\" /></div>"));
			
		return "" + str.toString() + "</div>";
	}
	
	private String generateListHtml(List<KeyValueDto> list) {
		StringBuffer str = new StringBuffer();
		str.append("<select class=\"form-select\">");
		list.forEach(kv -> str.append("<option value=\"" + kv.getKey() + "\">" + kv.getValue() + "</option>"));
		str.append("</select>");
		
		return "<div>" + str.toString() + "</div>";
	}
}
