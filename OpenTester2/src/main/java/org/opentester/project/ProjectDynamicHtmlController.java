package org.opentester.project;

import java.lang.reflect.InvocationTargetException;
import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.entity.DtoConverter;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProjectDynamicHtmlController {
	
	private static HtmlGenerator<ProjectTesterDto> projectTesterGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectUserDto> projectUserGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectTestItemTemplateDto> projectTestItemTemplateGenerator = new HtmlGenerator<>();
	private static HtmlGenerator<ProjectTesterTemplateDto> projectTesterTemplateGenerator = new HtmlGenerator<>();
	
	@GetMapping("/admin/fragment_project_user_dialog")
	public String fragment_project_user_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Integer id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectUserDto dto =  DtoConverter.convertDto( TempDB.instance().user(id) );
		
		Map<String, String> getter = new HashMap<>();
		return projectUserGenerator.createDialog(dto, getter, "/admin/table/project_user");
	}
	
	@GetMapping("/admin/table/project_testitem_template")
	public String project_testitem_template(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectTestItemTemplateDto> list = DtoConverter.convertTestItemTemplateDto(TempDB.instance().testItemTemplates());
		String url = "/admin/fragment_project_testitem_template_dialog?id=";
		return projectTestItemTemplateGenerator.createTable(list, url);
	}
	
	@GetMapping("/admin/fragment_project_testitem_template_dialog")
	public String fragment_project_testitem_template_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Integer id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectTestItemTemplateDto dto =  DtoConverter.convertTestItemTemplateDto( TempDB.instance().testItemTemplate(id) );
		
		Map<String, String> getter = new HashMap<>();
		return projectTestItemTemplateGenerator.createDialog(dto, getter, "/admin/table/project_testitem_template");
	}
	
	@GetMapping("/admin/fragment_project_tester_dialog")
	public String fragment_project_tester_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Integer id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectTesterDto dto =  DtoConverter.convertDto( TempDB.instance().tester(id) );
		
		Map<String, String> getter = new HashMap<>();
		return projectTesterGenerator.createDialog(dto, getter, "/admin/table/project_tester");
	}
	
	@GetMapping("/admin/table/project_user")
	public String project_user(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectUserDto> list = DtoConverter.convertUserDto(TempDB.instance().users());
		String url = "/admin/fragment_project_user_dialog?id=";
		return projectUserGenerator.createTable(list, url);
	}
	@GetMapping("/admin/table/project_tester")
	public String project_tester(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectTesterDto> list = DtoConverter.convertDto(TempDB.instance().testers());
		String url = "/admin/fragment_project_tester_dialog?id=";
		return projectTesterGenerator.createTable(list, url);
	}

	@GetMapping("/admin/table/project_tester_template")
	public String project_tester_template(Model model, Principal principal) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		List<ProjectTesterTemplateDto> list = DtoConverter.convertTesterTemplateDto(TempDB.instance().testerTemplates());
		String url = "/admin/fragment_project_tester_template_dialog?id=";
		return projectTesterTemplateGenerator.createTable(list, url);
	}
	

	@GetMapping("/admin/fragment_project_tester_template_dialog")
	public String fragment_project_tester_template_dialog(Model model, Principal principal, @RequestParam(value = "id", required=true) Integer id) throws IllegalArgumentException, IllegalAccessException, NoSuchMethodException, SecurityException, InvocationTargetException {
		ProjectTesterTemplateDto dto =  DtoConverter.convertDto( TempDB.instance().testerTemplate(id) );
//		GetterUrl getter = new GetterUrl(dto);
		Map<String, String> getter = new HashMap<>();
		getter.put("supplier", "/admin/suppliers");
		getter.put("testItemTemplates", "/admin/testItemTemplates");
		return projectTesterTemplateGenerator.createDialog(dto, getter, "/admin/table/project_tester_template");
	}
	
	@GetMapping("/admin/suppliers")
	public String suppliers(Model model, Principal principal) {
		List<KeyValueDto> list = TempDB.instance().testerSuppliers().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getName()).build()).collect(Collectors.toList());
		
		StringBuffer str = new StringBuffer();
//		str.append("<label class=\"form-check-label\">" + "</label>");
		str.append("<select class=\"form-select\">");
		list.forEach(kv -> str.append("<option value=\"" + kv.getKey() + "\">" + kv.getValue() + "</option>"));
		str.append("</select>");
		
		return "<div>" + str.toString() + "</div>";
	}
	
	@GetMapping("/admin/testItemTemplates")
	public String testItemTemplates(Model model, Principal principal) {
		List<KeyValueDto> list = TempDB.instance().testItemTemplates().stream().map(s -> KeyValueDto.builder().key(s.getId()).value(s.getName()).build()).collect(Collectors.toList());
//		return list.toArray(new KeyValueDto[0]);
		StringBuffer str = new StringBuffer();
		list.forEach(kv -> str.append("<label class=\"form-check-label\">" + kv.getValue() + "</label><input class=\"form-check-input\" type=\"checkbox\" id=\"" + kv.getKey() + "\" />"));
			
		return "<div class=\"form-check\">" + str.toString() + "</div>";
	}
}
