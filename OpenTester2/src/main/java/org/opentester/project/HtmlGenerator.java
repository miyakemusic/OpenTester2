package org.opentester.project;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.opentester.project.dto.DtoFieldControl;
import org.opentester.project.dto.DtoFieldControl.WidgetType;
import org.opentester.project.dto.DtoPost;
import org.opentester.project.dto.DtoSelect;
import org.opentester.project.dto.KeyValueDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;

@Configuration
public class HtmlGenerator<T> {
	public String createDialog(T object/*, Map<String, String> getter*/) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		String js = readResource("post.js");
		
		DtoPost annotation = object.getClass().getAnnotationsByType(DtoPost.class)[0];
		String postUri = annotation.uri();
		
		StringBuilder str = new StringBuilder();
		str.append("<div>");
		Long globalId = null;
		List<String> ids = new ArrayList<>();
		String listUrl = "";
		for (int i = 0; i < object.getClass().getDeclaredFields().length; i++) {
			Field field = object.getClass().getDeclaredFields()[i];
			
			boolean skip = false;
			for (Annotation fieldAnnotation : field.getAnnotations()) {
				if (fieldAnnotation instanceof DtoFieldControl) {
					if ( ((DtoFieldControl)fieldAnnotation).type().compareTo(WidgetType.HIDE) == 0) {
						skip = true;
					}					
				}
				else if (fieldAnnotation instanceof DtoSelect) {
					listUrl = ((DtoSelect)fieldAnnotation).uri();
				}
			}
			if (skip) {
				continue;
			}

			String name = field.getName();
			Method method = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(name));
			Object value = method.invoke(object);
			String itemid = name;//"Input" + i;
			String title = StringUtils.capitalize(name);
			
//			String listUrl = getter.get(name);
			
			ids.add(itemid);
			if (field.getType().equals(Long.class)) {
				if (field.getName().equals("id")) {
					globalId = (Long)value;
					str.append("<input hidden type=\"text\" id=\"" + itemid + "\" name=\"" + itemid + "\" value=\"" + value +  "\" class=\"form-control\" />");
				}
			}
			else if (field.getType().equals(String.class)) {
				if (value == null) {
					value = "";
				}
				str.append("<div>");
				str.append("<label for=\"" + itemid + "\">" + title + "</label>");
				str.append("<input type=\"text\" id=\"" + itemid + "\" name=\"" + itemid + "\" value=\"" + value +  "\" class=\"form-control\" />");
				str.append("</div>");
			}
			else if (field.getType().equals(KeyValueDto.class)) {
				str.append("<div><label>" + title + "</label></div>");
				if (value != null) {
					str.append("<button id=\"" + itemid + "\" class=\"btn btn-outline-dark\" value=\"" + ((KeyValueDto)value).getKey() +  "\" onclick=\"editValue('" + listUrl + "', '" + itemid + "', " + ((KeyValueDto)value).getKey() + ")\">" + ((KeyValueDto)value).getValue() + "</button>");
				}
				else {
					str.append("<button id=\"" + itemid + "\" class=\"btn btn-outline-dark\" onclick=\"editValue('" + listUrl + "', " + globalId + ", null)\">---</button>");				
				}
			}
			else if (field.getType().equals(List.class)) {
				str.append("<div><label>" + title + "</label></div>");		
				if (value == null) {
					value = "---";
				}
				str.append("<button id=\"" + itemid + "\" class=\"btn btn-outline-dark\" onclick=\"editValue('" + listUrl + "', " + globalId + ")\">" + value + "</button>");
			}
			else if (field.getType().equals(List.class)) {
				List<Object> list = (List)value;
							
				str.append("<label>" + title + "</label>");
				for (Object o : list) {
					str.append("<span class=\"form-check\">");
					str.append("<input class=\"form-check-input\" type=\"checkbox\" value=\"" + "\" id=\"" + o + "\" checked>");
					str.append("<label class=\"form-check-label\" for=\"" + o + "\">");
					str.append(o);
					str.append("</label>");
					str.append("</span>");
				}
				
			}
			else if (field.getType().equals(List.class)) {
				str.append("<div>");
				str.append("<label>" + title + "</label>");
				str.append("<select class=\"form-select\" id=" + itemid + ">");
				List<Object> list = (List)value;
				list.forEach(v ->  str.append("<option>" + v + "</option>"));
				
				str.append("</select>");
				str.append("</div>");
			}
		}
		str.append("</div>\n");
		
		StringBuffer sb = new StringBuffer();
//		sb.append("debugger;");
		for (String id : ids) {
			try {
				
//				sb.append("if ($('#'+" + id + ").val() == null) {\n");
//				sb.append("	continue;\n");
//				sb.append("}\n");
				if (object.getClass().getDeclaredField(id).getType().equals(KeyValueDto.class)) {
					sb.append("obj." + id + "= new Object();\n");
					sb.append("obj." + id + ".key" + " = $('#" + id + "').val();\n");
			//		sb.append("obj." + id + ".value = \"\";\n");
				}
				else if (object.getClass().getDeclaredField(id).getType().equals(List.class)) {
					
				}
				else {
					sb.append("obj." + id + " = $('#" + id + "').val();\n");
				}
			} catch (NoSuchFieldException | SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		sb.append("debugger;");
		return str.toString() + js.toString().replace("<*url*>", postUri).replace("<*fillobj*>", sb.toString());		
	}

	private String readResource(String resource) {
		BufferedReader br = new BufferedReader( new InputStreamReader(this.getClass().getResourceAsStream(resource)));
		StringBuilder js = new StringBuilder();
		String line = "";
		try {
			while((line = br.readLine()) != null) {
				js.append(line+  "\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return js.toString();
	}
	
	@Autowired
	private MessageSource messageSource;
	
	public String createTable(List<T> list, String dialogUrl)
			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
		
		String html = readResource("table.html");
		String js = readResource("table.js");
		
		js = js.replace("<*buttonText*>", messageSource.getMessage("label.project.createnew", null, Locale.JAPAN))
				.replace("<*url*>", "/admin/project_dialog_html/" + dialogUrl);
		if (list.size() == 0) {
			return js;
		}
		
		Field[] fields = list.get(0).getClass().getDeclaredFields();
		
		StringBuilder header = new StringBuilder();
		for (int i = 0; i < fields.length; i++) {
			header.append("<th>" + StringUtils.capitalize(fields[i].getName()) +  "</th>");
		}
		
		html = html.replace("<*header*>", header.toString());
				
		String id = "";
		
		StringBuffer body = new StringBuffer();
		for (Object object : list) {
			body.append("<tr>");
			
			for (int i = 0; i < fields.length; i++) {
				Field field = fields[i];
				String name = field.getName();
				Method method = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(name));
				Object value = method.invoke(object);				
				body.append("<td>" + value +  "</td>");
				
				if (i == 0) {
					id = value.toString();
				}
			}
			
			String edit = messageSource.getMessage("button.table.edit", null, Locale.JAPAN);
			String delete = messageSource.getMessage("button.table.delete", null, Locale.JAPAN);
			
			String buttons = "<td><button class=\"btn btn-secondary\" onclick=\"on_edit_table(" + id + ")\">" + edit + "</button>" + 
					"<button class=\"btn btn-secondary\" onclick=\"on_delete(" + id + ")\">" + delete + "</button></td>";
			body.append(buttons);

			
			body.append("</tr>");
		}
		
		html = html.replace("<*body*>", body.toString());	
		
		return html + js;
	}
}
