package org.opentester.project;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import org.opentester.project.dto.DtoFieldControl;
import org.opentester.project.dto.DtoFieldControl.WidgetType;
import org.opentester.project.dto.DtoRest;
import org.opentester.project.dto.DtoSelect;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.PassFailDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;

@Configuration
public class HtmlGenerator<T> {
	public String createDialog(T object/*, Map<String, String> getter*/) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		String js = readResource("post.js");
		
		DtoRest annotation = object.getClass().getAnnotationsByType(DtoRest.class)[0];
		String postUri = annotation.uri();
		
		StringBuilder str = new StringBuilder();
		str.append("<div>");
		List<String> ids = new ArrayList<>();
		String listUrl = "";
		for (int i = 0; i < object.getClass().getDeclaredFields().length; i++) {
			Field field = object.getClass().getDeclaredFields()[i];
			
			boolean skip = false;
			DtoSelect.Type type = null;
			for (Annotation fieldAnnotation : field.getAnnotations()) {
				if (fieldAnnotation instanceof DtoFieldControl) {
					if ( ((DtoFieldControl)fieldAnnotation).type().compareTo(WidgetType.READONLY) == 0) {
						skip = true;
					}					
				}
				else if (fieldAnnotation instanceof DtoSelect) {
					listUrl = ((DtoSelect)fieldAnnotation).uri();
					type = ((DtoSelect)fieldAnnotation).type();
				}
			}
			if (skip) {
				continue;
			}

			String name = field.getName();
			if (name.equals("type") ) {
				continue;
			}
			Method method = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(name));
			Object value = method.invoke(object);
			String itemid = name;
			String title = StringUtils.capitalize(name);

			ids.add(itemid);
			if (field.getType().equals(Long.class) && field.getName().equals("id")) {
				str.append("<input hidden type=\"text\" id=\"" + itemid + "\" name=\"" + itemid + "\" value=\"" + value +  "\" class=\"form-control\" />");
			}
			else if (type != null && type.equals(DtoSelect.Type.Date)) {
				str.append("<div><label>" + title + "</label></div>");
				str.append("<input type=\"text\" id=\"" + itemid + "\" class=\"fl-ympicker\" value=\"" + value + "\"><br>");
			}
			else if (field.getType().equals(String.class) || field.getType().equals(Integer.class)) {
				if (value == null) {
					value = "";
				}
				str.append("<div>");
				str.append("<label for=\"" + itemid + "\">" + title + "</label>");
				str.append("<input type=\"text\" id=\"" + itemid + "\" name=\"" + itemid + "\" value=\"" + value +  "\" class=\"form-control\" />");
				str.append("</div>");
			}
			else if (field.getType().equals(KeyValueDto.class)) {
				listUrl = listUrl.replace("select_html", "single_select_html");
				str.append("<div><label>" + title + "</label></div>");
				if (value != null) {
					str.append("<button id=\"" + itemid + "\" class=\"btn btn-outline-dark\" value=\"" + ((KeyValueDto)value).getKey() + 
							"\" onclick=\"editValueSelect('" + listUrl + "', '" + itemid + "', " + ((KeyValueDto)value).getKey() + ")\">" + ((KeyValueDto)value).getValue() + "</button>");
				}
				else {
					str.append("<button id=\"" + itemid + "\" class=\"btn btn-outline-dark\" onclick=\"editValueSelect('" + listUrl + "', '" + itemid + "', null)\">---</button>");				
				}
			}
			else if (field.getType().equals(List.class)) {
				listUrl = listUrl.replace("select_html", "multi_select_html");
				str.append("<div><label>" + title + "</label></div>");	
				
				String selected = "";
				if (value != null) {
					for (KeyValueDto kv : ((List<KeyValueDto>)value)) {;
						selected += kv.getKey() + ",";
					}
					if (!selected.isEmpty()) {
						selected = selected.substring(0, selected.length()-1) + "";
					}
				}
				str.append("<button id=\"" + itemid + "\" value=\"" + selected + "\" class=\"btn btn-outline-dark\" onclick=\"editValueCheckBox('" + listUrl + "', '" + itemid + "'," + 
						"[" + selected + "]" + ")\">" + value + "</button>");
			}
		}
		str.append("</div>\n");
		
		StringBuffer sb = new StringBuffer();
//		sb.append("debugger;");
		for (String id : ids) {
			try {
				
//				sb.append("if ($('#'+" + id + ").val() == null) {\n");
//				sb.append("	continue;\n");
//				sb.append("}\n");
				if (object.getClass().getDeclaredField(id).getType().equals(KeyValueDto.class)) {
					sb.append("obj." + id + "= new Object();\n");
					sb.append("obj." + id + ".key" + " = $('#" + id + "').val();\n");
			//		sb.append("obj." + id + ".value = \"\";\n");
				}
				else if (object.getClass().getDeclaredField(id).getType().equals(List.class)) {
					sb.append("var v = $('#" + id + "').val();\n");
					sb.append("if (v != '') {\n");
					sb.append("	var ids = v.split(',');\n");
					sb.append("	var list = [];\n");
					sb.append("	for (var id of ids) {\n");
					sb.append("		var o = new Object();\n");
					sb.append("		o.key = id;\n");
					sb.append("		list.push(o);\n");
					sb.append("	}\n");
					sb.append("obj." + id + "=list;\n");
					sb.append("}\n");
					sb.append("debugger;");
				}
				else {
					sb.append("obj." + id + " = $('#" + id + "').val();\n");
				}
			} catch (NoSuchFieldException | SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//sb.append("debugger;");
				
		return str.toString() + js.toString().replace("/*[[${url}]]*/", postUri).replace("/*[[${fillobj}]]*/", sb.toString());		
	}

	private String readResource(String resource) {
		BufferedReader br = new BufferedReader( new InputStreamReader(this.getClass().getResourceAsStream(resource)));
		StringBuilder js = new StringBuilder();
		String line = "";
		try {
			while((line = br.readLine()) != null) {
				js.append(line+  "\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return js.toString();
	}
	
	@Autowired
	private MessageSource messageSource;
	
	public String createTable(String hierarchy, List<T> list, String type, Long parent)
			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
		
		String html = readResource("table.html");
		String js = readResource("table.js");
		
		String newCreateUrl = "/admin/project_fields_html/" + type;
		js = js.replace("/*[[${parent}]]*/", parent == null ? "null" : parent.toString());
		js = js.replace("<*buttonText*>", messageSource.getMessage("label.project.createnew", null, Locale.JAPAN))
				.replace("/*[[${url}]]*/", newCreateUrl);
		if (list.size() == 0) {
			js = js.replace("/*[[${list}]]*/", "[]");
			return js;
		}
		
		Field[] fields = list.get(0).getClass().getDeclaredFields();
		
		StringBuilder header = new StringBuilder();			
		String id = "";
		
		StringBuffer body = new StringBuffer();
		StringBuffer progressList = new StringBuffer();

		boolean firstObject = true;
		for (Object object : list) {
			body.append("<tr>");
			
			for (int i = 0; i < fields.length; i++) {
				Field field = fields[i];

				String name = field.getName();
				if (name.equals("type")) {
					continue;
				}
				Method method = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(name));
				Object value = method.invoke(object);	
				
				if(name.equals("id")) {
					id = value.toString();
				}
				String moveTo = "";
				
				boolean skip = false;
				for (Annotation fieldAnnotation : field.getAnnotations()) {
					if (fieldAnnotation instanceof DtoFieldControl) {
						if ( ((DtoFieldControl)fieldAnnotation).type().compareTo(WidgetType.MOVE) == 0) {
							moveTo = ((DtoFieldControl) fieldAnnotation).uri();
						}
						else if ( ((DtoFieldControl)fieldAnnotation).type().compareTo(WidgetType.HIDE_IN_TABLE) == 0) {
							skip = true;
							break;
						}
					}
				}
				
				if (skip) {
					continue;
				}
				
				if (firstObject) {
					header.append("<th>" + StringUtils.capitalize(fields[i].getName()) +  "</th>");
				}
				

				if (!moveTo.isEmpty()) {
					String link = moveTo;

					if (moveTo.contains("{")) {
						String[] tmp = moveTo.split("[{}+]");
						String argument = "";
						for (int j = 1; j < tmp.length; j+=2) {
							argument = tmp[j];
							String valueToReplace = "";
							if (argument.equals("*type*")) {
								try {
									valueToReplace = object.getClass().getField("type").get(object).toString();
								} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException
										| SecurityException e) {
									e.printStackTrace();
								}
							}
							else {
								Object arg = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(argument)).invoke(object);
								valueToReplace = arg.toString();
							}
							link = link.replace("{" + argument + "}", valueToReplace);
						}
					}	
					value = "<button class=\"btn btn-link\" onclick=\"changeProjectMainPane('" + link + "')\">" + value + "</button>";
				}
				
				if (field.getType().equals(PassFailDto.class)) {
					String progressId = "progress_" + id;
					body.append("<td><canvas class=\"progressbar\" id=\"" + progressId + "\"></canvas></td>");
					PassFailDto o = (PassFailDto)value;
					if (o != null) {
						progressList.append("{\"id\":\"" + progressId + "\",\"passed\":" + o.getPass() + ",\"failed\":" + o.getFail() + ",\"untouched\":" + o.getUntouched() + "},");
					}
				}
				else if (value != null) {
					if (value.toString().startsWith("http://") || value.toString().startsWith("https://")) {
						value = "<a href=\"" + value + "\" target=\"_blank\">" + "Web" + "</a>";
					}
					body.append("<td>" + value +  "</td>");
				}
				else {
					body.append("<td></td>");
				}
			}
			
			
			String edit = messageSource.getMessage("button.table.edit", null, Locale.JAPAN);
			String delete = messageSource.getMessage("button.table.delete", null, Locale.JAPAN);
			
			String buttons = "<td><button class=\"btn btn-secondary btn-sm\" onclick=\"on_edit_table(" + id + ")\">" + edit + "</button>" + 
					"<button class=\"btn btn-secondary btn-sm\" onclick=\"on_delete(" + id + ")\">" + delete + "</button></td>";
			body.append(buttons);

			
			body.append("</tr>");
			
			firstObject = false;
		}

		js = applyProgressList(js, progressList);
		
		html = html.replace("<*title*>", "<div>" + hierarchy + "</div>").replace("<*body*>", body.toString()).replace("<*header*>", header.toString());

		return html + js;
	}

	private String applyProgressList(String js, StringBuffer progressList) {
		if (!progressList.isEmpty()) {
			String listStr = "[" + progressList.toString().substring(0, progressList.length()-1) + "]";
			js = js.replace("/*[[${list}]]*/", listStr);
		}
		else {
			js = js.replace("/*[[${list}]]*/", "[]");
		}
		return js;
	}

	public String createSummary(String buttons, T dto) {
		String js = readResource("summary.js");
		StringBuilder html = new StringBuilder();
		StringBuffer progressList = new StringBuffer();
		
		html.append(buttons);
		html.append("<table class=\"table table-striped\">");
		for (Field field : dto.getClass().getDeclaredFields()) {
			if (!Modifier.isStatic(field.getModifiers())) {

				try {
					Method method = dto.getClass().getMethod("get"+ StringUtils.capitalize(field.getName()));
					Object value = method.invoke(dto);
					if (field.getType().equals(PassFailDto.class)) {
						String progressId = "progress_" + field.getName();
						html.append("<tr><td>" + StringUtils.capitalize(field.getName()) + "</td><td><canvas class=\"progressbar\" id=\"" + progressId + "\"></canvas></td></tr>");
						PassFailDto o = (PassFailDto)value;
						if (o != null) {
							progressList.append("{\"id\":\"" + progressId + "\",\"passed\":" + o.getPass() + ",\"failed\":" + o.getFail() + ",\"untouched\":" + o.getUntouched() + "},");
						}
					}
					else if (field.getType().equals(List.class)) {
						if (value == null) {
							value = "";
						}
						html.append("<tr><td>" + StringUtils.capitalize(field.getName()) + "</td><td>" + value.toString().replace(",", "<br>").replace("[", "").replace("]", "") + "</td></td>");
					}
					else {
						html.append("<tr><td>" + StringUtils.capitalize(field.getName()) + "</td><td>" + value + "</td></td>");
					}
				} catch (NoSuchMethodException | SecurityException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
			
			
		}
		
		js = applyProgressList(js, progressList);
		html.append("</table>");
		return html.toString() + js;			
	}

}
