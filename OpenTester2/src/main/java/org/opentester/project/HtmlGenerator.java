package org.opentester.project;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.opentester.project.dto.KeyValueDto;
import org.springframework.util.StringUtils;

public class HtmlGenerator<T> {
	public String createDialog(T object, Map<String, String> getter, String url) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		StringBuilder str = new StringBuilder();
		str.append("<div>");
		Integer globalId = null;
		List<String> ids = new ArrayList<>();
		for (int i = 0; i < object.getClass().getDeclaredFields().length; i++) {
			Field field = object.getClass().getDeclaredFields()[i];
			String name = field.getName();
			Method method = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(name));
			Object value = method.invoke(object);
			String itemid = name;//"Input" + i;
			String title = StringUtils.capitalize(name);
			
			String listUrl = getter.get(name);
			
			ids.add(itemid);
			if (field.getType().equals(int.class)) {
				if (field.getName().equals("id")) {
					globalId = (Integer)value;
				}
			}
			else if (field.getType().equals(String.class)) {
				str.append("<div>");
				str.append("<label for=\"" + itemid + "\">" + title + "</label>");
				str.append("<input type=\"text\" id=\"" + itemid + "\" name=\"" + itemid + "\" value=\"" + value +  "\" class=\"form-control\" />");
				str.append("</div>");
			}
			else if (field.getType().equals(KeyValueDto.class)) {
				str.append("<div><label>" + title + "</label></div>");
				str.append("<button class=\"btn btn-outline-dark\" onclick=\"editValue('" + listUrl + "', " + globalId + ", " + ((KeyValueDto)value).getKey() + ")\">" + ((KeyValueDto)value).getValue() + "</button>");
			}
			else if (field.getType().equals(List.class)) {
				str.append("<div><label>" + title + "</label></div>");
				str.append("<button class=\"btn btn-outline-dark\" onclick=\"editValue()\">" + value + "</button>");
			}
			else if (field.getType().equals(List.class)) {
				List<Object> list = (List)value;
							
				str.append("<label>" + title + "</label>");
				for (Object o : list) {
					str.append("<span class=\"form-check\">");
					str.append("<input class=\"form-check-input\" type=\"checkbox\" value=\"" + "\" id=\"" + o + "\" checked>");
					str.append("<label class=\"form-check-label\" for=\"" + o + "\">");
					str.append(o);
					str.append("</label>");
					str.append("</span>");
				}
				
			}
			else if (field.getType().equals(List.class)) {
				str.append("<div>");
				str.append("<label>" + title + "</label>");
				str.append("<select class=\"form-select\" id=" + itemid + ">");
				List<Object> list = (List)value;
				list.forEach(v ->  str.append("<option>" + v + "</option>"));
				
				str.append("</select>");
				str.append("</div>");
			}
		}
		str.append("</div>\n");
		
		StringBuffer sb = new StringBuffer();
		for (String id : ids) {
			sb.append("			obj." + id + "=$('#" + id + "').val();\n");
		}

		String post = 
			"			$.ajax({\n" + 
			"				url: '" + url + "',\n" + 
			"				type: 'POST',\n" + 
			"				data: JSON.stringify(obj),\n" +
			"				contentType: 'application/json',\n" + 
			"			dataType: 'json'\n" +
			"			}).done((data, textStatus, jqXHR) => {\n" +
			"			}).fail((jqXHR, textStatus, errorThrown) => {\n" +
			"			});\n";
		
		String js = 
			"	<script type=\"text/javascript\" inline=\"javascript\">\n" +
			"	$(function() {\n" + 
			"		largeDialog.callback(function() {\n" +
			"			largeDialog.hideDialog();\n" +
			"			var obj = new Object();\n" + sb.toString() + 
						post +
			"		});\n"+
			"	});\n" +
			"	function editValue(listUrl, id, itemid) {\n" +
			"debugger;\n" + 
			"		$.ajax({\n" +
			"			url: listUrl,\n" + 
			"			type: 'GET',\n" +
			"			tdataType: 'json', \n"+
			"		}).done((data, textStatus, jqXHR) => {\n" +
			"			smallDialog.showDialog(data);\n"+
			"		}).fail((jqXHR, textStatus, errorThrown) => {\n"+
			"		});\n"+
			"		\n" + 
			"	}\n" + 
			"	</script>\n";
		
		return str.toString() + js;		
	}
	
	public String createTable(List<T> list, String url)
			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
		
		Field[] fields = list.get(0).getClass().getDeclaredFields();
		
		StringBuilder str = new StringBuilder();
		str.append("<div><table class=\"table table-striped\">");
		
		str.append("<thead><tr>");
		for (int i = 0; i < fields.length; i++) {
			str.append("<th>" + StringUtils.capitalize(fields[i].getName()) +  "</th>");
		}
		
		str.append("<th></th></tr></thead><tbody>");
		String id = "";
		
		for (Object object : list) {
			str.append("<tr>");
			
			for (int i = 0; i < fields.length; i++) {
				Field field = fields[i];
				String name = field.getName();
				Method method = object.getClass().getDeclaredMethod("get" + StringUtils.capitalize(name));
				Object value = method.invoke(object);				
				str.append("<td>" + value +  "</td>");
				
				if (i == 0) {
					id = value.toString();
				}
			}
			
			String button = "<td><button class=\"btn btn-secondary\" onclick=\"on_edit_table(" + id + ")\">Edit</button></td>";
			str.append(button);
			
			str.append("</tr>");
		}
		str.append("</tbody></table></div>");

		String js = 
				"<script type=\"text/javascript\" inline=\"javascript\">\n" +
		
				"function on_edit_table(id) {\n" +
//					"debugger;\n" +
				"	$.ajax({\n" +
				"		url: '" + url + "'+id,\n" + 
				"		type: 'GET',\n" +
				"		tdataType: 'html', \n"+
				"	}).done((data, textStatus, jqXHR) => {\n" +
				"		largeDialog.showDialog(data);\n"+
				"	}).fail((jqXHR, textStatus, errorThrown) => {\n"+
				"	});\n"+
				"}\n"+
				"</script>";
		
		
		return str.toString() + js;
	}
}
