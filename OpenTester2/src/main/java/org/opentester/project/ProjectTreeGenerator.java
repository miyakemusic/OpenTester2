package org.opentester.project;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.opentester.project.entity.DutEntity;
import org.opentester.project.entity.DutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.TestPointEntity;
import org.opentester.project.entity.TestResultEntity;
import org.opentester.project.repository.ProjectRepository;
import org.springframework.beans.factory.annotation.Autowired;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ProjectTreeGenerator {

	@Autowired 
	private ProjectRepository projectRepository;
	
	public List<TreeNode> generateTree() {
		 List<TreeNode> projects = new ArrayList<>();
		 String url = ProjectConfig.tableURL;//"/admin/fragment_project_common/";
		 for (ProjectEntity prj : projectRepository.findAll()) {
			 TreeNode projectNode = TreeNode.builder().id(url + ProjectConfig.dutPackage + "/" + ProjectConfig.project +  "_" + prj.getId()).text(prj.getProjectName()).build();
			 projects.add(projectNode);
			 
			 List<TreeNode> pkgs = new ArrayList<>();
			 for (DutPackageEntity pkg : prj.getDutPackages()) {
				 TreeNode pkgNode = TreeNode.builder().id(url + ProjectConfig.dut + "/" + ProjectConfig.dutPackage +  "_" + pkg.getId()).text(pkg.getName()).build();
				 pkgs.add(pkgNode);
				 
				 List<TreeNode> duts = new ArrayList<TreeNode>();
				 for (DutEntity dut: pkg.getDuts()) {
					 TreeNode dutNode = TreeNode.builder().id(url + ProjectConfig.testPoint + "/" + ProjectConfig.dut +  "_" + dut.getId()).text(dut.getName()).build();
					 duts.add(dutNode);
					 
					 List<TreeNode> testPoints = new ArrayList<>();
					 for (TestPointEntity pt : dut.getTestPoints()) {
						 TreeNode tpNode = TreeNode.builder().id(url + ProjectConfig.testItem + "/" + ProjectConfig.testPoint +  "_" + pt.getId()).text(pt.getName()).build();
						 testPoints.add(tpNode);
						 
						 List<TreeNode> testItems = new ArrayList<>();
						 for (TestItemEntity item : pt.getTestItems()) {
							 TreeNode testItemNode = TreeNode.builder().id(url + ProjectConfig.result + "/" + ProjectConfig.testItem +  "_" + item.getId()).text(item.getCriteria().getTestItemTemplate().getTestkey()).build();
							 testItems.add(testItemNode);
							 
							 List<TreeNode> results = new ArrayList<>();
							 for (TestResultEntity result : item.getResultHistory()) {
								 TreeNode resultNode = TreeNode.builder().id(url + ProjectConfig.resultDetail + "/" + ProjectConfig.result +  "_" + result.getId()).text(result.getStatus() + "@" + result.getDate()).build();
								 results.add(resultNode);
								 
								List<TreeNode> rawData = new ArrayList<>();
								if (result.getRawData() != null) {
									rawData.add(TreeNode.builder().text(result.getRawData().getName()).build());
									//resultNode.setChildren(rawData);
								}
							 }
							 testItemNode.setChildren(results);
						 }
						 tpNode.setChildren(testItems);
					 }
					 dutNode.setChildren(testPoints);
				 }
				 pkgNode.setChildren(duts);
			 }
			 projectNode.setChildren(pkgs);
		 }
		 
		TreeNode treeNode = TreeNode.builder().id(url + ProjectConfig.project).text("Projects").children(projects).build();
		//return Arrays.asList(treeNode);
		return projects;
//		 return projects;
//		try {
//			String treeJson = new ObjectMapper().writeValueAsString(treeNode);
//			treeJson = treeJson.replace(",\"children\":null", "");
//			return "[" + treeJson + "]";
//		} catch (JsonProcessingException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}//.replace("\"text\"", "text").replace("\"nodes\"", "nodes");
//		return "";
	}
}
