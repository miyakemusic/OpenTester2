package org.opentester.project;

import java.io.IOException;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

//@RestController
//@RequestMapping("/api/project")
public class ProjectRestController {

	@GetMapping("/admin/image")
	public String getImg(@RequestParam("id") Integer id) throws IOException{
//		File fileImg = new File("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	    InputStream in = new DataInputStream("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	   return IOUtils.toByteArray(in);
//		byte[] bytes = tempDB.rawData(id).getImage(); //Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"));
		
		return Base64.encodeBase64String(null);
	}
	
	@GetMapping("/admin/rawData")
	public String rawData(@RequestParam("id") Integer id) {
//		byte[] bytes = tempDB.rawData(id).getContent();
//		try {
//			Files.write(Paths.get("C:\\Users\\miyak\\Desktop\\otdr2.png"), bytes, StandardOpenOption.CREATE_NEW);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}	
//		return Base64.encodeBase64String(bytes);
		
		String base64 = Base64.encodeBase64String(null);
		return base64;
	}
	
//	@GetMapping("/admin/" + ProjectConfig.project)
//	public ProjectDto[] project(Principal principal) {
//		List<ProjectDto> dtos = new ArrayList<>();
//		this.projectRepository.findAll().forEach(p -> {
//			dtos.add( DtoConverter.convertDto(p) );
//		});
//		return dtos.toArray(new ProjectDto[0]);
//	}
//	
//	@DeleteMapping("/admin/" + ProjectConfig.project + "/{id}")
//	public String project(Principal principal, @PathVariable("id") Long id) {
//		this.projectRepository.deleteById(id);
//		return "OK";
//	}
//	
//	@PutMapping("/admin/" + ProjectConfig.project)
//	public String projectput(Principal principal) {
//		this.projectRepository.save(ProjectEntity.builder().projectName("New Project@" + new Date().toString()).build());
//		return "OK";
//	}
//	
//	@PostMapping("/admin/" + ProjectConfig.project)
//	public String projectpost(Principal principal, @RequestBody ProjectDto dto) {
//		this.projectRepository.save(ProjectEntity.builder()
//				.id(dto.getId())
//				.projectName(dto.getName())
//				.type(dto.getType())
//				.build());
//		return "OK";
//	}
//
//	@PostMapping("/admin/" + ProjectConfig.testerTemplate)
//	public String testerTemplate(Principal principal, @RequestBody ProjectTesterTemplateDto dto) {
//		this.projectTesterTemplateRepository.save(ProjectTesterTemplateEntity.builder()
//				.id(dto.getId())
//				.keyword(dto.getKeyword())
//				.model(dto.getModel())
//				.build());
//		return "OK";
//	}
//		
//	@GetMapping("/admin/" + ProjectConfig.testPoint + "/{id}")
//	public TestPointDto testPoint(Principal principal, @PathVariable("id") Long id) {
//		TestPointDto ret = DtoConverter.convertDto( this.projectTestPointRepository.findById(id).get() );
//		return ret;
//	}
//	
//	@GetMapping("/admin/dutPakcagesByProject/{id}")
//	public DutPackageDto[] dutPakcagesByProject(Principal principal, @PathVariable("id") Long id) {
//		List<ProjectDutPackageEntity> dutPackages = this.projectRepository.findById(id).get().getDutPackages(); // TempDB.instance().dutPackageByProject(id);
//		
//		List<DutPackageDto> ret = new ArrayList<>();
//		for (ProjectDutPackageEntity dutPckage : dutPackages) {
//			ret.add(DtoConverter.convertDto(dutPckage));
//		}
//		return ret.toArray(new DutPackageDto[0]);
//	}
//	
//	@GetMapping("/admin/testPointByDut/{id}")
//	public TestPointDto[] testPointByDut(Principal principal, @PathVariable("id") Long id) {
//		//DutDto dutDto = DtoConverter.convertDto(TempDB.instance().dut(id));
//		List<TestPointDto> ret = new ArrayList<>();
//		
//		ProjectDutEntity dut = this.dutRepository.findById(id).get(); //TempDB.instance().dut(id);
//		for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//			ret.add(DtoConverter.convertDto(testPoint));
//		}
//		
//		TestPointDto[] array =  ret.toArray(new TestPointDto[0]);
//		return array;
//	}
//	
//	@GetMapping("/admin/testItemsByProject/{id}")
//	public TestItemDto[] testItemsByProject(Principal principal, @PathVariable("id") Long id) {
//		//DutDto dutDto = DtoConverter.convertDto(TempDB.instance().dut(id));
//		List<TestItemDto> ret = new ArrayList<>();
//		
//		ProjectEntity project = this.projectRepository.findById(id).get(); //TempDB.instance().project(id);	
//		for (ProjectDutPackageEntity dutPackage : project.getDutPackages()) {
//			for (ProjectDutEntity dut : dutPackage.getDuts()) {
//				for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//					for (ProjectTestItemEntity testItem : testPoint.getTestItems()) {
//						TestItemDto dto = DtoConverter.convertDto(testItem);
//						dto.setBase(dutPackage.getName() + "/" + dut.getDutName() + "/" + testPoint.getName());
//						ret.add(dto);
//					}
//				}
//			}
//			
//		}
//		
//		TestItemDto[] array =  ret.toArray(new TestItemDto[0]);
//		return array;
//	}
//	
//	@GetMapping("/admin/operator/{projectid}")
//	public ProjectUserDto[] operator(Principal principal, @PathVariable("projectid") Integer projectid) {
//		return DtoConverter.convertUserDto( this.projectUserRepository.findAll() ).toArray(new ProjectUserDto[0]);
//	}
//	
//	@GetMapping("/admin/tester/{projectid}")
//	public ProjectTesterDto[] teser(Principal principal, @PathVariable("projectid") Integer projectid) {
//		List<ProjectTesterDto> list = DtoConverter.convertTesterDto( this.projectTesterRepository.findAll() );
//		
//		Comparator<ProjectTesterDto> c = (o1, o2) -> (o1.getModel() + o1.getSerialNumber()).compareTo((o2.getModel() + o2.getSerialNumber()));
//		
//		ProjectTesterDto[] array = list.stream().sorted(c).toArray(v->new ProjectTesterDto[v]);
//		
//		return array;//list.toArray(new ProjectTesterDto[0]);
//	}
//	
//	@PostMapping("/admin/resultData")
//	public String rawData(Principal principal, @RequestBody TestResultPackageDto result) {
//		ProjectRawDataEntity rawData = ProjectRawDataEntity.builder().file(result.getRawData()).image(result.getRawData()).name(result.getRawDataName()).build();
//		
//		projectRawDataRepository.save(rawData);
//		
////		TempDB.instance().addRawData(rawData);
//		
//		for (TestResultDto d : result.getResults()) {
//			ProjectTestItemEntity testItem = this.projectTestItemRepository.findById(d.id).get();
//			if (testItem.getResultHistory() == null) {
//				testItem.setResultHistory(new ArrayList<>());
//			}
//			ProjectUserEntity user = this.projectUserRepository.findById(result.getOperator()).get();
//			ProjectTesterEntity tester = this.projectTesterRepository.findById(result.getTester()).get();
//			
//			ProjectTestResultEntity testResult = ProjectTestResultEntity.builder().operator(user).rawData(rawData).result(d.result).date(result.getDate())
//				.tester(tester).build();
//			
//			this.projectTestResultRepository.save(testResult);
//			
//			testItem.getResultHistory().add(testResult);
//			testItem.calculate();
//			
//			this.projectTestItemRepository.save(testItem);
//		}
//		
//		return "OK";
//	}
//	
//	@PostMapping("/admin/table/project_testitem_template")
//	public String project_testitem_template(Model model, Principal principal, @RequestBody ProjectTestItemTemplateDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}	
//	
//	@PostMapping("/admin/table/project_tester")
//	public String project_tester(Model model, Principal principal, @RequestBody ProjectTesterDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}
//
//	
//	@PostMapping("/admin/table/project_user")
//	public String project_user(Model model, Principal principal, @RequestBody ProjectUserDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}
//	
//	@PostMapping("/admin/table/project_tester_template")
//	public String project_tester_template(Model model, Principal principal, @RequestBody ProjectTesterTemplateDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}
//	
//	@GetMapping("/admin/inittet")
//	public String inittest(Principal principal) {
//		tempDB.createProject();
//		return "OK";
//	}
}
