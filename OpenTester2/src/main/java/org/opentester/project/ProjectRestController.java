package org.opentester.project;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;

import org.apache.commons.io.IOUtils;
import org.apache.tomcat.util.codec.binary.Base64;
import org.opentester.project.entity.CriteriaTemplateEntity;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.TestItemTemplateEntity;
import org.opentester.project.entity.TestPointEntity;
import org.opentester.project.entity.TesterEntity;
import org.opentester.project.entity.TesterSupplierEntity;
import org.opentester.project.entity.TesterTemplateEntity;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.TestItemRepository;
import org.opentester.project.repository.TestItemTemplateRepository;
import org.opentester.project.repository.TestPointRepository;
import org.opentester.project.repository.TesterRepository;
import org.opentester.project.repository.TesterSupplierRepository;
import org.opentester.project.repository.TesterTemplateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@RestController
//@RequestMapping("/api/project")
public class ProjectRestController {

	@GetMapping("/admin/image")
	public String getImg(@RequestParam("id") Integer id) throws IOException{
//		File fileImg = new File("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	    InputStream in = new DataInputStream("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	   return IOUtils.toByteArray(in);
//		byte[] bytes = tempDB.rawData(id).getImage(); //Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"));
		
		return Base64.encodeBase64String(null);
	}
	
	@GetMapping("/admin/rawData")
	public String rawData(@RequestParam("id") Integer id) {
//		byte[] bytes = tempDB.rawData(id).getContent();
//		try {
//			Files.write(Paths.get("C:\\Users\\miyak\\Desktop\\otdr2.png"), bytes, StandardOpenOption.CREATE_NEW);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}	
//		return Base64.encodeBase64String(bytes);
		
		String base64 = Base64.encodeBase64String(null);
		return base64;
	}
	
	@Autowired
	private TestItemTemplateRepository testItemTemplateRepository;
	@Autowired
	private CriteriaTemplateRepository criteriaTemplateRepository;
	
	@Autowired
	private TesterSupplierRepository  testerSupplierRepository;
	
	@Autowired
	private TesterTemplateRepository testerTemplateRepository;
	
	@Autowired
	private TestItemRepository testItemRepository;
	
	@Autowired
	private TestPointRepository testPointRepository;
	
	@Autowired
	private TesterRepository testerRepository;
	
	@Autowired
	private TypeResourceManager typeResourceManager;
	
	@PostMapping(path={"/admin/upload/{type}/{parent}", "/admin/upload/{type}"})
	public String upload(@PathVariable("type") String type, @PathVariable(name="parent", required=false) Long parent, @RequestParam("file_data") MultipartFile file,
			RedirectAttributes redirectAttributes) throws IOException {
//		Path dst = Path.of("C:\\Users\\miyak\\Downloads\\", file.getOriginalFilename());
//		Files.copy(file.getInputStream(), dst);
		String string = IOUtils.toString(file.getInputStream(), Charset.defaultCharset());
		String[] lines = string.split("\n");
		for (String line : lines) {
			
			if (type.equals(ProjectConfig.criteriaTemplate)) {
				String[] tmp = line.split(",");
				String name = tmp[0];
				String key = tmp[1];
				String criteria = tmp[2];
				TestItemTemplateEntity testItemTemplate = testItemTemplateRepository.findByTestkey(key);
				CriteriaTemplateEntity criteriaEntity = CriteriaTemplateEntity.builder().testItemTemplate(testItemTemplate).name(name).criteriaFormula(criteria).build();
				criteriaTemplateRepository.save(criteriaEntity);
			}
			else if (type.equals(ProjectConfig.testerTemplate)) {
				String[] tmp = line.split(",");
				String model = tmp[0];
				String name = tmp[1];
				String image = tmp[2];
				String url = tmp[3];		
				String vendor = tmp[4];
				String keyword = tmp[5];
				String[] testitems = tmp[6].split("\\|");

				TesterTemplateEntity entity = this.testerTemplateRepository.findByModel(model);
				Long entityId  = null;
				if (entity != null) {
					entityId = entity.getId();
				}
				TesterTemplateEntity testerTemplateEntity  = TesterTemplateEntity.builder()
						.id(entityId)
						.keyword(keyword)
						.url(url)
						.model(model)
						.image(image)
						.name(name)
						.supplier(testerSupplierRepository.findByName(vendor))
						.testItemTemplates(testitems!=null ? Arrays.asList(testitems).stream().map(key -> testItemTemplateRepository.findByTestkey(key)).collect(Collectors.toList()):null)
						.build();
				this.testerTemplateRepository.save(testerTemplateEntity);
			}
			else if (type.equals(ProjectConfig.tester)) {
				String[] tmp = line.split(",");
				String model = tmp[0];
				String serial = tmp[1];
				TesterTemplateEntity entity = this.testerTemplateRepository.findByModel(model);
				
				TesterEntity e = TesterEntity.builder().testerTemplate(entity).serialNumber(serial).build();
				testerRepository.save(e);
			}
			else if (type.equals(ProjectConfig.testItem)) {
				String[] tmp = line.split(",");
				String name = tmp[0];
				
				TestPointEntity testPoint = testPointRepository.findById(parent).get();
				
				CriteriaTemplateEntity e = criteriaTemplateRepository.findByName(name);
				testItemRepository.save(TestItemEntity.builder().criteria(e).testPoint(testPoint).build());
			}
		}
		return "redirect:/result.html";
	}
	
//	@GetMapping("/admin/" + ProjectConfig.project)
//	public ProjectDto[] project(Principal principal) {
//		List<ProjectDto> dtos = new ArrayList<>();
//		this.projectRepository.findAll().forEach(p -> {
//			dtos.add( DtoConverter.convertDto(p) );
//		});
//		return dtos.toArray(new ProjectDto[0]);
//	}
//	
//	@DeleteMapping("/admin/" + ProjectConfig.project + "/{id}")
//	public String project(Principal principal, @PathVariable("id") Long id) {
//		this.projectRepository.deleteById(id);
//		return "OK";
//	}
//	
//	@PutMapping("/admin/" + ProjectConfig.project)
//	public String projectput(Principal principal) {
//		this.projectRepository.save(ProjectEntity.builder().projectName("New Project@" + new Date().toString()).build());
//		return "OK";
//	}
//	
//	@PostMapping("/admin/" + ProjectConfig.project)
//	public String projectpost(Principal principal, @RequestBody ProjectDto dto) {
//		this.projectRepository.save(ProjectEntity.builder()
//				.id(dto.getId())
//				.projectName(dto.getName())
//				.type(dto.getType())
//				.build());
//		return "OK";
//	}
//
//	@PostMapping("/admin/" + ProjectConfig.testerTemplate)
//	public String testerTemplate(Principal principal, @RequestBody ProjectTesterTemplateDto dto) {
//		this.projectTesterTemplateRepository.save(ProjectTesterTemplateEntity.builder()
//				.id(dto.getId())
//				.keyword(dto.getKeyword())
//				.model(dto.getModel())
//				.build());
//		return "OK";
//	}
//		
//	@GetMapping("/admin/" + ProjectConfig.testPoint + "/{id}")
//	public TestPointDto testPoint(Principal principal, @PathVariable("id") Long id) {
//		TestPointDto ret = DtoConverter.convertDto( this.projectTestPointRepository.findById(id).get() );
//		return ret;
//	}
//	
//	@GetMapping("/admin/dutPakcagesByProject/{id}")
//	public DutPackageDto[] dutPakcagesByProject(Principal principal, @PathVariable("id") Long id) {
//		List<ProjectDutPackageEntity> dutPackages = this.projectRepository.findById(id).get().getDutPackages(); // TempDB.instance().dutPackageByProject(id);
//		
//		List<DutPackageDto> ret = new ArrayList<>();
//		for (ProjectDutPackageEntity dutPckage : dutPackages) {
//			ret.add(DtoConverter.convertDto(dutPckage));
//		}
//		return ret.toArray(new DutPackageDto[0]);
//	}
//	
//	@GetMapping("/admin/testPointByDut/{id}")
//	public TestPointDto[] testPointByDut(Principal principal, @PathVariable("id") Long id) {
//		//DutDto dutDto = DtoConverter.convertDto(TempDB.instance().dut(id));
//		List<TestPointDto> ret = new ArrayList<>();
//		
//		ProjectDutEntity dut = this.dutRepository.findById(id).get(); //TempDB.instance().dut(id);
//		for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//			ret.add(DtoConverter.convertDto(testPoint));
//		}
//		
//		TestPointDto[] array =  ret.toArray(new TestPointDto[0]);
//		return array;
//	}
//	
//	@GetMapping("/admin/testItemsByProject/{id}")
//	public TestItemDto[] testItemsByProject(Principal principal, @PathVariable("id") Long id) {
//		//DutDto dutDto = DtoConverter.convertDto(TempDB.instance().dut(id));
//		List<TestItemDto> ret = new ArrayList<>();
//		
//		ProjectEntity project = this.projectRepository.findById(id).get(); //TempDB.instance().project(id);	
//		for (ProjectDutPackageEntity dutPackage : project.getDutPackages()) {
//			for (ProjectDutEntity dut : dutPackage.getDuts()) {
//				for (ProjectTestPointEntity testPoint : dut.getTestPoints()) {
//					for (ProjectTestItemEntity testItem : testPoint.getTestItems()) {
//						TestItemDto dto = DtoConverter.convertDto(testItem);
//						dto.setBase(dutPackage.getName() + "/" + dut.getDutName() + "/" + testPoint.getName());
//						ret.add(dto);
//					}
//				}
//			}
//			
//		}
//		
//		TestItemDto[] array =  ret.toArray(new TestItemDto[0]);
//		return array;
//	}
//	
//	@GetMapping("/admin/operator/{projectid}")
//	public ProjectUserDto[] operator(Principal principal, @PathVariable("projectid") Integer projectid) {
//		return DtoConverter.convertUserDto( this.projectUserRepository.findAll() ).toArray(new ProjectUserDto[0]);
//	}
//	
//	@GetMapping("/admin/tester/{projectid}")
//	public ProjectTesterDto[] teser(Principal principal, @PathVariable("projectid") Integer projectid) {
//		List<ProjectTesterDto> list = DtoConverter.convertTesterDto( this.projectTesterRepository.findAll() );
//		
//		Comparator<ProjectTesterDto> c = (o1, o2) -> (o1.getModel() + o1.getSerialNumber()).compareTo((o2.getModel() + o2.getSerialNumber()));
//		
//		ProjectTesterDto[] array = list.stream().sorted(c).toArray(v->new ProjectTesterDto[v]);
//		
//		return array;//list.toArray(new ProjectTesterDto[0]);
//	}
//	
//	@PostMapping("/admin/resultData")
//	public String rawData(Principal principal, @RequestBody TestResultPackageDto result) {
//		ProjectRawDataEntity rawData = ProjectRawDataEntity.builder().file(result.getRawData()).image(result.getRawData()).name(result.getRawDataName()).build();
//		
//		projectRawDataRepository.save(rawData);
//		
////		TempDB.instance().addRawData(rawData);
//		
//		for (TestResultDto d : result.getResults()) {
//			ProjectTestItemEntity testItem = this.projectTestItemRepository.findById(d.id).get();
//			if (testItem.getResultHistory() == null) {
//				testItem.setResultHistory(new ArrayList<>());
//			}
//			ProjectUserEntity user = this.projectUserRepository.findById(result.getOperator()).get();
//			ProjectTesterEntity tester = this.projectTesterRepository.findById(result.getTester()).get();
//			
//			ProjectTestResultEntity testResult = ProjectTestResultEntity.builder().operator(user).rawData(rawData).result(d.result).date(result.getDate())
//				.tester(tester).build();
//			
//			this.projectTestResultRepository.save(testResult);
//			
//			testItem.getResultHistory().add(testResult);
//			testItem.calculate();
//			
//			this.projectTestItemRepository.save(testItem);
//		}
//		
//		return "OK";
//	}
//	
//	@PostMapping("/admin/table/project_testitem_template")
//	public String project_testitem_template(Model model, Principal principal, @RequestBody ProjectTestItemTemplateDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}	
//	
//	@PostMapping("/admin/table/project_tester")
//	public String project_tester(Model model, Principal principal, @RequestBody ProjectTesterDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}
//
//	
//	@PostMapping("/admin/table/project_user")
//	public String project_user(Model model, Principal principal, @RequestBody ProjectUserDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}
//	
//	@PostMapping("/admin/table/project_tester_template")
//	public String project_tester_template(Model model, Principal principal, @RequestBody ProjectTesterTemplateDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//		return "OK";
//	}
//	
//	@GetMapping("/admin/inittet")
//	public String inittest(Principal principal) {
//		tempDB.createProject();
//		return "OK";
//	}
}
