package org.opentester.project;

import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.http.HttpHeaders;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.pdfbox.io.IOUtils;
import org.apache.tomcat.util.codec.binary.Base64;
import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TestResultDto;
import org.opentester.project.dto.TestResultPackageDto;
import org.opentester.project.dto.TesterSupplierDto;
import org.opentester.project.entity.DtoConverter;
import org.opentester.project.entity.Dut;
import org.opentester.project.entity.DutPackage;
import org.opentester.project.entity.Project;
import org.opentester.project.entity.ProjectTestItemTemplate;
import org.opentester.project.entity.RawData;
import org.opentester.project.entity.TestItem;
import org.opentester.project.entity.TestPoint;
import org.opentester.project.entity.TestResult;
import org.opentester.project.entity.TesterSupplier;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/project")
public class ProjectRestController {

	@GetMapping("/projlistect")
	public List<Project> project() {
			return TempDB.instance().projects();
	}
	
	@GetMapping("/admin/image")
	public String getImg(@RequestParam("id") Integer id) throws IOException{
//		File fileImg = new File("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	    InputStream in = new DataInputStream("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	   return IOUtils.toByteArray(in);
		byte[] bytes = TempDB.instance().rawData(id).getImage(); //Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"));
		
		return Base64.encodeBase64String(bytes);
	}
	
	@GetMapping("/admin/rawData")
	public String rawData(@RequestParam("id") Integer id) {
		byte[] bytes = TempDB.instance().rawData(id).getFile();
//		try {
//			Files.write(Paths.get("C:\\Users\\miyak\\Desktop\\otdr2.png"), bytes, StandardOpenOption.CREATE_NEW);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}	
//		return Base64.encodeBase64String(bytes);
		
		String base64 = Base64.encodeBase64String(bytes);
		return base64;
	}
	
	@GetMapping("/admin/project")
	public ProjectDto[] project(Principal principal) {
		List<ProjectDto> dtos = new ArrayList<>();
		TempDB.instance().projects().forEach(p -> {
			dtos.add( DtoConverter.convertDto(p) );
		});
		return dtos.toArray(new ProjectDto[0]);
	}
	
	@GetMapping("/admin/testPoint/{id}")
	public TestPointDto testPoint(Principal principal, @PathVariable("id") Integer id) {
		TestPointDto ret = DtoConverter.convertDto(TempDB.instance().testPoint(id));
		return ret;
	}
	
	@GetMapping("/admin/dutPakcagesByProject/{id}")
	public DutPackageDto[] dutPakcagesByProject(Principal principal, @PathVariable("id") Integer id) {
		List<DutPackage> dutPackages = TempDB.instance().dutPackageByProject(id);
		
		List<DutPackageDto> ret = new ArrayList<>();
		for (DutPackage dutPckage : dutPackages) {
			ret.add(DtoConverter.convertDto(dutPckage));
		}
		return ret.toArray(new DutPackageDto[0]);
	}
	
	@GetMapping("/admin/testPointByDut/{id}")
	public TestPointDto[] testPointByDut(Principal principal, @PathVariable("id") Integer id) {
		//DutDto dutDto = DtoConverter.convertDto(TempDB.instance().dut(id));
		List<TestPointDto> ret = new ArrayList<>();
		
		Dut dut = TempDB.instance().dut(id);
		for (TestPoint testPoint : dut.getTestPoints()) {
			ret.add(DtoConverter.convertDto(testPoint));
		}
		
		TestPointDto[] array =  ret.toArray(new TestPointDto[0]);
		return array;
	}
	
	@GetMapping("/admin/testItemsByProject/{id}")
	public TestItemDto[] testItemsByProject(Principal principal, @PathVariable("id") Integer id) {
		//DutDto dutDto = DtoConverter.convertDto(TempDB.instance().dut(id));
		List<TestItemDto> ret = new ArrayList<>();
		
		Project project = TempDB.instance().project(id);	
		for (DutPackage dutPackage : project.getDutPackages()) {
			for (Dut dut : dutPackage.getDuts()) {
				for (TestPoint testPoint : dut.getTestPoints()) {
					for (TestItem testItem : testPoint.getTestItems()) {
						TestItemDto dto = DtoConverter.convertDto(testItem);
						dto.setBase(dutPackage.getName() + "/" + dut.getDutName() + "/" + testPoint.getName());
						ret.add(dto);
					}
				}
			}
			
		}
		
		TestItemDto[] array =  ret.toArray(new TestItemDto[0]);
		return array;
	}
	
	@GetMapping("/admin/operator/{projectid}")
	public ProjectUserDto[] operator(Principal principal, @PathVariable("projectid") Integer projectid) {
		return DtoConverter.convertUserDto(TempDB.instance().users()).toArray(new ProjectUserDto[0]);
	}
	
	@GetMapping("/admin/tester/{projectid}")
	public ProjectTesterDto[] teser(Principal principal, @PathVariable("projectid") Integer projectid) {
		List<ProjectTesterDto> list = DtoConverter.convertDto(TempDB.instance().testers());
		
		Comparator<ProjectTesterDto> c = (o1, o2) -> (o1.getModel() + o1.getSerialNumber()).compareTo((o2.getModel() + o2.getSerialNumber()));
		
		ProjectTesterDto[] array = list.stream().sorted(c).toArray(v->new ProjectTesterDto[v]);
		
		return array;//list.toArray(new ProjectTesterDto[0]);
	}
	
	@PostMapping("/admin/resultData")
	public String rawData(Principal principal, @RequestBody TestResultPackageDto result) {
		RawData rawData = RawData.builder().file(result.getRawData()).image(result.getRawData()).name(result.getRawDataName()).build();
		TempDB.instance().addRawData(rawData);
		
		for (TestResultDto d : result.getResults()) {
			TestItem testItem = TempDB.instance().testItem(d.id);
			if (testItem.getResultHistory() == null) {
				testItem.setResultHistory(new ArrayList<>());
			}
			testItem.getResultHistory().add(TestResult.builder().operator(TempDB.instance().user(result.getOperator())).rawData(rawData).result(d.result).date(result.getDate())
					.tester(TempDB.instance().tester(result.getTester()))
					.build());
			testItem.calculate();
		}
		
		return "OK";
	}
	
	@PostMapping("/admin/table/project_testitem_template")
	public String project_testitem_template(Model model, Principal principal, @RequestBody ProjectTestItemTemplateDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		return "OK";
	}	
	
	@PostMapping("/admin/table/project_tester")
	public String project_tester(Model model, Principal principal, @RequestBody ProjectTesterDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		return "OK";
	}

	
	@PostMapping("/admin/table/project_user")
	public String project_user(Model model, Principal principal, @RequestBody ProjectUserDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		return "OK";
	}
	
	@PostMapping("/admin/table/project_tester_template")
	public String project_tester_template(Model model, Principal principal, @RequestBody ProjectTesterTemplateDto dto) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
		return "OK";
	}
	
}
