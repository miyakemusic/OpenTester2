package org.opentester.project;

import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.http.HttpHeaders;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.pdfbox.io.IOUtils;
import org.apache.tomcat.util.codec.binary.Base64;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TestResultDto;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/project")
public class ProjectRestController {

	@GetMapping("/projlistect")
	public List<Project> project() {
			return TempDB.instance().projects();
	}
	
	@GetMapping("/admin/image")
	public String getImg(@RequestParam("id") Integer id) throws IOException{
//		File fileImg = new File("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	    InputStream in = new DataInputStream("C:\\Users\\miyak\\Desktop\\otdr.PNG");
//	   return IOUtils.toByteArray(in);
		byte[] bytes = TempDB.instance().rawData(id).getImage(); //Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"));
		
		return Base64.encodeBase64String(bytes);
	}
	
	@GetMapping("/admin/rawData")
	public String rawData(@RequestParam("id") Integer id) {
		byte[] bytes = TempDB.instance().rawData(id).getFile();
//		try {
//			Files.write(Paths.get("C:\\Users\\miyak\\Desktop\\otdr2.png"), bytes, StandardOpenOption.CREATE_NEW);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}	
//		return Base64.encodeBase64String(bytes);
		
		String base64 = Base64.encodeBase64String(bytes);
		return base64;
	}
	
	@GetMapping("/admin/testPoint/{id}")
	public TestPointDto testItem(Principal principal, @PathVariable("id") Integer id) {
		TestPointDto ret = DtoConverter.convertDto(TempDB.instance().testPoint(id));
		return ret;
	}
	
	@PostMapping("/admin/resultData")
	public String rawData(Principal principal, @RequestBody TestResultPackageDto result) {
		RawData rawData = RawData.builder().file(result.getRawData()).image(result.getRawData()).name(result.getRawDataName()).build();
		TempDB.instance().addRawData(rawData);
		
		for (TestResultDto d : result.getResults()) {
			TestItem testItem = TempDB.instance().testItem(d.id);
			if (testItem.getResultHistory() == null) {
				testItem.setResultHistory(new ArrayList<>());
			}
			testItem.getResultHistory().add(TestResult.builder().operator(TempDB.instance().user(result.getOperator())).rawData(rawData).result(d.result).date(result.getDate())
					.tester(TempDB.instance().tester(result.getTester()))
					.build());
			testItem.calculate();
		}
		
		return "OK";
	}
	

}
