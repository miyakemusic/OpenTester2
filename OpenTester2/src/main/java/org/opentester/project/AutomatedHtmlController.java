package org.opentester.project;

import java.security.Principal;
import java.util.Map;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.ProjectCriteriaTemplateDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectDutDto;
import org.opentester.project.dto.ProjectSubRoleDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TestResultDto;
import org.opentester.project.dto.TesterSupplierDto;
import org.opentester.project.dto.ProjectRawDataDto;
import org.opentester.project.entity.PassFailCalculator;
import org.opentester.project.entity.ProjectSubRoleEntity;
import org.opentester.project.entity.ProjectTestItemTemplateEntity;
import org.opentester.project.entity.ProjectTestResultEntity;
import org.opentester.project.entity.ProjectTesterEntity;
import org.opentester.project.entity.ProjectTesterSupplierEntity;
import org.opentester.project.entity.ProjectTesterTemplateEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.entity.mapper.ProjectCriteriaTemplateMapper;
import org.opentester.project.entity.mapper.ProjectDutMapper;
import org.opentester.project.entity.mapper.ProjectDutPackageMapper;
import org.opentester.project.entity.mapper.ProjectMapper;
import org.opentester.project.entity.mapper.ProjectSubRoleMapper;
import org.opentester.project.entity.mapper.ProjectTestItemMapper;
import org.opentester.project.entity.mapper.ProjectTestItemTemplateMapper;
import org.opentester.project.entity.mapper.ProjectTestPointMapper;
import org.opentester.project.entity.mapper.ProjectTestResultMapper;
import org.opentester.project.entity.mapper.ProjectTesterMapper;
import org.opentester.project.entity.mapper.ProjectTesterSupplierMapper;
import org.opentester.project.entity.mapper.ProjectTesterTemplateMapper;
import org.opentester.project.entity.mapper.ProjectUserMapper;
import org.opentester.project.entity.mapper.ProjectRawDataMapper;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectDutRepository;
import org.opentester.project.repository.ProjectRawDataRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectSubRoleRepository;
import org.opentester.project.repository.ProjectTestItemRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectTestResultRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.opentester.project.trash.DtoConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class AutomatedHtmlController {
	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;

	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;

	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;

	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private EntityResourceManager entityResourceManager;
	
	@Autowired 
	private ProjectMapper projectMapper;
	
	@Autowired 
	private ProjectUserMapper projectUserMapper;
	
	@Autowired 
	private ProjectTesterSupplierMapper projectTesterSupplierMapper;
	
	@Autowired 
	private ProjectTesterTemplateMapper projectTesterTemplateMapper;
	
	@Autowired 
	private ProjectTestItemTemplateMapper projectTestItemTemplateMapper;
	
	@Autowired 
	private ProjectTesterMapper projectTesterMapper;
	
	@Autowired
	private ProjectSubRoleMapper projectSubRoleMapper;
	
	@Autowired
	private DutPackageRepository projectDutPackageRepository;
	
	@Autowired
	private ProjectDutPackageMapper projectDutPackageMapper;

	@Autowired
	private ProjectDutRepository projectDutRepository;
	
	@Autowired
	private ProjectDutMapper projectDutMapper;
	
	@Autowired
	private ProjectTestPointRepository projectTestPointRepository;
	
	@Autowired
	private ProjectTestPointMapper projectTestPointMapper;
	
	@Autowired
	private ProjectTestItemRepository projectTestItemRepository;
	
	@Autowired
	private ProjectTestItemMapper projectTestItemMapper;
	
	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	
	@Autowired
	private ProjectCriteriaTemplateMapper projectCriteriaTemplateMapper;

	@Autowired
	private ProjectTestResultRepository projectTestResultRepository;
	
	@Autowired
	private ProjectTestResultMapper projectTestResultMapper;
	
	@Autowired
	private ProjectRawDataRepository projectRawDataRepository;
	
	@Autowired
	private ProjectRawDataMapper projectRawDataMapper;
	
	@GetMapping("/admin/project_table_html/{type}")
	public String project_table_html(Model model, Principal principal, @PathVariable("type") String type) {
		return entityResourceManager.getTable(type);
	}
	
	@GetMapping("/admin/project_table_html/{type}/{type_id}")
	public String project_table_html(Model model, Principal principal, @PathVariable("type") String type, @PathVariable("type_id") String type_id
			) {
		return entityResourceManager.getTable(type, type_id);
	}
	
	@GetMapping("/admin/project_fields_html/{type}")
	public String project_dialog_html(Model model, Principal principal, @PathVariable("type") String type
			,@RequestParam(name = "parent", required = false) Long parent
			) {
		return entityResourceManager.getDialogHtml(type, null, parent);
	}
	
	@GetMapping("/admin/project_fields_html/{type}/{id}")
	public String project_dialog_html(Model model, Principal principal, @PathVariable("type") String type, @PathVariable("id") Long id
			,@RequestParam(name = "parent", required = false) Long parent
			) {
		return entityResourceManager.getDialogHtml(type, id, parent);
	}
	
	@DeleteMapping("/admin/project_fields_html/{type}/{id}")
	public String project_dialog_html_del(Model model, Principal principal, @PathVariable("type") String type, @PathVariable("id") Long id) {
		entityResourceManager.delete(type, id);
		return "OK";
	}
	

	
	@GetMapping("/api/project/admin/single_select_html/{type}")
	public String single_select_html(Model model, Principal principal, @PathVariable("type") String type) {
		return entityResourceManager.getSingleSelectionHtml(type);
	}
	
	@GetMapping("/api/project/admin/multi_select_html/{type}")
	public String multi_select_html(Model model, Principal principal, @PathVariable("type") String type) {
		return entityResourceManager.getMultiSelectionHtml(type);
	}
	
	@PostMapping("/api/project/admin/" + ProjectConfig.project)
	public String supplier(Principal principal, @RequestBody ProjectDto dto) {
		this.projectRepository.save(projectMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping("/api/project/admin/" + ProjectConfig.supplier)
	public String supplier(Principal principal, @RequestBody TesterSupplierDto dto) {
		this.projectTesterSupplierRepository.save(projectTesterSupplierMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping("/api/project/admin/" + ProjectConfig.testerTemplate)
	public String testerTemplate(Principal principal, @RequestBody ProjectTesterTemplateDto dto) {
		this.projectTesterTemplateRepository.save(projectTesterTemplateMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping("/api/project/admin/" + ProjectConfig.testItemTemplate)
	public String testItemTemplate(Principal principal, @RequestBody ProjectTestItemTemplateDto dto) {
		this.projectTestItemTemplateRepository.save(projectTestItemTemplateMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping("/api/project/admin/" + ProjectConfig.tester)
	public String tester(Principal principal, @RequestBody ProjectTesterDto dto) {
		this.projectTesterRepository.save(projectTesterMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.user)
	public String user(Principal principal, @RequestBody ProjectUserDto dto) {
		this.projectUserRepository.save(projectUserMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.subRole)
	public String subRole(Principal principal, @RequestBody ProjectSubRoleDto dto) {
		this.projectSubRoleRepository.save(this.projectSubRoleMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.dutPackage)
	public String subRole(Principal principal, @RequestBody DutPackageDto dto) {
		this.projectDutPackageRepository.save(this.projectDutPackageMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.dut)
	public String subRole(Principal principal, @RequestBody ProjectDutDto dto) {
		this.projectDutRepository.save(this.projectDutMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.testPoint)
	public String testPoint(Principal principal, @RequestBody TestPointDto dto) {
		this.projectTestPointRepository.save(this.projectTestPointMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.testItem)
	public String testItem(Principal principal, @RequestBody TestItemDto dto) {
		this.projectTestItemRepository.save(this.projectTestItemMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.criteria)
	public String criteria(Principal principal, @RequestBody ProjectCriteriaTemplateDto dto) {
		this.projectCriteriaTemplateRepository.save(this.projectCriteriaTemplateMapper.toEntity(dto));
		return "OK";
	}	
	
	@Autowired
	private PassFailCalculator passFailCalculator;
	@PostMapping("/api/project/admin/" + ProjectConfig.result)
	public String result(Principal principal, @RequestBody TestResultDto dto) {
		ProjectTestResultEntity e = this.projectTestResultRepository.save(this.projectTestResultMapper.toEntity(dto));
		
//		ProjectTestResultEntity e = this.projectTestResultRepository.findById(dto.getId()).get();
		e.setStatus(passFailCalculator.judgePassFail(e.getTestItem().getCriteria().getCriteriaFormula(), e.getResult()).name());
		this.projectTestResultRepository.save(e);
		
		return "OK";
	}	
	
	@PostMapping("/api/project/admin/" + ProjectConfig.rawData)
	public String rawData(Principal principal, @RequestBody ProjectRawDataDto dto) {
		this.projectRawDataRepository.save(this.projectRawDataMapper.toEntity(dto));
		return "OK";
	}	
}

