package org.opentester.project;

import java.security.Principal;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.opentester.project.dto.TestItemReadOnlyDto;
import org.opentester.project.dto.DutPackageDto;
import org.opentester.project.dto.CriteriaTemplateDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.DutDto;
import org.opentester.project.dto.SubRoleDto;
import org.opentester.project.dto.TestItemTemplateDto;
import org.opentester.project.dto.TesterDto;
import org.opentester.project.dto.TesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TestResultDto;
import org.opentester.project.dto.TestResultPackageDto;
import org.opentester.project.dto.TesterSupplierDto;
import org.opentester.project.dto.RawDataDto;
import org.opentester.project.entity.PassFailCalculator;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.RawDataEntity;
import org.opentester.project.entity.TestResultEntity;
import org.opentester.project.entity.mapper.DateMapper;
import org.opentester.project.entity.mapper.CriteriaTemplateMapper;
import org.opentester.project.entity.mapper.DutMapper;
import org.opentester.project.entity.mapper.DutPackageMapper;
import org.opentester.project.entity.mapper.ProjectMapper;
import org.opentester.project.entity.mapper.SubRoleMapper;
import org.opentester.project.entity.mapper.TestItemMapper;
import org.opentester.project.entity.mapper.TestItemTemplateMapper;
import org.opentester.project.entity.mapper.TestPointMapper;
import org.opentester.project.entity.mapper.TestResultMapper;
import org.opentester.project.entity.mapper.TesterMapper;
import org.opentester.project.entity.mapper.TesterSupplierMapper;
import org.opentester.project.entity.mapper.TesterTemplateMapper;
import org.opentester.project.entity.mapper.ProjectUserMapper;
import org.opentester.project.entity.mapper.RawDataMapper;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.RawDataRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.SubRoleRepository;
import org.opentester.project.repository.TestItemRepository;
import org.opentester.project.repository.TestItemTemplateRepository;
import org.opentester.project.repository.TestPointRepository;
import org.opentester.project.repository.TestResultRepository;
import org.opentester.project.repository.TesterRepository;
import org.opentester.project.repository.TesterSupplierRepository;
import org.opentester.project.repository.TesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class AutomatedHtmlController {
	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private TesterSupplierRepository projectTesterSupplierRepository;

	@Autowired
	private TesterTemplateRepository projectTesterTemplateRepository;

	@Autowired
	private TestItemTemplateRepository projectTestItemTemplateRepository;

	@Autowired
	private TesterRepository projectTesterRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private SubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private EntityResourceManager entityResourceManager;
	
	@Autowired 
	private ProjectMapper projectMapper;
	
	@Autowired 
	private ProjectUserMapper projectUserMapper;
	
	@Autowired 
	private TesterSupplierMapper projectTesterSupplierMapper;
	
	@Autowired 
	private TesterTemplateMapper projectTesterTemplateMapper;
	
	@Autowired 
	private TestItemTemplateMapper projectTestItemTemplateMapper;
	
	@Autowired 
	private TesterMapper projectTesterMapper;
	
	@Autowired
	private SubRoleMapper projectSubRoleMapper;
	
	@Autowired
	private DutPackageRepository projectDutPackageRepository;
	
	@Autowired
	private DutPackageMapper projectDutPackageMapper;

	@Autowired
	private DutRepository projectDutRepository;
	
	@Autowired
	private DutMapper projectDutMapper;
	
	@Autowired
	private TestPointRepository projectTestPointRepository;
	
	@Autowired
	private TestPointMapper projectTestPointMapper;
	
	@Autowired
	private TestItemRepository projectTestItemRepository;
	
	@Autowired
	private TestItemMapper projectTestItemMapper;
	
	@Autowired
	private CriteriaTemplateRepository projectCriteriaTemplateRepository;
	
	@Autowired
	private CriteriaTemplateMapper projectCriteriaTemplateMapper;

	@Autowired
	private TestResultRepository projectTestResultRepository;
	
	@Autowired
	private TestResultMapper projectTestResultMapper;
	
	@Autowired
	private RawDataRepository projectRawDataRepository;
	
	@Autowired
	private RawDataMapper projectRawDataMapper;
	
	@GetMapping(path={"/admin/project_table_html/{type}", "/admin/project_table_html/{type}/{type_id}"})
	public String project_table_html(Model model, Principal principal, @PathVariable("type") String type, 
			@PathVariable(name = "type_id", required = false) String type_id
			) {
		return entityResourceManager.getTable(type, type_id);
	}
	
	@GetMapping(path={"/admin/project_fields_html/{type}", "/admin/project_fields_html/{type}/{id}"})
	public String project_dialog_html(Model model, Principal principal, @PathVariable("type") String type, 
			@PathVariable(name = "id", required = false) Long id, @RequestParam(name = "parent", required = false) Long parent
			) {
		return entityResourceManager.getDialogHtml(type, id, parent);
	}
	
	@DeleteMapping("/admin/project_fields_html/{type}/{id}")
	public String project_dialog_html_del(Model model, Principal principal, @PathVariable("type") String type, @PathVariable("id") Long id) {
		entityResourceManager.delete(type, id);
		return "OK";
	}
	
	@GetMapping(ProjectConfig.baseURL + "single_select_html/{type}")
	public String single_select_html(Model model, Principal principal, @PathVariable("type") String type) {
		return entityResourceManager.getSingleSelectionHtml(type);
	}
	
	@GetMapping(ProjectConfig.baseURL + "multi_select_html/{type}")
	public String multi_select_html(Model model, Principal principal, @PathVariable("type") String type) {
		return entityResourceManager.getMultiSelectionHtml(type);
	}
	
	@PostMapping(ProjectConfig.baseURL + ProjectConfig.project)
	public String supplier(Principal principal, @RequestBody ProjectDto dto) {
		this.projectRepository.save(projectMapper.toEntity(dto));
		return "OK";
	}
	
	@GetMapping(path={ProjectConfig.baseURL + ProjectConfig.project, ProjectConfig.baseURL + ProjectConfig.project + "/{id}"})
	public List<ProjectDto> supplier(Principal principal, @PathVariable(name="id", required=false) Long id) {
		if (id == null) {
			return projectMapper.toDtoList(this.projectRepository.findAll());
		}
		else {
			return Arrays.asList(projectMapper.toDto(this.projectRepository.findById(id).get()));
		}
	}
	
	@GetMapping(path=ProjectConfig.baseURL + "testItemReadOnly")
	public List<TestItemReadOnlyDto> testItemReadOnly(Principal principal, 
			@RequestParam(name=ProjectConfig.project, required=false) Long projectid) {
		ProjectEntity project = this.projectRepository.findById(projectid).get();
		List<TestItemReadOnlyDto> ret = project.getDutPackages().stream().flatMap(dp -> dp.getDuts().stream().flatMap(dut -> dut.getTestPoints().stream()
				.flatMap(tp -> tp.getTestItems().stream()
						.map(ti -> TestItemReadOnlyDto.builder().id(ti.getId()).description(ti.getCriteria().getTestItemTemplate().getDescription()).testItem(ti.getCriteria().getTestItemTemplate().getTestkey()).criteria(ti.getCriteria().getCriteriaFormula()).testPoint(tp.getName()).dut(dut.getName()).dutPackage(dp.getName()).build())))).collect(Collectors.toList());
		
		return ret;
	}
	
	@PostMapping(ProjectConfig.baseURL + ProjectConfig.dutPackage)
	public String subRole(Principal principal, @RequestBody DutPackageDto dto) {
		this.projectDutPackageRepository.save(this.projectDutPackageMapper.toEntity(dto));
		return "OK";
	}
	
	@GetMapping(path={ProjectConfig.baseURL +  ProjectConfig.dutPackage, ProjectConfig.baseURL +  ProjectConfig.dutPackage + "/{id}"})
	public List<DutPackageDto> subRole(Principal principal, @PathVariable(name="id", required=false) Long id,
			@RequestParam(name=ProjectConfig.project, required=false) Long projectid) {
		if (projectid != null) {
			return this.projectDutPackageMapper.toDtoList(this.projectDutPackageRepository.findByProject_id(projectid));
		}
		else if (id != null) {
			return Arrays.asList(this.projectDutPackageMapper.toDto(this.projectDutPackageRepository.findById(id).get()));
		}
		else {
			return this.projectDutPackageMapper.toDtoList(this.projectDutPackageRepository.findAll());
		}
	}
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.dut)
	public String subRole(Principal principal, @RequestBody DutDto dto) {
		this.projectDutRepository.save(this.projectDutMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.testPoint)
	public String testPoint(Principal principal, @RequestBody TestPointDto dto) {
		this.projectTestPointRepository.save(this.projectTestPointMapper.toEntity(dto));
		return "OK";
	}	
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.testItem)
	public String testItem(Principal principal, @RequestBody TestItemDto dto) {
		this.projectTestItemRepository.save(this.projectTestItemMapper.toEntity(dto));
		return "OK";
	}
	
	@GetMapping({ProjectConfig.baseURL +  ProjectConfig.testItem, ProjectConfig.baseURL + ProjectConfig.testItem + "/{id}"})
	public List<TestItemDto> testItem(Principal principal, @PathVariable(name="id", required=false) Long id,
			@RequestParam(name=ProjectConfig.testPoint, required=false) Long testpontid,
			@RequestParam(name=ProjectConfig.project, required=false) Long projectid) {
		if (testpontid != null) {
			return this.projectTestItemMapper.toDtoList(this.projectTestItemRepository.findByTestPoint_id(testpontid));
		}
		else if (projectid != null) {
			ProjectEntity projectEntity = this.projectRepository.findById(projectid).get();
			List<TestItemEntity> entities = projectEntity.getDutPackages().stream().flatMap(dp -> dp.getDuts().stream().flatMap(dut -> dut.getTestPoints().stream().flatMap(tp->tp.getTestItems().stream().map(ti -> ti)))).collect(Collectors.toList());
			return this.projectTestItemMapper.toDtoList(entities);
		}
		else if (id != null) {
			return Arrays.asList(this.projectTestItemMapper.toDto(this.projectTestItemRepository.findById(id).get()));
		}
		else {
			return this.projectTestItemMapper.toDtoList(this.projectTestItemRepository.findAll());
		}
	}
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.criteriaTemplate)
	public String criteria(Principal principal, @RequestBody CriteriaTemplateDto dto) {
		this.projectCriteriaTemplateRepository.save(this.projectCriteriaTemplateMapper.toEntity(dto));
		return "OK";
	}	
	
	@Autowired
	private PassFailCalculator passFailCalculator;
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.result)
	public String result(Principal principal, @RequestBody TestResultDto dto) {
		TestResultEntity e = this.projectTestResultRepository.save(this.projectTestResultMapper.toEntity(dto));
		
//		ProjectTestResultEntity e = this.projectTestResultRepository.findById(dto.getId()).get();
		e.setStatus(passFailCalculator.judgePassFail(e.getTestItem().getCriteria().getCriteriaFormula(), e.getResult()).name());
		this.projectTestResultRepository.save(e);
		
		return "OK";
	}	
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.rawData)
	public String rawData(Principal principal, @RequestBody RawDataDto dto) {
		this.projectRawDataRepository.save(this.projectRawDataMapper.toEntity(dto));
		return "OK";
	}	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.supplier)
	public String supplier(Principal principal, @RequestBody TesterSupplierDto dto) {
		this.projectTesterSupplierRepository.save(projectTesterSupplierMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.testerTemplate)
	public String testerTemplate(Principal principal, @RequestBody TesterTemplateDto dto) {
		this.projectTesterTemplateRepository.save(projectTesterTemplateMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.testItemTemplate)
	public String testItemTemplate(Principal principal, @RequestBody TestItemTemplateDto dto) {
		this.projectTestItemTemplateRepository.save(projectTestItemTemplateMapper.toEntity(dto));
		return "OK";
	}
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.tester)
	public String tester(Principal principal, @RequestBody TesterDto dto) {
		this.projectTesterRepository.save(projectTesterMapper.toEntity(dto));
		return "OK";
	}
	
	@GetMapping(ProjectConfig.baseURL +  ProjectConfig.tester)
	public List<TesterDto> tester(Principal principal) {
		return this.projectTesterMapper.toDtoList(this.projectTesterRepository.findAll());
	}
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.user)
	public String user(Principal principal, @RequestBody ProjectUserDto dto) {
		this.projectUserRepository.save(projectUserMapper.toEntity(dto));
		return "OK";
	}	
	
	@GetMapping(ProjectConfig.baseURL +  ProjectConfig.user)
	public List<ProjectUserDto> user(Principal principal) {
		return this.projectUserMapper.toDtoList(this.projectUserRepository.findAll());
	}	
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.subRole)
	public String subRole(Principal principal, @RequestBody SubRoleDto dto) {
		this.projectSubRoleRepository.save(this.projectSubRoleMapper.toEntity(dto));
		return "OK";
	}	
	
	@Autowired
	private DateMapper dateMapper;
	
	@PostMapping(ProjectConfig.baseURL +  ProjectConfig.resultPackage)
	public String subRole(Principal principal, @RequestBody TestResultPackageDto dto) {
		try {
		RawDataEntity rawData = this.projectRawDataRepository.save(RawDataEntity.builder()
				.content(dto.getRawData()).image(dto.getRawData())
				.name(dto.getRawDataName()).build());
		dto.getResults().forEach(r -> projectTestResultRepository.save(TestResultEntity.builder()
				.result(r.getResult())
				.rawData(rawData)
				.operator(dto.getOperator() != null ? this.projectUserRepository.findById(dto.getOperator()).get() : null)
				.date(dateMapper.toDate(dto.getDate()))
				.testItem(this.projectTestItemRepository.findById(r.getTestItem().getKey()).get())
				.build()));
		}
		catch (Exception e) {
			e.printStackTrace();
		}

		return "OK";
	}	
}

