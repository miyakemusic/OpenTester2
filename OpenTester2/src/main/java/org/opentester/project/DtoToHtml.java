package org.opentester.project;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentester.project.dto.DtoClass;
import org.opentester.project.dto.DtoFieldControl;
import org.opentester.project.dto.DtoSelect;
import org.opentester.project.dto.DtoSelect.Type;
import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.DtoFieldControl.WidgetType;

public class DtoToHtml {
	private List<FieldUiId> valueableIds = new ArrayList<>();
	private Map<String, String> fixedIds = new HashMap<>();
	private Object object;
	private MethodCaller methodCaller;
	private List<OptionInfo> optionInfo = new ArrayList<>();
	
	public DtoToHtml(Object object) {
		this.object = object;
		methodCaller = new MethodCaller(object);
	}

	private Object getValue(Field field) {
		return methodCaller.value(field);
	}
	
	public String objectImpl() {
		StringBuilder ret = new StringBuilder();
		this.valueableIds.forEach(m -> ret.append(
				"obj." + m.field() + " = " + "$('#" + m.uniqueId() + "').val();\n")
				);
		this.fixedIds.forEach((k,v) -> {if (v==null || v.isEmpty())return; ret.append("obj." + k + " = " + v + ";\n");});
		return ret.toString();
	}
	
	public String html() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("<table class=\"table table-striped\"><thead><tr><th></th><th></th></tr></thead><tbody>");

		for (Field field : object.getClass().getDeclaredFields()) {
			if (Modifier.isStatic(field.getModifiers())) {
				continue;
			}
			DtoFieldControl fieldAnnotation = (DtoFieldControl)field.getAnnotation(DtoFieldControl.class);
			if (fieldAnnotation != null) {
				if (fieldAnnotation.type().compareTo(WidgetType.READONLY) == 0) {
					fixedIds.put(field.getName(), getValueString(field));
					continue;
				}
			}
						
			String valueHtml = "";
			FieldUiId fieldUiId = new FieldUiId(field.getName());
			valueableIds.add(fieldUiId);
			
			if (field.getType().equals(String.class) || field.getType().equals(Long.class) || field.getType().equals(Integer.class)) {
				String value  = getValueString(field);
				valueHtml = "<input type=\"text\" id=\"" + fieldUiId.uniqueId() + "\" class=\"form-control\" value=\"" + value + "\"/>";
			}
			else if (field.getType().equals(KeyValueDto.class)) {
				DtoClass classAnnotaton = (DtoClass)field.getAnnotation(DtoClass.class);
				if (classAnnotaton == null) {
					continue;
				}
				Class<?> dtoClass =classAnnotaton.cls();

				//valueHtml = "<select id=\"" + fieldId.uniqueId() + "\" class=\"form-select\" aria-label=\".form-select-lg\">";
				KeyValueDto dto = ((KeyValueDto)getValue(field));
				
				String url = "/admin/options/" + dtoClass.getName();
				String value = "-";
				if (dto != null) {
					value = dto.getValue();
				}
//				valueHtml = "<button id=\"" + fieldId.uniqueId() + "\" class=\"btn btn-primary\" onclick=\"showSelectDialog(\\'" + url + "\\', \\'" + fieldId.uniqueId() + "\\')\">" + value + "</button>";
				valueHtml = "<input type=\"text\" id=\"" + fieldUiId.uniqueId() + "\" class=\"btn btn-primary\" onclick=\"showSelectDialog(\\'" + url + "\\', \\'" + fieldUiId.uniqueId() + "\\')\" value=\"" + value + "\">" + "</input>";

				optionInfo.add(new OptionInfo(fieldUiId, url));
			}
			
			stringBuilder.append("<tr><td>" + field.getName() + "</td><td>" + valueHtml + "</td></tr>");
			
		}
		stringBuilder.append("</tbody>");
		
		return stringBuilder.toString();		
	}

	private String getValueString(Field field) {
		Object object = this.getValue(field);
		if (object != null) {
			return object.toString();
		}
		return "";
	}

//	public String javascriptInitialize() {
//		StringBuffer ret = new StringBuffer();
//		for (OptionInfo option : this.optionInfo) {
//			ret.append(option.id.uniqueId() + "();\n");
//		}
//		return ret.toString();
//	}
	public String javascriptFunction() {
		StringBuffer ret = new StringBuffer();
		for (OptionInfo option : this.optionInfo) {
			ret.append("getOptions('" + option.url + "', '" + option.id.uniqueId() + "');\n");
		}
		
		return ret.toString();
	}
	
	class FieldUiId {
		public FieldUiId(String id) {
			this.id = id;
		}
		private String id;
		
		public String field() {
			return id;
		}
		
		public String uniqueId() {
			return id + DtoToHtml.this.hashCode();
		}
	}
	
	class OptionInfo {
		public OptionInfo(FieldUiId id, String url) {
			this.id = id;
			this.url = url;
		}
		public FieldUiId id;
		public String url;
	}
}


