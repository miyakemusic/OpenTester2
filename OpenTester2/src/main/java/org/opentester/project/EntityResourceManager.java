package org.opentester.project;

import java.lang.reflect.InvocationTargetException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectSubRoleDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.ProjectUserDto;
import org.opentester.project.dto.TesterSupplierDto;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectSubRoleEntity;
import org.opentester.project.entity.ProjectTestItemTemplateEntity;
import org.opentester.project.entity.ProjectTesterEntity;
import org.opentester.project.entity.ProjectTesterSupplierEntity;
import org.opentester.project.entity.ProjectTesterTemplateEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.entity.mapper.ProjectMapper;
import org.opentester.project.entity.mapper.ProjectSubRoleMapper;
import org.opentester.project.entity.mapper.ProjectTestItemTemplateMapper;
import org.opentester.project.entity.mapper.ProjectTesterMapper;
import org.opentester.project.entity.mapper.ProjectTesterSupplierMapper;
import org.opentester.project.entity.mapper.ProjectTesterTemplateMapper;
import org.opentester.project.entity.mapper.ProjectUserMapper;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Configuration
public class EntityResourceManager {
	protected static final KeyValueDto ProjectTesteItemTemplateDto = null;
	private Map<String, EntityResource> map = new LinkedHashMap<>();
	public enum Type {
		project,
		supplier, testerTemplate, testItemTemplate, tester, user, subRole
	}
	@Autowired
	private HtmlGenerator<ProjectDto> projectGenerator;
	@Autowired
	private ProjectRepository projectRepository;

	@Autowired
	private HtmlGenerator<TesterSupplierDto> projectTesterSupplierGenerator;
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private HtmlGenerator<ProjectTesterTemplateDto> projectTesterTemplateGenerator;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private HtmlGenerator<ProjectTestItemTemplateDto> projectTestItemTemplateGenerator;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private HtmlGenerator<ProjectTesterDto> projectTesterGenerator;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;	
	
	@Autowired
	private HtmlGenerator<ProjectUserDto> projectUserGenerator;
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;	
	
	@Autowired
	private HtmlGenerator<ProjectSubRoleDto> projectSubRoleGenerator;	
	
	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Autowired 
	private ProjectMapper projectMapper;
	
	@Autowired 
	private ProjectUserMapper projectUserMapper;
	
	@Autowired 
	private ProjectTesterSupplierMapper projectTesterSupplierMapper;
	
	@Autowired 
	private ProjectTesterTemplateMapper projectTesterTemplateMapper;
	
	@Autowired 
	private ProjectTestItemTemplateMapper projectTestItemTemplateMapper;
	
	@Autowired 
	private ProjectTesterMapper projectTesterMapper;
	
	@Autowired
	private ProjectSubRoleMapper projectSubRoleMapper;
	
	public EntityResourceManager() {
		map.put(Type.project.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectGenerator.createTable(
						projectMapper.toDtoList(projectRepository.findAll()),
						Type.project.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectDto dto = null;
				if (id == null) {
					dto = ProjectDto.builder().name("").build();
				}
				else {
					Optional<ProjectEntity> entity = projectRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectMapper.toDto(entity.get());
					}
				}
				return projectGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectEntity>() {
					@Override
					protected String getText(ProjectEntity item) {
						return item.getProjectName();
					}

					@Override
					protected String getId(ProjectEntity item) {
						return item.getId().toString();
					}
				}.html(projectRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectEntity>() {
					@Override
					protected String getText(ProjectEntity e) {
						return e.getProjectName();
					}

					@Override
					protected String getId(ProjectEntity e) {
						return e.getId().toString();
					}
					
				}.html(projectRepository.findAll());
			}
		});
		map.put(Type.supplier.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTesterSupplierGenerator.createTable(
						projectTesterSupplierMapper.toDtoList(projectTesterSupplierRepository.findAll()), 
						Type.supplier.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				TesterSupplierDto dto = null;
				if (id == null) {
					dto = TesterSupplierDto.builder().name("").build();
				}
				else {
					Optional<ProjectTesterSupplierEntity> entity = projectTesterSupplierRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectTesterSupplierMapper.toDto(entity.get());
					}
				}
				return projectTesterSupplierGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectTesterSupplierEntity>() {
					@Override
					protected String getText(ProjectTesterSupplierEntity item) {
						return item.getName();
					}

					@Override
					protected String getId(ProjectTesterSupplierEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterSupplierRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectTesterSupplierRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectTesterSupplierEntity>() {
					@Override
					protected String getText(ProjectTesterSupplierEntity item) {
						return item.getName();
					}

					@Override
					protected String getId(ProjectTesterSupplierEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterSupplierRepository.findAll());
			}
		});

		map.put(Type.testItemTemplate.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTestItemTemplateGenerator.createTable(
						projectTestItemTemplateMapper.toDtoList(projectTestItemTemplateRepository.findAll()), 
						Type.testItemTemplate.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectTestItemTemplateDto dto = null;
				if (id == null) {
					dto = ProjectTestItemTemplateDto.builder().build();
				}
				else {
					Optional<ProjectTestItemTemplateEntity> entity = projectTestItemTemplateRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectTestItemTemplateMapper.toDto(entity.get());
					}
				}
				return projectTestItemTemplateGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectTestItemTemplateEntity>() {
					@Override
					protected String getText(ProjectTestItemTemplateEntity e) {
						return e.getTestkey() + "(" + e.getDescription() + ")";
					}

					@Override
					protected String getId(ProjectTestItemTemplateEntity e) {
						return e.getId().toString();
					}
					
				}.html(projectTestItemTemplateRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectTestItemTemplateRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectTestItemTemplateEntity>() {
					@Override
					protected String getText(ProjectTestItemTemplateEntity e) {
						return e.getTestkey() + "(" + e.getDescription() + ")";
					}

					@Override
					protected String getId(ProjectTestItemTemplateEntity e) {
						return e.getId().toString();
					}
					
				}.html(projectTestItemTemplateRepository.findAll());
			}
		});
		
		map.put(Type.testerTemplate.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTesterTemplateGenerator.createTable(
						projectTesterTemplateMapper.toDtoList(projectTesterTemplateRepository.findAll()), 
						Type.testerTemplate.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectTesterTemplateDto dto = null;
				if (id == null) {
					ProjectTesterSupplierEntity e = projectTesterSupplierRepository.findAll().get(0);
					dto = ProjectTesterTemplateDto.builder().supplier(KeyValueDto.builder().key(e.getId()).value(e.getName()).build())
							.build();
				}
				else {
					Optional<ProjectTesterTemplateEntity> entity = projectTesterTemplateRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectTesterTemplateMapper.toDto(entity.get());
					}
				}
				return projectTesterTemplateGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectTesterTemplateEntity>() {
					@Override
					protected String getText(ProjectTesterTemplateEntity item) {
						return item.getModel();
					}

					@Override
					protected String getId(ProjectTesterTemplateEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterTemplateRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectTesterTemplateRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectTesterTemplateEntity>() {
					@Override
					protected String getText(ProjectTesterTemplateEntity item) {
						return item.getModel();
					}

					@Override
					protected String getId(ProjectTesterTemplateEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterTemplateRepository.findAll());
			}
		});
		
		map.put(Type.tester.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTesterGenerator.createTable(
						projectTesterMapper.toDtoList(projectTesterRepository.findAll()), 
						Type.tester.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectTesterDto dto = null;
				if (id == null) {
					ProjectTesterTemplateEntity e = projectTesterTemplateRepository.findAll().get(0);
					
					dto = ProjectTesterDto.builder()
							.model(KeyValueDto.builder()
									.key(e.getId()).value(e.getModel())
									.build())
							.build();
				}
				else {
					Optional<ProjectTesterEntity> entity = projectTesterRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectTesterMapper.toDto(entity.get());
					}
				}
				return projectTesterGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectTesterEntity>() {
					@Override
					protected String getText(ProjectTesterEntity item) {
						return item.getSerialNumber();
					}

					@Override
					protected String getId(ProjectTesterEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectTesterRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectTesterTemplateEntity>() {
					@Override
					protected String getText(ProjectTesterTemplateEntity item) {
						return item.getModel();
					}

					@Override
					protected String getId(ProjectTesterTemplateEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterTemplateRepository.findAll());
			}
		});
		
		map.put(Type.user.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectUserGenerator.createTable(
						projectUserMapper.toDtoList(projectUserRepository.findAll()), 
						Type.user.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectUserDto dto = null;
				if (id == null) {
					dto = ProjectUserDto.builder()
							.build();
				}
				else {
					Optional<ProjectUserEntity> entity = projectUserRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectUserMapper.toDto(entity.get());
					}
				}
				return projectUserGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectUserEntity>() {
					@Override
					protected String getText(ProjectUserEntity item) {
						return item.getUsername();
					}

					@Override
					protected String getId(ProjectUserEntity item) {
						return item.getId().toString();
					}
				}.html(projectUserRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectUserRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectTesterTemplateEntity>() {
					@Override
					protected String getText(ProjectTesterTemplateEntity item) {
						return item.getModel();
					}

					@Override
					protected String getId(ProjectTesterTemplateEntity item) {
						return item.getId().toString();
					}
				}.html(projectTesterTemplateRepository.findAll());
			}
		});
		
		map.put(Type.subRole.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectSubRoleGenerator.createTable(
						projectSubRoleMapper.toDtoList(projectSubRoleRepository.findAll()), 
						Type.subRole.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectSubRoleDto dto = null;
				if (id == null) {
					dto = ProjectSubRoleDto.builder()
							.build();
				}
				else {
					Optional<ProjectSubRoleEntity> entity = projectSubRoleRepository.findById(id);					
					if (entity.isPresent()) {
						dto = projectSubRoleMapper.toDto(entity.get());
					}
				}
				return projectSubRoleGenerator.createDialog(dto);
			}

			@Override
			public String getSingleSelectionHtml() {
				return new SelectHtml<ProjectSubRoleEntity>() {
					@Override
					protected String getText(ProjectSubRoleEntity e) {
						return e.getName();
					}

					@Override
					protected String getId(ProjectSubRoleEntity e) {
						return e.getId().toString();
					}
					
				}.html(projectSubRoleRepository.findAll());
			}

			@Override
			public void delete(Long id) {
				projectSubRoleRepository.deleteById(id);
			}

			@Override
			public String getMultiSelectionHtml() {
				return new CheckBoxHtml<ProjectSubRoleEntity>() {
					@Override
					protected String getText(ProjectSubRoleEntity e) {
						return e.getName();
					}

					@Override
					protected String getId(ProjectSubRoleEntity e) {
						return e.getId().toString();
					}
					
				}.html(projectSubRoleRepository.findAll());
			}
		});
	}
	public String getTable(String type) {
		try {
			return this.map.get(type).getTableHtml();
		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
	public String getDialogHtml(String type, Long id) {
		try {
			return this.map.get(type).getDialogHtml(type, id);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
	public Set<String> titles() {
		return this.map.keySet();
	}
	public String getSingleSelectionHtml(String type) {
		return this.map.get(type).getSingleSelectionHtml();
	}
	public void delete(String type, Long id) {
		this.map.get(type).delete(id);
	}
	public String getMultiSelectionHtml(String type) {
		return this.map.get(type).getMultiSelectionHtml();
	}
};
interface EntityResource {
	public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;
	public String getMultiSelectionHtml();
	public void delete(Long id);
	public String getSingleSelectionHtml();
	public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException;
//	public String getPostJson();
}
abstract class SelectHtml<T> {
	public String html(List<T> list) {
		StringBuilder sb = new StringBuilder();
		sb.append("<select id=\"dialogSelect\" class=\"form-select\">");
		for (T item : list) {
			String id = getId(item);
			String text = getText(item);
			sb.append("<option id=\"" + id+ "\" value=\"" + id + "\">" + text + "</option>");
		}
		sb.append("</select>");
		return sb.toString();
	}

	protected abstract String getText(T item);

	protected abstract String getId(T item);
}

abstract class CheckBoxHtml<T> {
	public String html(List<T> list) {
		StringBuilder sb = new StringBuilder();
		
		sb.append("<div id=\"checkboxes\">");
		for (T e : list) {
			String id = getId(e);
			String title = getText(e);// + "(" + e.getDescription() + ")";
			sb.append("<div class=\"form-check\">");
			sb.append("<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"" + id.toString() + "\">");
			sb.append("<label class=\"form-check-label\" for=\"" + id.toString() + "\">");
			sb.append(title);
			sb.append("</label>");
			sb.append("</div>");
		}
		sb.append("</div>");
		return sb.toString();
	}

	protected abstract String getText(T e);

	protected abstract String getId(T e);
}