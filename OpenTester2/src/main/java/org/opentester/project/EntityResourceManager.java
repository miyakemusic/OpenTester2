package org.opentester.project;

import java.lang.reflect.InvocationTargetException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.entity.CriteriaTemplateEntity;
import org.opentester.project.entity.DutEntity;
import org.opentester.project.entity.DutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.entity.RawDataEntity;
import org.opentester.project.entity.SubRoleEntity;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.TestItemTemplateEntity;
import org.opentester.project.entity.TestPointEntity;
import org.opentester.project.entity.TestResultEntity;
import org.opentester.project.entity.TesterEntity;
import org.opentester.project.entity.TesterSupplierEntity;
import org.opentester.project.entity.TesterTemplateEntity;
import org.opentester.project.entityresource.CommonEntityResource;
import org.opentester.project.entityresource.EntityResource;
import org.opentester.project.entityresource.trash.CriteriaTemplateEntityResource;
import org.opentester.project.entityresource.trash.DutEntityResource;
import org.opentester.project.entityresource.trash.DutPackageEntityResource;
import org.opentester.project.entityresource.trash.ProjectEntityResource;
import org.opentester.project.entityresource.trash.ProjectUserEntityResource;
import org.opentester.project.entityresource.trash.RawDataEntityResource;
import org.opentester.project.entityresource.trash.SubRoleEntityResource;
import org.opentester.project.entityresource.trash.SupplierEntityResource;
import org.opentester.project.entityresource.trash.TestItemEntityResource;
import org.opentester.project.entityresource.trash.TestItemTemplateEntityResource;
import org.opentester.project.entityresource.trash.TestPointEntityResource;
import org.opentester.project.entityresource.trash.TestResultEntityResource;
import org.opentester.project.entityresource.trash.TesterEntityResource;
import org.opentester.project.entityresource.trash.TesterTemplateEntityResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Configuration
public class EntityResourceManager {
	protected static final KeyValueDto ProjectTesteItemTemplateDto = null;
	private Map<String, EntityResource> map = new LinkedHashMap<>();

//	@Autowired
//	private ProjectEntityResource projectEntityResource;
//	
//	@Autowired
//	private DutPackageEntityResource dutPackageEntityrResource;
//	
//	@Autowired
//	private DutEntityResource dutEntityResource;
//	
//	@Autowired
//	private TestPointEntityResource testPointEntityResource;
//	
//	@Autowired
//	private TestItemEntityResource testItemEntityResource;
//	
//	@Autowired
//	private TestResultEntityResource testResultEntityResource;
//	
//	@Autowired
//	private RawDataEntityResource rawDataEntityResource;
//	
//	@Autowired
//	private CriteriaTemplateEntityResource criteriaTemplateEntityResource;
//	
//	@Autowired
//	private SupplierEntityResource supplierEntityResource;
//	
//	@Autowired
//	private TestItemTemplateEntityResource testItemTemplateEntityResource;
//	
//	@Autowired
//	private TesterTemplateEntityResource testerTemplateEntityResource;
//	
//	@Autowired
//	private TesterEntityResource testerEntityResource;
//	
//	@Autowired
//	private ProjectUserEntityResource userEntityResource;
//	
//	@Autowired
//	private SubRoleEntityResource subRoleEntityResource;
	
	
	@Autowired
	private CommonEntityResource<ProjectEntity> projectEntityResource;
	
	@Autowired
	private CommonEntityResource<DutPackageEntity> dutPackageEntityrResource;
	
	@Autowired
	private CommonEntityResource<DutEntity> dutEntityResource;
	
	@Autowired
	private CommonEntityResource<TestPointEntity> testPointEntityResource;
	
	@Autowired
	private CommonEntityResource<TestItemEntity> testItemEntityResource;
	
	@Autowired
	private CommonEntityResource<TestResultEntity> testResultEntityResource;
	
	@Autowired
	private CommonEntityResource<RawDataEntity> rawDataEntityResource;
	
	@Autowired
	private CommonEntityResource<CriteriaTemplateEntity> criteriaTemplateEntityResource;
	
	@Autowired
	private CommonEntityResource<TesterSupplierEntity> supplierEntityResource;
	
	@Autowired
	private CommonEntityResource<TestItemTemplateEntity> testItemTemplateEntityResource;
	
	@Autowired
	private CommonEntityResource<TesterTemplateEntity> testerTemplateEntityResource;
	
	@Autowired
	private CommonEntityResource<TesterEntity> testerEntityResource;
	
	@Autowired
	private CommonEntityResource<ProjectUserEntity> userEntityResource;
	
	@Autowired
	private CommonEntityResource<SubRoleEntity> subRoleEntityResource;
	
	public void createMap() {
		
		addMap(projectEntityResource);
		addMap(dutPackageEntityrResource);
		addMap(dutEntityResource);
		addMap(testPointEntityResource);
		addMap(testItemEntityResource);
		addMap(testResultEntityResource);
		addMap(rawDataEntityResource);
		addMap(criteriaTemplateEntityResource);
		addMap(supplierEntityResource);
		addMap(testItemTemplateEntityResource);
		addMap(testerTemplateEntityResource);
		addMap(testerEntityResource);
		addMap(userEntityResource);
		addMap(subRoleEntityResource);
		
		
//		map.put(ProjectConfig.project, new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				return projectGenerator.createTable(
//						projectMapper.toDtoList(projectRepository.findAll()),
//						ProjectConfig.project,
//						extractId(type_id)
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectDto dto = null;
//				if (id == null) {
//					dto = ProjectDto.builder().name("").build();
//				}
//				else {
//					Optional<ProjectEntity> entity = projectRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectMapper.toDto(entity.get());
//					}
//				}
//				return projectGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectEntity>() {
//					@Override
//					protected String getText(ProjectEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectEntity>() {
//					@Override
//					protected String getText(ProjectEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectRepository.findAll());
//			}
//		});

//		map.put(ProjectConfig.dutPackage, new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				List<ProjectDutPackageEntity> list; 
//				if (id == null) {
//					list = projectDutPackageRepository.findAll();
//				}
//				else {
//					list = projectDutPackageRepository.findByProject_id(id);
//				}
//				
//				return projectDutPackageGenerator.createTable(
//						projectDutPackageMapper.toDtoList(list), 
//						ProjectConfig.dutPackage,
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				DutPackageDto dto = null;
//				if (id == null) {
//					dto = DutPackageDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectDutPackageEntity> entity = projectDutPackageRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectDutPackageMapper.toDto(entity.get());
//					}
//				}
//				
//				if (parent != null) {
//					ProjectEntity parentEntity = projectRepository.findById(parent).get();
//					dto.setProject(KeyValueDto.builder().key(parent).value(parentEntity.toString()).build());
//				}
//				return projectDutPackageGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectDutPackageEntity>() {
//					@Override
//					protected String getText(ProjectDutPackageEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectDutPackageEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectDutPackageRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectDutPackageRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectDutPackageEntity>() {
//					@Override
//					protected String getText(ProjectDutPackageEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectDutPackageEntity e) {
//						return e.getId().toString();
//					}
//				}.html(projectDutPackageRepository.findAll());
//			}
//		});

//		map.put(ProjectConfig.dut, new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				List<ProjectDutEntity> list;
//				if (id == null) {
//					list = projectDutRepository.findAll();
//				}
//				else {
//					list = projectDutRepository.findByDutpackage_id(id);
//				}
//
//				return projectDutGenerator.createTable(
//						projectDutMapper.toDtoList(list), 
//						ProjectConfig.dut,
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectDutDto dto = null;
//				if (id == null) {
//					dto = ProjectDutDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectDutEntity> entity = projectDutRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectDutMapper.toDto(entity.get());
//					}
//				}
//				
//				if (parent != null) {
//					dto.setDutPackage(KeyValueDto.builder().key(parent).value(projectDutPackageRepository.findById(parent).get().toString()).build());
//				}
//				return projectDutGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectDutEntity>() {
//					@Override
//					protected String getText(ProjectDutEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectDutEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectDutRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectDutRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectDutPackageEntity>() {
//					@Override
//					protected String getText(ProjectDutPackageEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectDutPackageEntity e) {
//						return e.getId().toString();
//					}
//				}.html(projectDutPackageRepository.findAll());
//			}
//		});
		

//		map.put(ProjectConfig.testPoint, new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				List<ProjectTestPointEntity> list;
//				if (id == null) {
//					list = projectTestPointRepository.findAll();
//				}
//				else {
//					list = projectTestPointRepository.findByDut_id(id);
//				}
//				return projectTestPointGenerator.createTable(
//						projectTestPointMapper.toDtoList(list), 
//						ProjectConfig.testPoint,
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				TestPointDto dto = null;
//				if (id == null) {
//					dto = TestPointDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectTestPointEntity> entity = projectTestPointRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTestPointMapper.toDto(entity.get());
//					}
//				}
//				
//				if (parent != null) {
//					dto.setDut(KeyValueDto.builder().key(parent).value(projectDutRepository.findById(parent).get().toString()).build());
//				}
//				return projectTestPointGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTestPointEntity>() {
//					@Override
//					protected String getText(ProjectTestPointEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTestPointEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectTestPointRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTestPointRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectDutPackageEntity>() {
//					@Override
//					protected String getText(ProjectDutPackageEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectDutPackageEntity e) {
//						return e.getId().toString();
//					}
//				}.html(projectDutPackageRepository.findAll());
//			}
//		});
		

//		map.put(ProjectConfig.testItem, new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				List<ProjectTestItemEntity> list;
//				if (id == null) {
//					list = projectTestItemRepository.findAll();
//				}
//				else {
//					list = projectTestItemRepository.findByTestPoint_id(id);
//				}
//				return projectTestItemGenerator.createTable(
//						projectTestItemMapper.toDtoList(list), 
//						ProjectConfig.testItem,
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				TestItemDto dto = null;
//				if (id == null) {
//					dto = TestItemDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectTestItemEntity> entity = projectTestItemRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTestItemMapper.toDto(entity.get());
//					}
//				}
//				if (parent != null) {
//					dto.setTestPoint(KeyValueDto.builder().key(parent).value(projectTestPointRepository.findById(parent).get().toString()).build());
//				}
//				return projectTestItemGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTestItemEntity>() {
//					@Override
//					protected String getText(ProjectTestItemEntity e) {
//						return e.toString();
//						//return e.getCriteria() != null? e.getCriteria().getTestItemTemplate().getTestkey():"--Not Defined--";
//					}
//
//					@Override
//					protected String getId(ProjectTestItemEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectTestItemRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTestItemRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectDutPackageEntity>() {
//					@Override
//					protected String getText(ProjectDutPackageEntity e) {
//						return e.getName();
//					}
//
//					@Override
//					protected String getId(ProjectDutPackageEntity e) {
//						return e.getId().toString();
//					}
//				}.html(projectDutPackageRepository.findAll());
//			}
//		});
		
//		map.put(ProjectConfig.result, new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				List<ProjectTestResultEntity> list; 
//				if (id == null) {
//					list = projectTestResultRepository.findAll();
//				}
//				else {
//					list = projectTestResultRepository.findByTestItem_id(id);
//				}
//				
//				return projectTestResultGenerator.createTable(
//						projectTestResultMapper.toDtoList(list), 
//						ProjectConfig.result,
//						extractId(type_id)
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				TestResultDto dto = null;
//				if (id == null) {
//					dto = TestResultDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectTestResultEntity> entity = projectTestResultRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTestResultMapper.toDto(entity.get());
//					}
//				}
//				
//				if (parent != null) {
//					ProjectTestItemEntity parentEntity = projectTestItemRepository.findById(parent).get();
//					dto.setTestItem(KeyValueDto.builder().key(parent).value(parentEntity.toString()).build());
//				}
//				return projectTestResultGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTestResultEntity>() {
//					@Override
//					protected String getText(ProjectTestResultEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTestResultEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectTestResultRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTestResultRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectTestResultEntity>() {
//					@Override
//					protected String getText(ProjectTestResultEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTestResultEntity e) {
//						return e.getId().toString();
//					}
//				}.html(projectTestResultRepository.findAll());
//			}
//		});
		
//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				List<ProjectCriteriaTemplateEntity> list = projectCriteriaTemplateRepository.findAll();
//
//				return projectCriteriaTemplateGenerator.createTable(
//						projectCriteriaTemplateMapper.toDtoList(list), 
//						getType(),
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectCriteriaTemplateDto dto = null;
//				if (id == null) {
//					dto = ProjectCriteriaTemplateDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectCriteriaTemplateEntity> entity = projectCriteriaTemplateRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectCriteriaTemplateMapper.toDto(entity.get());
//					}
//				}
//				return projectCriteriaTemplateGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectCriteriaTemplateEntity>() {
//					@Override
//					protected String getText(ProjectCriteriaTemplateEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectCriteriaTemplateEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectCriteriaTemplateRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectCriteriaTemplateRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectCriteriaTemplateEntity>() {
//					@Override
//					protected String getText(ProjectCriteriaTemplateEntity e) {
//						return e.getCriteriaFormula();
//					}
//
//					@Override
//					protected String getId(ProjectCriteriaTemplateEntity e) {
//						return e.getId().toString();
//					}
//				}.html(projectCriteriaTemplateRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.criteria;
//			}
//		});
			
//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				return projectTesterSupplierGenerator.createTable(
//						projectTesterSupplierMapper.toDtoList(projectTesterSupplierRepository.findAll()), 
//						getType(),
//						id	
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				TesterSupplierDto dto = null;
//				if (id == null) {
//					dto = TesterSupplierDto.builder().name("").build();
//				}
//				else {
//					Optional<ProjectTesterSupplierEntity> entity = projectTesterSupplierRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTesterSupplierMapper.toDto(entity.get());
//					}
//				}
//				return projectTesterSupplierGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTesterSupplierEntity>() {
//					@Override
//					protected String getText(ProjectTesterSupplierEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTesterSupplierEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectTesterSupplierRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTesterSupplierRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectTesterSupplierEntity>() {
//					@Override
//					protected String getText(ProjectTesterSupplierEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTesterSupplierEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectTesterSupplierRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.supplier;
//			}
//		});


//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				return projectTestItemTemplateGenerator.createTable(
//						projectTestItemTemplateMapper.toDtoList(projectTestItemTemplateRepository.findAll()), 
//						getType(),
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectTestItemTemplateDto dto = null;
//				if (id == null) {
//					dto = ProjectTestItemTemplateDto.builder().build();
//				}
//				else {
//					Optional<ProjectTestItemTemplateEntity> entity = projectTestItemTemplateRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTestItemTemplateMapper.toDto(entity.get());
//					}
//				}
//				return projectTestItemTemplateGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTestItemTemplateEntity>() {
//					@Override
//					protected String getText(ProjectTestItemTemplateEntity e) {
//						return e.toString();
//						//return e.getTestkey() + "(" + e.getDescription() + ")";
//					}
//
//					@Override
//					protected String getId(ProjectTestItemTemplateEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectTestItemTemplateRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTestItemTemplateRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectTestItemTemplateEntity>() {
//					@Override
//					protected String getText(ProjectTestItemTemplateEntity e) {
//						return e.toString();
//						//return e.getTestkey() + "(" + e.getDescription() + ")";
//					}
//
//					@Override
//					protected String getId(ProjectTestItemTemplateEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectTestItemTemplateRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.testItemTemplate;
//			}
//		});

	
//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				return projectTesterTemplateGenerator.createTable(
//						projectTesterTemplateMapper.toDtoList(projectTesterTemplateRepository.findAll()), 
//						getType(),
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectTesterTemplateDto dto = null;
//				if (id == null) {
//					ProjectTesterSupplierEntity e = projectTesterSupplierRepository.findAll().get(0);
//					dto = ProjectTesterTemplateDto.builder().supplier(KeyValueDto.builder().key(e.getId()).value(e.getName()).build())
//							.build();
//				}
//				else {
//					Optional<ProjectTesterTemplateEntity> entity = projectTesterTemplateRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTesterTemplateMapper.toDto(entity.get());
//					}
//				}
//				return projectTesterTemplateGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTesterTemplateEntity>() {
//					@Override
//					protected String getText(ProjectTesterTemplateEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTesterTemplateEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectTesterTemplateRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTesterTemplateRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectTesterTemplateEntity>() {
//					@Override
//					protected String getText(ProjectTesterTemplateEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTesterTemplateEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectTesterTemplateRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.testerTemplate;
//			}
//		});

//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String  type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				return projectTesterGenerator.createTable(
//						projectTesterMapper.toDtoList(projectTesterRepository.findAll()), 
//						getType(),
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectTesterDto dto = null;
//				if (id == null) {
//					ProjectTesterTemplateEntity e = projectTesterTemplateRepository.findAll().get(0);
//					
//					dto = ProjectTesterDto.builder()
//							.model(KeyValueDto.builder()
//									.key(e.getId()).value(e.getModel())
//									.build())
//							.build();
//				}
//				else {
//					Optional<ProjectTesterEntity> entity = projectTesterRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectTesterMapper.toDto(entity.get());
//					}
//				}
//				return projectTesterGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectTesterEntity>() {
//					@Override
//					protected String getText(ProjectTesterEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTesterEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectTesterRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectTesterRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectTesterTemplateEntity>() {
//					@Override
//					protected String getText(ProjectTesterTemplateEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectTesterTemplateEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectTesterTemplateRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.tester;
//			}
//		});

		
//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				return projectUserGenerator.createTable(
//						projectUserMapper.toDtoList(projectUserRepository.findAll()), 
//						getType(),
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectUserDto dto = null;
//				if (id == null) {
//					dto = ProjectUserDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectUserEntity> entity = projectUserRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectUserMapper.toDto(entity.get());
//					}
//				}
//				return projectUserGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectUserEntity>() {
//					@Override
//					protected String getText(ProjectUserEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectUserEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectUserRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectUserRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectUserEntity>() {
//					@Override
//					protected String getText(ProjectUserEntity item) {
//						return item.toString();
//					}
//
//					@Override
//					protected String getId(ProjectUserEntity item) {
//						return item.getId().toString();
//					}
//				}.html(projectUserRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.user;
//			}
//		});

//		addMap(new EntityResource() {
//			@Override
//			public String getTableHtml(String type_id) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
//				Long id = extractId(type_id);
//				return projectSubRoleGenerator.createTable(
//						projectSubRoleMapper.toDtoList(projectSubRoleRepository.findAll()), 
//						getType(),
//						id
//						);
//			}
//
//			@Override
//			public String getDialogHtml(String type, Long id, Long parent) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
//				ProjectSubRoleDto dto = null;
//				if (id == null) {
//					dto = ProjectSubRoleDto.builder()
//							.build();
//				}
//				else {
//					Optional<ProjectSubRoleEntity> entity = projectSubRoleRepository.findById(id);					
//					if (entity.isPresent()) {
//						dto = projectSubRoleMapper.toDto(entity.get());
//					}
//				}
//				return projectSubRoleGenerator.createDialog(dto);
//			}
//
//			@Override
//			public String getSingleSelectionHtml() {
//				return new SelectHtml<ProjectSubRoleEntity>() {
//					@Override
//					protected String getText(ProjectSubRoleEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectSubRoleEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectSubRoleRepository.findAll());
//			}
//
//			@Override
//			public void delete(Long id) {
//				projectSubRoleRepository.deleteById(id);
//			}
//
//			@Override
//			public String getMultiSelectionHtml() {
//				return new CheckBoxHtml<ProjectSubRoleEntity>() {
//					@Override
//					protected String getText(ProjectSubRoleEntity e) {
//						return e.toString();
//					}
//
//					@Override
//					protected String getId(ProjectSubRoleEntity e) {
//						return e.getId().toString();
//					}
//					
//				}.html(projectSubRoleRepository.findAll());
//			}
//
//			@Override
//			public String getType() {
//				return ProjectConfig.subRole;
//			}
//		});
	}
	
	private void addMap(EntityResource resource) {
		map.put(resource.getType(), resource);
	}
	
	protected Long extractId(String type_id) {
		if (type_id == null) {
			return null;
		}
		return Long.valueOf(type_id.split("_")[1]);
	}
//	public String getTable(String type) {
//		try {
//			return this.map.get(type).getTableHtml(null);
//		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
//			e.printStackTrace();
//		}
//		return "";
//	}
	public String getTable(String type, String type_id) {
		try {
			return this.getMap().get(type).getTableHtml(type_id);
		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return "";
	}
	private Map<String, EntityResource> getMap() {
		if (map.size() == 0) {
			createMap();
		}
		return map;
	}
	public String getDialogHtml(String type, Long id, Long parent) {
		try {
			return this.getMap().get(type).getDialogHtml(type, id, parent);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return "";
	}
	public Set<String> titles() {
		return this.getMap().keySet();
	}
	public String getSingleSelectionHtml(String type) {
		return this.getMap().get(type).getSingleSelectionHtml();
	}
	public void delete(String type, Long id) {
		this.getMap().get(type).delete(id);
	}
	public String getMultiSelectionHtml(String type) {
		return this.getMap().get(type).getMultiSelectionHtml();
	}

};



