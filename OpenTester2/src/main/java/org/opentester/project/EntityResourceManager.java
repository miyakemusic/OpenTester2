package org.opentester.project;

import java.lang.reflect.InvocationTargetException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.entity.CriteriaTemplateEntity;
import org.opentester.project.entity.DutEntity;
import org.opentester.project.entity.DutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.entity.RawDataEntity;
import org.opentester.project.entity.SubRoleEntity;
import org.opentester.project.entity.TestItemEntity;
import org.opentester.project.entity.TestItemTemplateEntity;
import org.opentester.project.entity.TestPointEntity;
import org.opentester.project.entity.TestResultEntity;
import org.opentester.project.entity.TesterEntity;
import org.opentester.project.entity.TesterSupplierEntity;
import org.opentester.project.entity.TesterTemplateEntity;
import org.opentester.project.entityresource.CommonEntityResource;
import org.opentester.project.entityresource.EntityResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Configuration
public class EntityResourceManager {
	protected static final KeyValueDto ProjectTesteItemTemplateDto = null;
	private Map<String, EntityResource> map = new LinkedHashMap<>();
	
	@Autowired
	private CommonEntityResource<ProjectEntity> projectEntityResource;
	
	@Autowired
	private CommonEntityResource<DutPackageEntity> dutPackageEntityrResource;
	
	@Autowired
	private CommonEntityResource<DutEntity> dutEntityResource;
	
	@Autowired
	private CommonEntityResource<TestPointEntity> testPointEntityResource;
	
	@Autowired
	private CommonEntityResource<TestItemEntity> testItemEntityResource;
	
	@Autowired
	private CommonEntityResource<TestResultEntity> testResultEntityResource;
	
	@Autowired
	private CommonEntityResource<RawDataEntity> rawDataEntityResource;
	
	@Autowired
	private CommonEntityResource<CriteriaTemplateEntity> criteriaTemplateEntityResource;
	
	@Autowired
	private CommonEntityResource<TesterSupplierEntity> supplierEntityResource;
	
	@Autowired
	private CommonEntityResource<TestItemTemplateEntity> testItemTemplateEntityResource;
	
	@Autowired
	private CommonEntityResource<TesterTemplateEntity> testerTemplateEntityResource;
	
	@Autowired
	private CommonEntityResource<TesterEntity> testerEntityResource;
	
	@Autowired
	private CommonEntityResource<ProjectUserEntity> userEntityResource;
	
	@Autowired
	private CommonEntityResource<SubRoleEntity> subRoleEntityResource;
	
	@Autowired
	private ResultDetailEntityResource resultDetailEntityResource;
	
	public void createMap() {
		
		addMap(projectEntityResource);
		addMap(dutPackageEntityrResource);
		addMap(dutEntityResource);
		addMap(testPointEntityResource);
		addMap(testItemEntityResource);
		addMap(testResultEntityResource);
		addMap(rawDataEntityResource);
		addMap(criteriaTemplateEntityResource);
		addMap(supplierEntityResource);
		addMap(testItemTemplateEntityResource);
		addMap(testerTemplateEntityResource);
		addMap(testerEntityResource);
		addMap(userEntityResource);
		addMap(subRoleEntityResource);
		addMap(resultDetailEntityResource);
	}
	
	private void addMap(EntityResource resource) {
		map.put(resource.getType(), resource);
	}
	
	protected Long extractId(String type_id) {
		if (type_id == null) {
			return null;
		}
		return Long.valueOf(type_id.split("_")[1]);
	}

	public String getTable(String type, String parent_type_id) {
		try {
			String parent_type = null;
			Long parent_id = null;
			
			if (parent_type_id != null) {
				String[] tmp = parent_type_id.split("_");
				parent_type = tmp[0];
				parent_id = Long.valueOf(tmp[1]);
			}
			
			return this.getMap().get(type).getTableHtml(parent_type, parent_id);
		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
	private Map<String, EntityResource> getMap() {
		if (map.size() == 0) {
			createMap();
		}
		return map;
	}
	public String getDialogHtml(String type, Long id, Long parent) {
		try {
			return this.getMap().get(type).getDialogHtml(type, id, parent);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return "";
	}
	public Set<String> titles() {
		return this.getMap().keySet();
	}
	public String getSingleSelectionHtml(String type) {
		return this.getMap().get(type).getSingleSelectionHtml();
	}
	public void delete(String type, Long id) {
		this.getMap().get(type).delete(id);
	}
	public String getMultiSelectionHtml(String type) {
		return this.getMap().get(type).getMultiSelectionHtml();
	}

	public String getSummary(String type, Long id) {
		return this.getMap().get(type).getSummary(id);
	}

};



