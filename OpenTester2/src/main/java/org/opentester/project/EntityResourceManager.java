package org.opentester.project;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.opentester.project.dto.KeyValueDto;
import org.opentester.project.dto.ProjectDto;
import org.opentester.project.dto.ProjectTestItemTemplateDto;
import org.opentester.project.dto.ProjectTesterTemplateDto;
import org.opentester.project.dto.TesterSupplierDto;
import org.opentester.project.entity.DtoConverter;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.ProjectTestItemTemplateEntity;
import org.opentester.project.entity.ProjectTesterSupplierEntity;
import org.opentester.project.entity.ProjectTesterTemplateEntity;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Configuration
public class EntityResourceManager {
	protected static final KeyValueDto ProjectTesteItemTemplateDto = null;
	private Map<String, EntityResource> map = new LinkedHashMap<>();
	public enum Type {
		project,
		supplier, testerTemplate, testItemTemplate
	}
	@Autowired
	private HtmlGenerator<ProjectDto> projectGenerator;
	@Autowired
	private ProjectRepository projectRepository;

	@Autowired
	private HtmlGenerator<TesterSupplierDto> projectTesterSupplierGenerator;
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private HtmlGenerator<ProjectTesterTemplateDto> projectTesterTemplateGenerator;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private HtmlGenerator<ProjectTestItemTemplateDto> projectTestItemTemplateGenerator;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	public EntityResourceManager() {
		map.put(Type.project.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectGenerator.createTable(
						DtoConverter.convertProjectDto(projectRepository.findAll()), 
						Type.project.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectDto dto = null;
				if (id == null) {
					dto = ProjectDto.builder().name("").build();
				}
				else {
					Optional<ProjectEntity> entity = projectRepository.findById(id);					
					if (entity.isPresent()) {
						dto = DtoConverter.convertDto(entity.get());
					}
				}
				return projectGenerator.createDialog(dto);
			}

			@Override
			public String getSelectionHtml() {
				return null;
			}

			@Override
			public void delete(Long id) {
				projectRepository.deleteById(id);
			}
		});
		map.put(Type.supplier.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTesterSupplierGenerator.createTable(
						DtoConverter.convertTestSupplier(projectTesterSupplierRepository.findAll()), 
						Type.supplier.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				TesterSupplierDto dto = null;
				if (id == null) {
					dto = TesterSupplierDto.builder().name("").build();
				}
				else {
					Optional<ProjectTesterSupplierEntity> entity = projectTesterSupplierRepository.findById(id);					
					if (entity.isPresent()) {
						dto = DtoConverter.convertDto(entity.get());
					}
				}
				return projectTesterSupplierGenerator.createDialog(dto);
			}

			@Override
			public String getSelectionHtml() {
				StringBuilder sb = new StringBuilder();
				sb.append("<select id=\"dialogSelect\" class=\"form-select\">");
				for (ProjectTesterSupplierEntity e : projectTesterSupplierRepository.findAll()) {
					sb.append("<option id=\"" + e.getId() + "\" value=\"" + e.getId() + "\">" + e.getName() + "</option>");
				}
				sb.append("</select>");
				return sb.toString();
			}

			@Override
			public void delete(Long id) {
				projectTesterSupplierRepository.deleteById(id);
			}
		});

		map.put(Type.testItemTemplate.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTestItemTemplateGenerator.createTable(
						DtoConverter.convertTestItemTemplateDto(projectTestItemTemplateRepository.findAll()), 
						Type.testItemTemplate.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectTestItemTemplateDto dto = null;
				if (id == null) {
					dto = ProjectTestItemTemplateDto.builder().build();
				}
				else {
					Optional<ProjectTestItemTemplateEntity> entity = projectTestItemTemplateRepository.findById(id);					
					if (entity.isPresent()) {
						dto = DtoConverter.convertDto(entity.get());
					}
				}
				return projectTestItemTemplateGenerator.createDialog(dto);
			}

			@Override
			public String getSelectionHtml() {
				// TODO Auto-generated method stub
				return null;
			}

			@Override
			public void delete(Long id) {
				projectTestItemTemplateRepository.deleteById(id);
			}
		});
		
		map.put(Type.testerTemplate.name(), new EntityResource() {
			@Override
			public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
				return projectTesterTemplateGenerator.createTable(
						DtoConverter.convertTesterTemplateDto(projectTesterTemplateRepository.findAll()), 
						Type.testerTemplate.name()
						);
			}

			@Override
			public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException {
				ProjectTesterTemplateDto dto = null;
				if (id == null) {
					ProjectTesterSupplierEntity e = projectTesterSupplierRepository.findAll().get(0);
					
					dto = ProjectTesterTemplateDto.builder().supplier(KeyValueDto.builder().key(e.getId()).value(e.getName()).build()).build();
				}
				else {
					Optional<ProjectTesterTemplateEntity> entity = projectTesterTemplateRepository.findById(id);					
					if (entity.isPresent()) {
						dto = DtoConverter.convertDto(entity.get());
					}
				}
				return projectTesterTemplateGenerator.createDialog(dto);
			}

			@Override
			public String getSelectionHtml() {
				// TODO Auto-generated method stub
				return null;
			}

			@Override
			public void delete(Long id) {
				projectTesterSupplierRepository.deleteById(id);
			}
		});
	}
	public String getTable(String type) {
		try {
			return this.map.get(type).getTableHtml();
		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
	public String getDialogHtml(String type, Long id) {
		try {
			return this.map.get(type).getDialogHtml(type, id);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
	public Set<String> titles() {
		return this.map.keySet();
	}
	public String getSelectionHtml(String type) {
		return this.map.get(type).getSelectionHtml();
	}
	public void delete(String type, Long id) {
		this.map.get(type).delete(id);
	}
};
interface EntityResource {
	public String getTableHtml() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;
	public void delete(Long id);
	public String getSelectionHtml();
	public String getDialogHtml(String type, Long id) throws NoSuchMethodException, SecurityException, IllegalAccessException, InvocationTargetException;
//	public String getPostJson();
}