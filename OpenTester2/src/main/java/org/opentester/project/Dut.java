package org.opentester.project;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.opentester.project.dto.ProjectUserDto;

import lombok.Builder;
import lombok.Data;

@Builder
@Data
public class Dut {

	private int id;
	private String dutName;
	private List<TestPoint> testPoints = new ArrayList<>();

	public int totalTestItemCount() {
		int i = 0;
		for (TestPoint testPoint : this.testPoints) {
			i += testPoint.getTestItems().size();
		}
		return i;
	}

	public Set<ProjectUserDto> allOperators() {
		Set<ProjectUserDto> operators = new HashSet<>();
		for (TestPoint testPoint : this.testPoints) {
			operators.addAll(testPoint.allOperators());
//			for (TestItem testItem : testPoint.getTestItems()) {
//				operators.addAll(testItem.allOperators());
//			}
		}
		return operators;
	}

	public Set<String> allLocations() {
		Set<String> ret = new HashSet<>();
		this.testPoints.forEach(t -> ret.add(t.getLocation()));
		return ret;
	}

	public PassFail passFail() {
		PassFail ret = new PassFail(0, 0, 0);
		this.testPoints.forEach(f -> {
			ret.add(f.passFail());
		});
		return ret;
	}

	public Date completeDueDate() {
		LatestDate latest = new LatestDate();
		for (TestPoint testPoint : this.testPoints) {
			Date date = testPoint.completeDueDate();
			latest.add(date);
		}
		return latest.latest();
	}

	public Date completeDate() {
		LatestDate latest = new LatestDate();
		for (TestPoint testPoint : this.testPoints) {
			Date date = testPoint.completeDate();
			latest.add(date);
		}
		return latest.latest();
	}
}
