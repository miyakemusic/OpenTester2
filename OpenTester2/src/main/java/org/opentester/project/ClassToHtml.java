package org.opentester.project;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentester.project.dto.DtoFieldControl;
import org.opentester.project.dto.DtoFieldControl.WidgetType;

public class ClassToHtml {
	private List<String> valueableIds = new ArrayList<>();
	private Map<String, String> fixedIds = new HashMap<>();
	private Map<String, String> values = new HashMap<>();
	private Class cls;
	
	public ClassToHtml(Class cls) {
		this.cls = cls;
	}

	protected String getValue(Field field) {
		if (values.containsKey(field.getName())) {
			return values.get(field.getName());
		}
		return "";
	}
	
	public String objectImpl() {
		StringBuilder ret = new StringBuilder();
		this.valueableIds.forEach(m -> ret.append("obj." + m + " = " + "$('#" + m + "').val();\n"));
		this.fixedIds.forEach((k,v) -> {if (v==null || v.isEmpty())return; ret.append("obj." + k + " = " + v + ";\n");});
		return ret.toString();
	}
	
	public String html() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("<table class=\"table table-striped\"><thead><tr><th></th><th></th></tr></thead><tbody>");

		for (Field field : cls.getDeclaredFields()) {
			DtoFieldControl annotation = (DtoFieldControl)field.getAnnotation(DtoFieldControl.class);
			if (annotation != null) {
				if (annotation.type().compareTo(WidgetType.READONLY) == 0) {
					fixedIds.put(field.getName(), getValue(field));
					continue;
				}		
			}
			String value  = getValue(field);
			String fieldId = field.getName();
			valueableIds.add(fieldId);
			stringBuilder.append("<tr><td>" + field.getName() + "</td><td><input type=\"text\" id=\"" + fieldId + "\" class=\"form-control\" value=\"" + value + "\"/></td></tr>");
			
		}
		stringBuilder.append("</tbody>");
		return stringBuilder.toString();		
	}

	public ClassToHtml defaultValue(String field, String value) {
		this.values.put(field, value);
		return this;
	}
}
