package org.opentester;

import java.io.IOException;

import org.opentester.user.CheckTokenFilter;
import org.opentester.user.JsonAuthenticationFilter;
import org.opentester.user.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationFilter;
import org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	@Autowired
	private UserRepository userRepository;

    @Bean
    AuthenticationManager authenticationManager(
        final AuthenticationConfiguration authenticationConfiguration) throws Exception {
      return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    http.authorizeHttpRequests(authorize -> authorize
	            .requestMatchers("/", "/completeuserregistration", "/fragment_signin", "/fragment_signout", "/fragment_sendemail", 
	            		"/fragment_forgotpassword", "/fragment_header", "/resetpassword",	            		
	            		"/api/login", "/api/sendEmail", "/api/resetpassword", "/api/registeruser", "/api/isLoggedIn", "/api/updatePassword",
	            		"/public/**", "/webjars/**", "/css/**", "/js/**"
//	            		,"/api/project/test/resultData" // <- Tempolary
	            		).permitAll()
	            .requestMatchers("/api/admin/**", "/api/admin/**", "/admin/**").hasRole(/*"ADMIN"*/OpenTesterConst.Role.ROLE_ADMIN.name().replace("ROLE_", ""))
	            .requestMatchers("/api/**", "/tech/**").authenticated()            
	            .anyRequest().authenticated()
	            );
	    
        http.addFilter(new JsonAuthenticationFilter(authenticationManager(http.getSharedObject(AuthenticationConfiguration.class)), userRepository));
        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        http.csrf().disable();
        
	    
        http.addFilterAfter(new CheckTokenFilter(), JsonAuthenticationFilter.class);
/*	    
	       http.csrf().ignoringAntMatchers("/sample");
	        // 認証
	        http.authorizeRequests()
	                .antMatchers("/").permitAll()
	                .antMatchers("/api/login").permitAll()
	                .antMatchers("/public/**").permitAll()
	                .antMatchers("/api/**").authenticated();
	        // 独自フィルターの利用
	        // デフォルトのAuthenticationManagerを利用する
	        http.addFilter(new JsonAuthenticationFilter(authenticationManager(http.getSharedObject(AuthenticationConfiguration.class))));
	        // csrfを無効にしておく
	        // またCookieを利用してcsrf対策を行う
	        http.csrf().ignoringAntMatchers("/api/**");
*/	        

        HttpStatusReturningLogoutSuccessHandler handler = new HttpStatusReturningLogoutSuccessHandler() {
		    @Override
		    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response,
				    Authentication authentication) throws IOException {
			      super.onLogoutSuccess(request, response, authentication);
		    }
	    };
	    
	    //ログアウトのURL、セッション削除、ハンドラーの設定をする。
	    http.logout()
	    .logoutUrl("/api/logout")
	    .invalidateHttpSession(true)
	    .logoutSuccessHandler( handler );
	    
		return http.build();
	}

    @Bean
    PasswordEncoder passwordEncoder() {
    	return new BCryptPasswordEncoder();
    }
}
