package org.opentester.instrument;

import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Builder
@Data
@Entity
@Table(name = "instrument", uniqueConstraints = {@UniqueConstraint(columnNames={"product_family", "model_name"})})
public class InstrumentEntity {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(name = "model_name")
	@NotNull
	private String modelName;
	
	@Column(name = "product_family")
	private String productFamily;
	
	private String description;

	private String url;
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "instrument")
	private List<TestAbilityEntity> testAbilities = new ArrayList<>();
		
    @ManyToOne
    @JoinColumn(name = "instrumentVendor_id")
	private InstrumentVendorEntity instrumentVendor;
    
//    @ManyToOne
//    @JoinColumn(name = "type_id")
    @ManyToMany
    @JoinTable(
    	    name = "instrument_vs_ype",
    	    joinColumns = @JoinColumn(name = "instrument_id"),
    	    inverseJoinColumns = @JoinColumn(name = "instrument_type_id")
    	)
    private List<InstrumentTypeEntity> type;
    
    @Tolerate
    public InstrumentEntity() {}

	public static InstrumentEntity fromDto(InstrumentDto dto) {
		return InstrumentEntity.builder().id(dto.getId()).modelName(dto.getModelName()).productFamily(dto.getProductFamily()).build();
	}
}
