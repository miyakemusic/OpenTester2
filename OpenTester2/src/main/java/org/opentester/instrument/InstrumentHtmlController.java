package org.opentester.instrument;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class InstrumentHtmlController {
	@Autowired
	private TestItemRepository testItemRepository;
	
	@Autowired
	private InstrumentRepository instrumentRepository;
	
	@Autowired
	private TestAbilityRepository testAbilityRepository;
	
	@Autowired
	private InstrumentVendorRepository instrumentVendorRepository;
	
	@Autowired
	private MyInstrumentRepository myInstrumentRepository;
	
	@Autowired
	private InstrumentCategoryRepository instrumentCategoryRepository;
	
	@Autowired
	private InstrumentTypeRepository instrumentTypeRepository;
	
	@GetMapping("/admin/fragment_instrumenttype")
	public String fragment_instrumenttype(Model model, Principal principal) {
		model.addAttribute("categories", this.instrumentCategoryRepository.findAll());
		model.addAttribute("typelist", this.instrumentTypeRepository.findAll());
		model.addAttribute("dialog_content", "fragment_dummy");   	
//		model.addAttribute("myinst", new MyInstrumentEntity());
//		model.addAttribute("dialog_content", "fragment_myinstrument_info");
//		model.addAttribute("dialogTitle", "Instrument Type");
		
		return "fragment_instrumenttype";
	}
	
    @GetMapping("/admin/fragment_myinstrument")
    public String fragment_myinstrument(Model model, Principal principal) {
    	List<MyInstrumentEntity> list = this.myInstrumentRepository.findAll();
    	model.addAttribute("myinstlist", list);
    	model.addAttribute("myinst", new MyInstrumentEntity());
    	model.addAttribute("dialog_content", "fragment_myinstrument_info");   	
    	model.addAttribute("instlist", this.instrumentRepository.findAll(Sort.by("instrumentVendor").and(Sort.by("productFamily").and(Sort.by("modelName")))));
    	return "fragment_myinstrument";
    }
 
    @GetMapping("/admin/fragment_instrument")
    public String fragment_instrument(Model model, Principal principal) {
    	List<InstrumentEntity> list = this.instrumentRepository.findAll(Sort.by("instrumentVendor").and(Sort.by("productFamily").and(Sort.by("modelName"))));
    	model.addAttribute("instlist", list);
    	model.addAttribute("inst", new InstrumentEntity());
    	model.addAttribute("dialog_content", "fragment_instrument_info");   	
    	model.addAttribute("vendorlist", this.instrumentVendorRepository.findAll());
    	
    	model.addAttribute("typelist", instrumentTypeRepository.findAll());
    	model.addAttribute("categorylist", this.instrumentCategoryRepository.findAll());
    	
    	return "fragment_instrument";
    }
    
    @GetMapping("/admin/fragment_vendor")
    public String fragment_vendor(Model model, Principal principal) {
    	List<InstrumentVendorEntity> list = this.instrumentVendorRepository.findAll();
    	model.addAttribute("vendorlist", list);
    	model.addAttribute("vendor", new InstrumentVendorEntity());
    	model.addAttribute("dialog_content", "fragment_vendor_info");
    	return "fragment_vendor";
    }
    
    @GetMapping("/admin/fragment_testitem")
    public String fragment_testitem(Model model, Principal principal) {
    	List<TestItemEntity> list = this.testItemRepository.findAll();
    	model.addAttribute("testitemlist", list);
    	
    	return "fragment_testitem";
    }
}
