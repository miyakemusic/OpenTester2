package org.opentester.instrument;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/inst")
public class InstrumentRestController {
	@Autowired
	private TestItemRepository testItemRepository;
	
	@Autowired
	private TestAbilityRepository testAbilityRepository;
	
	@Autowired
	private InstrumentVendorRepository instrumentVendorRepository;
	
	@Autowired
	private MyInstrumentRepository myInstrumentRepository;

	@Autowired
	PagingAndSorInstrumentRepository pagingAndSorInstrumentRepository;
	
	@Autowired
	private InstrumentCategoryRepository instrumentCategoryRepository;
	
	@Autowired
	private InstrumentTypeRepository instrumentTypeRepository;

	
	@PostMapping("/admin/instrumentCategory")
	public String instrumentCategory(Principal princiapl, @RequestBody InstrumentCategoryEntity entity) {
		this.instrumentCategoryRepository.save(entity);
		return "OK";
	}
	
	@PostMapping("/admin/instrumentType")
	public String instrumentCategory(Principal princiapl, @RequestBody InstrumentTypeEntity entity) {
		this.instrumentTypeRepository.save(entity);
		return "OK";
	}	
	
	@DeleteMapping("/admin/instrumentType/{id}")
	public String instrumentCategory(Principal princiapl, @PathVariable Long id) {
		this.instrumentTypeRepository.deleteById(id);
		return "OK";
	}	
	
	@GetMapping("/myinstrument")
	public List<MyInstrumentEntity> myinstruments(Principal princiapl) {
		List<MyInstrumentEntity> ret = this.myInstrumentRepository.findAll();
		return ret;
	}
	
	@GetMapping("/myinstrument/{id}")
	public MyInstrumentEntity myinstruments(Principal princiapl, @PathVariable Long id) {
		MyInstrumentEntity ret = this.myInstrumentRepository.findById(id).get();
		ret.setPassword("");
		ret.getInstrument().getTestAbilities().clear();
		return ret;
	}
	
	@PostMapping("/admin/myinstrument")
	public String postMyInstrument(Principal princiapl, @RequestBody MyInstrumentEntity myinst) {
		if (myinst.getId() != null && this.myInstrumentRepository.existsById(myinst.getId())) {
			MyInstrumentEntity original = this.myInstrumentRepository.findById(myinst.getId()).get();
			if (myinst.getPassword().isEmpty()) {
				myinst.setPassword(original.getPassword());
//				myinst.getInstrument().setTestAbilities(original.getInstrument().getTestAbilities());
			}
			this.myInstrumentRepository.save(myinst);
		}
		else {
			this.myInstrumentRepository.save(myinst);
		}
		
		return "OK";
	}
	
	@Autowired
	private InstrumentRepository instrumentRepository;
	
	@GetMapping("/instrument")
	public List<InstrumentDto> instruments(Principal principal) {
		List<InstrumentEntity> entities = /*pagingAndSorInstrumentRepository.findAll();*/instrumentRepository.findAll();
		
		List<InstrumentDto> ret = new ArrayList<>();
		entities.forEach(e -> ret.add(InstrumentDto.fromEntity(e)));

		return ret;
	}
	
	@GetMapping("/instrument/{id}")
	public InstrumentEntity getInstrument(Principal principal, @PathVariable Long id) {
		Optional<InstrumentEntity> ret = instrumentRepository.findById(id);
		ret.get().getTestAbilities().clear();
		return ret.get();
	}
	
	@DeleteMapping("/admin/instrument/{id}")
	public String instrument(Principal principal, @PathVariable Long id) {
		this.instrumentRepository.deleteById(id);
		return "OK";
	}

	@PostMapping("/admin/instrument")
	public String instrument(Principal principal, @RequestBody InstrumentEntity inst) {
		if (inst.getId() != null && this.instrumentRepository.existsById(inst.getId())) {
			Optional<InstrumentEntity> e = this.instrumentRepository.findById(inst.getId());
			if (e.isPresent()) {
//				e.get().setDescription(instDto.getDescription());
//				e.get().setModelName(instDto.getModelName());
//				e.get().setProductFamily(instDto.getProductFamily());
//				this.instrumentRepository.save(e.get());
			}
		}
		else {
			//this.instrumentRepository.save(InstrumentEntity.fromDto(inst));
		}
		this.instrumentRepository.save(inst);
		
		return "OK";
	}
	
	@GetMapping("/vendor/{id}")
	public InstrumentVendorEntity vendor(Principal principal, @PathVariable Long id) {
		Optional<InstrumentVendorEntity> ret = this.instrumentVendorRepository.findById(id);
		return ret.get();
	}
	
	@PostMapping("/admin/vendor")
	public String vendor(Principal principal, @RequestBody InstrumentVendorEntity e) {
		this.instrumentVendorRepository.save(e);
		return "OK";
	}
	
//	@PostMapping("/vendor/{id}")
//	public String updatevendor(Principal principal, @PathVariable Long id, @RequestBody InstrumentVendorEntity e) {
//		this.instrumentVendorRepository.save(e);
//		return "OK";
//	}
    @GetMapping("/admin/insttest")
    public String test() {
		InstrumentVendorEntity instVendor = InstrumentVendorEntity.builder().name("EXFO").headquarter("Canada").url("https://www.exfo.com").build();
		instVendor = instrumentVendorRepository.save(instVendor);
		
		TestItemEntity fiberLength = TestItemEntity.builder().name("Fiber Length").unit("km").build();
		fiberLength = testItemRepository.save(fiberLength);
		TestItemEntity totalLoss = TestItemEntity.builder().name("Total Loss").unit("dB").build();
		totalLoss = testItemRepository.save(totalLoss);
		TestItemEntity opticalPower = TestItemEntity.builder().name("Optical Power").unit("dBm").build();
		opticalPower = testItemRepository.save(opticalPower);
			
		List<TestAbilityEntity> abilities = new ArrayList<>();

		InstrumentEntity inst = InstrumentEntity.builder().instrumentVendor(instVendor).
				productFamily("MaxTester").modelName("730D").description("PON/metro OTDR").url("https://www.exfo.com/en/products/field-network-testing/otdr-iolm/maxtester-730d/").testAbilities(abilities).build();
		inst = instrumentRepository.save(inst);
		
		TestAbilityEntity fiberLengthMaxTester720 = TestAbilityEntity.builder().testitem(fiberLength).instrument(inst).min(0.0).max(200.0).build();
		fiberLengthMaxTester720 = testAbilityRepository.save(fiberLengthMaxTester720);
		TestAbilityEntity totalLossMaxTester720 = TestAbilityEntity.builder().testitem(totalLoss).instrument(inst).min(0.0).max(35.0).build();
		totalLossMaxTester720 = testAbilityRepository.save(totalLossMaxTester720);
		TestAbilityEntity opticalPowerMaxTester720 = TestAbilityEntity.builder().testitem(opticalPower).instrument(inst).min(-50.0).max(10.0).build();
		opticalPowerMaxTester720 = testAbilityRepository.save(opticalPowerMaxTester720);
	
		inst = instrumentRepository.findByProductFamilyAndModelName("MaxTester", "730D");
		
		{
			MyInstrumentEntity myInst = MyInstrumentEntity.builder().instrument(inst).serialNumber("SN01234567890").status("OFFLINE").build();
			myInst = myInstrumentRepository.save(myInst);
		}
		{
			MyInstrumentEntity myInst = MyInstrumentEntity.builder().instrument(inst).serialNumber("SN01234567891").status("OFFLINE").build();
			myInst = myInstrumentRepository.save(myInst);
		}
		{
			MyInstrumentEntity myInst = MyInstrumentEntity.builder().instrument(inst).serialNumber("SN01234567892").status("ONLINE").build();
			myInst = myInstrumentRepository.save(myInst);
		}
		return "OK";
    }
}
