package org.opentester.user;

import java.util.ArrayList;
import java.util.List;

import org.opentester.OpenTesterConst;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
	
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AuthorityRepository authorityRepository;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
    
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        try{
            UserEntity entity = userRepository.findByUsername(username);

            List<SimpleGrantedAuthority> roles = new ArrayList<>();
            
            for (AuthorityEntity auth : entity.getAuthorities()) {
            	roles.add(new SimpleGrantedAuthority(auth.getAuthority()));
            }
            
            return new User(entity.getUsername(), 
            		entity.getPassword(), roles);

        }catch (Exception e) {
            throw new UsernameNotFoundException("User not found");
        }
    }

	public void createUser(UserDto user) throws Exception {
		if (userRepository.existsByUsername(user.getUsername())) {
			throw new Exception("User Exists");
		}
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		UserEntity userEntity = UserEntity.fromDto(user);//new UserEntity();
		
		final UserEntity newEntity = userRepository.save(userEntity);
		saveRoles(user, newEntity);
	}

	public void updateUser(UserDto user) {
    	UserEntity original = this.userRepository.findByUsername(user.getUsername());
    	
    	UserEntity newEntity = UserEntity.fromDto(user);
    	newEntity.setId(original.getId());
    	
    	if (user.getPassword().isEmpty()) {
    		newEntity.setPassword(original.getPassword());
    	}
    	else {
    		newEntity.setPassword(passwordEncoder.encode(user.getPassword()));
    	}
    	
		this.userRepository.save(newEntity);
		this.authorityRepository.deleteByUserEntityId(newEntity.getId());

		saveRoles(user, newEntity);
	}

	private void saveRoles(UserDto user, UserEntity newEntity) {
		user.getRoles().forEach(a -> {
			AuthorityEntity authEntity = new AuthorityEntity();
			authEntity.setUserEntity(newEntity);
			authEntity.setAuthority(/*"ROLE_" +*/ OpenTesterConst.Role.valueOf(a).name());
			authorityRepository.save(authEntity);
		});
	}
}
