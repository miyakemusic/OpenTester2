package org.opentester.user;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.opentester.MultiMessageSource;
import org.opentester.MyHost;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@RequestMapping("/api")
public class UserController {

	@Autowired
	private UserDetailsServiceImpl userService;
	
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private AuthorityRepository authorityRepository;
	
	@Autowired
	private MailSender mailSender;
	
	@Autowired
	private MultiMessageSource messageSource;

	@Autowired
	private VerificationCodeManager verificationCodeManager;
	
	@Autowired
	private MyHost myHost;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
    @GetMapping("/isLoggedIn") 
    public String login(Principal principal) {
    	if (principal == null) {
    		return "NotLoggedIn";
    	}
    	return principal.getName();
    }
    
    @PostMapping("/resetpassword")
    public EmailDto resetpassword(@Validated @RequestBody EmailDto user, BindingResult  result) {
    	if (!this.userRepository.existsByUsername(user.getEmail())) {
    		throw new MyUserException(messageSource.getMessage("label.user.invalidUserName"), null);
    	}
    	String message = "Reset Password";
    	String subject = "Reset Password";
    	
		String code = verificationCodeManager.generateCode(user.getEmail()).getCode();
		String html = "<html><body><a href=\"http://" + myHost.hostWithPort() + "/" + "resetpassword" + "?code=" + code + 
				"\">" + message + "</a></body></html>";
		
		SimpleMailMessage msg = new SimpleMailMessage();
        msg.setFrom("signup@opentester.net");
        msg.setTo(user.getEmail());
        msg.setSubject(subject);    

        msg.setText(html);
        try {
            mailSender.send(msg);
            
        } catch (MailException e) {
            e.printStackTrace();
        }
    	return user;
    }
    
    @PostMapping("/registeruser") 
    public UserDto registerUser(@Validated @RequestBody UserDto user, BindingResult  result) throws MyUserException {
    	String preRegisteredUser = this.verificationCodeManager.findUser(user.getCode());
    	if (preRegisteredUser.equals(user.getUsername())) {
    		return createUser(user, result);
    	}
    	throw new MyUserException("Invalid Code", null);
    }

	private UserDto createUser(UserDto user, BindingResult result) {
		if (result.hasErrors()) {
			throw new MyUserException(messageSource.getMessage("label.form.incorrectinput"), result.getFieldErrors());
    	}
    	else if (!user.isPasswordMatched()) {
    		throw new MyUserException(messageSource.getMessage("label.form.passwordnotmatch"), null);
    	}
    	else if (!user.isRoleSelected()) {
    		throw new MyUserException(messageSource.getMessage("label.form.norolesselected"), null);
    	}
    	else if (this.userRepository.existsByUsername(user.getUsername())) {
    		throw new MyUserException(messageSource.getMessage("label.form.userareadyexists"), null);
    	}
    	try {
			this.userService.createUser(user);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return user;//this.messageSource.getMessage("label.user.registered");
	}

    @PostMapping("/updatePassword") 
    public UserDto user(@Validated @RequestBody UserDto user, BindingResult result, Principal principal) throws MyUserException {
    	String preRegisteredUser = this.verificationCodeManager.findUser(user.getCode());
    	if (!preRegisteredUser.isEmpty() && preRegisteredUser.equals(user.getUsername())) {
    		if (!result.hasErrors() && user.isPasswordMatched()) {
    			UserEntity e = this.userRepository.findByUsername(user.getUsername());
    			e.setPassword(passwordEncoder.encode(user.getPassword()));
    			this.userRepository.save(e);
    			return user;
    		}
    	}
    	throw new MyUserException("Invalid User", null);
    }
    
    @GetMapping("/myaccount")
    public UserDto getMyAccount(Principal principal) {
//    	List<UserEntity> all = userRepository.findAll();
    	String username = principal.getName().replace("\"", "");
    	UserEntity u = userRepository.findByUsername(username);
    	return UserDto.fromEntity(u);
    }
    
    @GetMapping("/admin/userByUsername")
    public UserDto userByUsername(Principal principal, @RequestParam(value = "username", required=true) String username) {
    	UserDto ret = UserDto.fromEntity(this.userRepository.findByUsername(username));
    	return ret;
    }
    
    @GetMapping("/admin/user")
    public List<UserDto> getusers(Principal principal){
    	List<UserDto> ret = new ArrayList<>();
    	this.userRepository.findAll().forEach(u -> ret.add(UserDto.fromEntity(u)));
    	return ret;
    }
  
    @DeleteMapping("/admin/user")
    public String deleteusers(Principal principal, @RequestParam(value = "username", required=true) String username){
    	UserEntity userEntity = this.userRepository.findByUsername(username);
    	if (userEntity.containsAuthority("ROLE_ADMIN") && (this.authorityRepository.findByAuthority("ROLE_ADMIN").size() == 1)) {
    		throw new MyUserException(messageSource.getMessage("message.user.cannot_delete_last_admin"), null);
    	}
    	return userRepository.deleteByUsername(username);
    }
    
    @PostMapping("/admin/user")
    public UserDto updateusers(Principal principal, @Validated @RequestBody UserDto user, BindingResult  result) {   
    	if (this.userRepository.existsByUsername(user.getUsername())) {
    		if (userRepository.findByUsername(user.getUsername()).containsAuthority("ROLE_ADMIN") && (this.authorityRepository.findByAuthority("ROLE_ADMIN").size() == 1)
    				&& !user.getRoles().contains("ADMIN")) {
    			throw new MyUserException(messageSource.getMessage("message.user.cannot_delete_last_admin"), null);
    		}
    		this.userService.updateUser(user);
    	}
    	else {
    		throw new MyUserException(messageSource.getMessage("message.user.not_exists"), null);
    	}
//    	else {
//        	return createUser(user, result);
//    	}
    	return new UserDto();
    }
    
    @PostMapping("/admin/newuser")
    public UserDto createNewUser(Principal principal, @Validated @RequestBody UserDto user, BindingResult  result) {   
    	if (this.userRepository.existsByUsername(user.getUsername())) {
    		throw new MyUserException(messageSource.getMessage("label.form.userareadyexists"), null);
    	}
    	else {
        	UserDto ret = createUser(user, result);
        	
        	String message = "Welcome to OpenTester";
        	String subject = "Your account was registered";
        	
    		String html = "<html><body><a href=\"http://" + myHost.hostWithPort() + "/" +  
    				"\">" + message + "</a></body></html>";
    		
    		SimpleMailMessage msg = new SimpleMailMessage();
            msg.setFrom("signup@opentester.net");
            msg.setTo(user.getUsername());
            msg.setSubject(subject);    

            msg.setText(html);
            try {
                mailSender.send(msg);
                
            } catch (MailException e) {
                e.printStackTrace();
            }
            
        	return ret;
    	}
    }
    
    @PostMapping("/sendEmail")
    public String sendEmail(@Validated @RequestBody EmailDto user, BindingResult  result) throws UnknownHostException {    	
    	String code = verificationCodeManager.generateCode(user.getEmail()).getCode();
    	
    	String message = "New User";
    	String subject = "New User";

		String html = "<html><body><a href=\"http://" + myHost.hostWithPort() + "/" + "completeuserregistration" + "?code=" + code + 
				"\">" + message + "</a></body></html>";
		
		SimpleMailMessage msg = new SimpleMailMessage();
        msg.setFrom("signup@opentester.net");
        msg.setTo(user.getEmail());
        msg.setSubject(subject);    

        msg.setText(html);
        try {
            mailSender.send(msg);
            
        } catch (MailException e) {
            e.printStackTrace();
        }
        return this.messageSource.getMessage("label.user.emailsent");
    }
    

}
