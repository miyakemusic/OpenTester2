package org.opentester.user;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.stereotype.Service;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


public class JsonAuthenticationFilter extends UsernamePasswordAuthenticationFilter {
	private AuthenticationManager authenticationManager;
	
	private UserRepository userRepository;
	
	public JsonAuthenticationFilter(AuthenticationManager authenticationManager, UserRepository userRepository2){

	    // AuthenticationManagerの設定
	    this.authenticationManager = authenticationManager;
	    this.userRepository = userRepository2;
	    
	    // ログインパスを設定
	    setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher("/api/login","POST"));
	    
	    // ログイン用パラメータの設定
	    setUsernameParameter("username");
	    setPasswordParameter("password");


	    // ログイン成功時はtokenを発行してレスポンスにセットする
	    this.setAuthenticationSuccessHandler((req,res,ex) -> {
//	        List<SimpleGrantedAuthority> roles = UserDto.fromEntity(userRepository.findByUsername(ex.getName())).grantedAuthorities();
	    	String roles = userRepository.findByUsername(ex.getName()).authoritiesTextWithoutRole();
	        // トークンの作成
	        String token = JWT.create()
	                .withIssuer("OpenTester") //発行者
	                .withIssuedAt(new Date())
	                .withClaim("username", ex.getName()) //keyに対してvalueの設定。汎用的な様々な値を保持できる
	                .withClaim("role", roles)
	                .sign(Algorithm.HMAC256("secret")); // 利用アルゴリズムを指定してJWTを新規作成
	        res.setHeader("X-AUTH-TOKEN", token); // tokeをX-AUTH-TOKENというKeyにセットする
	        res.setStatus(200);
	        
	        System.out.println(token);
	    });

	    // ログイン失敗時
	    this.setAuthenticationFailureHandler((req,res,ex) -> {
	        res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
	    });
	}

	@Override
	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
	    try {
	        ServletInputStream stream = request.getInputStream();
	        // リクエストのjsonの値をUserFormにマッピングします。
	        UserDto form = new ObjectMapper().readValue(request.getInputStream(), UserDto.class);
	        List<SimpleGrantedAuthority> roles = UserDto.fromEntity(userRepository.findByUsername(form.getUsername())).grantedAuthorities();
	        
	        // これでデフォルトのProviderを利用しつつ、ユーザーレコードの取得に関してはUserDetailsServiceの実装クラスのloadUserByUsernameを利用する
	        return this.authenticationManager.authenticate(
	                new UsernamePasswordAuthenticationToken(form.getUsername(), form.getPassword(), roles)
	        );
	    } catch (IOException e) {
	        throw new RuntimeException(e);
	    }
	}
}
