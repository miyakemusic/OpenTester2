package org.opentester.user;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class CheckTokenFilter extends OncePerRequestFilter  {
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        
        // クライアント側からX-AUTH-TOKENヘッダーでトークンを渡す実装をするので、
    	// 此方側もX-AUTH-TOKENヘッダーからトークンを取得します。
        String token = request.getHeader("X-AUTH-TOKEN");

        //　トークンが無い場合は何もせずセッションの状態を維持しない
        if(token == null || token.isBlank()){
            filterChain.doFilter(request,response);
            return;
        }
        // Tokenの検証と認証を行う　デコード出来ない場合は例外が発生
        DecodedJWT decodedJWT = JWT.require(Algorithm.HMAC256("secret")).build().verify(token);
        
        // usernameの取得
        String username = decodedJWT.getClaim("username").toString();
//        String password = decodedJWT.getClaim("password").toString();
        
        
        // roleの取得
        String role = decodedJWT.getClaim("role").toString();
        List<SimpleGrantedAuthority> roles = new ArrayList<>();
        for (String r :  role.split(",")) {
        	roles.add(new SimpleGrantedAuthority(r.replace("\"", "").trim()));
        }
        // ログイン状態を維持すべく設定する。この処理が無いとアクセスエラーを返すようになります。
        SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(username,null,
        		roles ) );
        filterChain.doFilter(request,response);
    }
}
