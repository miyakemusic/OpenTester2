package org.opentester.user;

import java.util.ArrayList;
import java.util.List;

import org.springframework.security.core.authority.SimpleGrantedAuthority;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.Tolerate;

@Data
@Builder
public class UserDto {
	private static final long serialVersionUID = 1L;
	@Tolerate
	public UserDto() {}
	
	@Tolerate
    public UserDto(String username, String password) {
		this.username = username;
		this.password = password;
	}

	@Size(max = 32, message = "up to 32 letters")
	private String firstName = "";  
    
    @Size(max = 32, message = "up to 32 letters")
    private String lastName = "";
    
    @NotBlank
    @Size(min = 5, max = 32)
    private String password = "";
    
//    @NotBlank
//    @Size(min = 5, max = 32)
    private String matchingPassword = "";
    
    @Email
    private String username = "";

    private String code = "";
    
    private List<String> roles = new ArrayList<>();
    
    @JsonIgnore
	public boolean isPasswordMatched() {
		return !this.password.isEmpty() && this.password.equals(matchingPassword);
	}
//	public static UserDto builder() {
//		return new UserDto();
//	}
//	
//	public UserDto username(String username) {
//		this.username = username;
//		return this;
//	}
//
//	public UserDto password(String password) {
//		this.password = password;
//		return this;
//	}
//
//	public UserDto roles(String ... roles) {
//		for (String role : roles) {
//			this.roles.add(role);
//		}
//		return this;
//	}
//
//	public UserDto build() {
//		return this;
//	}
	
	public static UserDto fromEntity(UserEntity u) {
		UserDto ret = new UserDto();
		u.getAuthorities().forEach(a -> ret.roles.add(a.getAuthority()/*.replace("ROLE_", "")*/));
		ret.setFirstName(u.getFirstname());
		ret.setLastName(u.getLastname());
		ret.setUsername(u.getUsername());
		return ret;
	}
	
//	public UserDto firstname(String firstname) {
//		this.firstName = firstname;
//		return this;
//	}
//	
//	public UserDto lastname(String lastname) {
//		this.lastName = lastname;
//		return this;
//	}
//	
//	public UserDto role(String role) {
//		this.roles.add(role);
//		return this;
//	}
	
	public List<SimpleGrantedAuthority> grantedAuthorities() {
		List<SimpleGrantedAuthority> ret = new ArrayList<>();
		this.roles.forEach(e -> ret.add(new SimpleGrantedAuthority(/*"ROLE_" +*/ e)));
		
		return ret;
	}
	
	public String rolesText() {
		String ret = "";
		for (String auth : this.roles) {
			ret += auth + ", ";
		}
		if (ret.length() > 0) {
			ret = ret.substring(0, ret.length()-2);
		}
		return ret;
	}

	@JsonIgnore
	public boolean isRoleSelected() {
		return this.roles.size() > 0;
	}
    // standard getters and setters
}

