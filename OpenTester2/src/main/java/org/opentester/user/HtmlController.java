package org.opentester.user;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.opentester.MultiMessageSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class HtmlController {
//	public static final String INITIALADMIN = "INITIALADMIN";

	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private MultiMessageSource messageSource;
	
	@Autowired
	private VerificationCodeManager verificationCodeManager;
	
//	@GetMapping("/")
//	public String index(Model model, Principal principal) {
//		if (principal != null) {
//			List<UserEntity> list = userRepository.findAll();
//			model.addAttribute("userlist", list);
//			UserEntity user = this.userRepository.findByUsername(principal.getName());
//			if (user.containsAuthority("ROLE_ADMIN")) {
//				model.addAttribute("newuserEnabled", true);
//			}
//		}
//		return "index";
//	}
	
    @GetMapping("/fragment_signin")
    public String signindiv(Model model) {
    	if (this.userRepository.count() ==0) {
    		return initialadmin(model);
    	}
    	return "fragment_signin";
    }
    
    @GetMapping("/fragment_signout")
    public String signout(Model model, Principal principal) {
    	if (this.userRepository.count() ==0) {
    		return initialadmin(model);
    	}
    	model.addAttribute("username", principal.getName());
    	return "fragment_signout";
    }  
    
    @GetMapping("/fragment_header")
    public String fragment_header(Model model, Principal principal) {
    	UsernamePasswordAuthenticationToken token = (UsernamePasswordAuthenticationToken)principal;
    	model.addAttribute("isSignedIn", (principal != null));
    	
    	if (principal != null) {
    		model.addAttribute("username", principal.getName().replace("\"", ""));
        	boolean isAdmin = false;
        	for (GrantedAuthority auth :token.getAuthorities()) {
        		if (auth.getAuthority().equals("ROLE_ADMIN")) {
        			isAdmin= true;
        			break;
        		}
        	}
        	model.addAttribute("isAdmin", isAdmin);
    	}   	
    	
    	return "fragment_header";
    }
    
    @GetMapping("/fragment_forgotpassword")
    public String fotgotpassword(Model model) {
    	model.addAttribute("title", messageSource.getMessage("label.user.resetpassword"));
    	model.addAttribute("url", "/api/resetpassword");
    	return "fragment_sendemail";
    }

    @GetMapping("/fragment_requestnewuser")
    public String requestNewUser(Model model) {
    	return "fragment_sendemail";
    }
    
    @GetMapping("/admin/fragment_newuser")
    public String createNewUser(Model model) {
    	model.addAttribute("passwordEnabled", true);
    	model.addAttribute("usernameDisabled", false);
    	model.addAttribute("user", new UserDto());
    	return "fragment_newuser";
    }
    
    @GetMapping("/fragment_initialadmin")
    public String initialadmin(Model model) {
    	model.addAttribute("title", messageSource.getMessage("label.user.initialuser"));
    	model.addAttribute("url", "/api/sendEmail");
    	return "fragment_sendemail";
    }
    
    @GetMapping("/completeuserregistration")
    public String registerUser(Model model, @RequestParam(value = "code", required=true) String code) {
    	String username = this.verificationCodeManager.findUser(code);
    	if (username.isEmpty()) {
    		throw new MyUserException("INVALIDCODE", null);
    	}
    	UserDto user = new UserDto();
    	user.setUsername(username);
    	user.setCode(code);
    	
    	// Force to set admin for the initial user
    	if (this.userRepository.count() == 0) {
    		user.roles("USER", "ADMIN");
    	}
//    	TemporaryCode tempCode = this.verificationCodeManager.findCode(username);
//    	tempCode.getRoles().forEach(role -> user.role(role));
    	
    	model.addAttribute("isSignedIn", false);
    	model.addAttribute("isAdmin", false);
    	
    	model.addAttribute("user", user);
    	model.addAttribute("usernameDisabled", true);
    	model.addAttribute("passwordEnabled", true);
    	roleCheck(model, user);
    	model.addAttribute("roleDisabled", true);
    	model.addAttribute("url", "/api/registeruser");
    	return "userregistration";
    }

    @GetMapping("/resetpassword")
    public String resetpassword(Model model, @RequestParam(value = "code", required=true) String code) {
    	String username = this.verificationCodeManager.findUser(code);
    	if (username.isEmpty()) {
    		throw new MyUserException("INVALIDCODE", null);
    	}
    	UserDto user = new UserDto();
    	user.setUsername(username);
    	user.setCode(code);

    	model.addAttribute("user", user);
    	model.addAttribute("usernameDisabled", true);
    	model.addAttribute("passwordEnabled", true);
    	model.addAttribute("onlyPassword", true);
    	model.addAttribute("url", "/api/updatePassword");
    	
    	return "userregistration";
    }
    
	private void roleCheck(Model model, UserDto user) {
		model.addAttribute("checkadmin", user.getRoles().contains("ADMIN"));
    	model.addAttribute("checkuser", user.getRoles().contains("USER"));
	}
    
    @GetMapping("/admin/fragment_userinfo")
    public String fragment_userinfo(Model model, Principal principal, @RequestParam(value = "username", required=true) String username) {
    	UserDto user = UserDto.fromEntity(this.userRepository.findByUsername(username));
    	model.addAttribute("user", user);
    	model.addAttribute("passwordEnabled", false);
    	roleCheck(model, user);
    	model.addAttribute("usernameDisabled", true);
    	model.addAttribute("roleDisabled", false);
    	return "fragment_userinfo";
    }
  
    @GetMapping("/admin/fragment_usertable")
    public String fragment_usertable(Model model, Principal principal) {
    	List<UserDto> userList = new ArrayList<>();
    	this.userRepository.findAll().forEach(u -> userList.add(UserDto.fromEntity(u)));
    	model.addAttribute("userlist", userList);
    	return "fragment_usertable";
    }
    
    @GetMapping("/admin/fragment_userlist")
    public String fragment_userlist(Model model, Principal principal) {
    	List<UserDto> userList = new ArrayList<>();
    	this.userRepository.findAll().forEach(u -> userList.add(UserDto.fromEntity(u)));
    	model.addAttribute("user", new UserDto());
    	model.addAttribute("userlist", userList);
    	return "fragment_userlist";
    }
    
    @GetMapping("/admin/userlist")
    public String userlist(Model model, Principal principal) {
    	return "userlist";
    }
    
    @GetMapping("/admin/newuser")
    public String newuser(Model model, Principal principal) {
    	model.addAttribute("user", new UserDto());
    	return "userregistration";
    }
}
