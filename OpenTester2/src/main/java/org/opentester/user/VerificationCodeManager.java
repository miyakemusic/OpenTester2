package org.opentester.user;

import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import net.bytebuddy.utility.RandomString;

public class VerificationCodeManager {
	private Map<String/*username*/, TemporaryCode> codes = new HashMap<>();
	private long validPeriod = 10/*min*/ * 60 /*sec*/ * 1000;
	
	public VerificationCodeManager() {
		new Thread() {
			@Override
			public void run() {
				while(true) {
					long now = Calendar.getInstance().getTimeInMillis();
					Set<String> expired = new HashSet<>();
					for (Map.Entry<String, TemporaryCode> c : codes.entrySet()) {
						if ( (now - c.getValue().getTimeInMillis()) > validPeriod) {
							expired.add(c.getKey());
							System.out.println(c.getKey() + "was expired");
						}
					}
					expired.forEach(codes::remove);
					try {
						Thread.sleep(10*1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}.start();
	}
	
	public TemporaryCode generateCode(String username) {
		String code = RandomString.make(64);
		TemporaryCode tmpCode = new TemporaryCode(code, Calendar.getInstance().getTimeInMillis());
		codes.put(username, tmpCode);
		return tmpCode;
	}

	public String findUser(String code) {
		for (Map.Entry<String, TemporaryCode> c : codes.entrySet()) {
			if (c.getValue().getCode().equals(code)) {
				return c.getKey();
			}
		}
		return "";
	}

	public TemporaryCode findCode(String username) {
		return this.codes.get(username);
	}
	
	public int size() {
		return this.codes.size();
	}

	public void clear() {
		this.codes.clear();
	}

	public boolean isValid(String username) {
		TemporaryCode code = this.codes.get(username);
		return code != null;
	}

	public void replaceUsername(String oldUsername, String newUsername) {
		TemporaryCode code = this.codes.get(oldUsername);
		this.codes.put(newUsername, code);
		this.codes.remove(oldUsername);
		
	}
	
	
}
