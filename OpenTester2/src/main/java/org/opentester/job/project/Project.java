package org.opentester.job.project;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class Project {

	private int id;
	private String projectName;
	private String type;
	private String status;
//	private Date startDueDate;
//	private Date startDate;
//	private Date completeDueDate;
//	private Date completeDate;
//	private String location;
	
//	private List<ProjectNode> subProjects = new ArrayList<>();
	private List<Folder> folders = new ArrayList<>();

	public Set<String> allOperators() {
		Set<String> ret = new HashSet<>();
		this.folders.forEach(f -> ret.addAll(f.allOprerators()));
		return ret;
	}
	public static List<Project> testdata() {
//		int testItemId = 0;
		
		Calendar calendar = Calendar.getInstance();
		calendar.set(2023, 11, 15);
		Date dueDate1215 = calendar.getTime();
		
		calendar.set(2023, 11, 30);
		Date dueDate1230 = calendar.getTime();
		
		List<TestItem> testItemsMarunouchi = Arrays.asList(
				TestItem.builder().id(0).testTarget("FIBER.TOTAL_LENGTH").unit("km").criteria("MIN=20.00; MAX=20.01").operator("George Lynch")
					.resultHistory(Arrays.asList(TestResult.builder().id(0).result("20.001").date(new Date()).operator("Andarson Paak").build()))
					.completeDueDate(dueDate1215)
					.build(),
				TestItem.builder().id(1).testTarget("FIBER.TOTAL_LOSS").unit("dB").criteria("MAX=10.00").operator("George Lynch")
					.resultHistory(Arrays.asList(TestResult.builder().id(1).result("6.5").date(new Date()).operator("Andre young").build()))
					.completeDueDate(dueDate1215)
					.build(),
				TestItem.builder().id(2).testTarget("FIBER.MACROBEND_COUNT").unit("").criteria("MAX=0").operator("George Lynch")
					.resultHistory(Arrays.asList(TestResult.builder().id(2).result("0").date(new Date()).operator("Alicia Keys").build()))
					.completeDueDate(dueDate1215)
					.build(),
				TestItem.builder().id(3).testTarget("FIBER.ENDFACE.SCRATCH_COUNT").unit("").criteria("MAX=0").operator("George Lynch")
					.resultHistory(Arrays.asList(TestResult.builder().id(3).result("0").date(new Date()).operator("Andre young").build()))
					.completeDueDate(dueDate1215)
					.build(),
				TestItem.builder().id(4).testTarget("FIBER.ENDFACE.DEFECT_COUNT").unit("").criteria("MAX=0").operator("George Lynch")
					.resultHistory(Arrays.asList(TestResult.builder().id(4).result("0").date(new Date()).operator("Marshal Mathers").build()))
					.completeDueDate(dueDate1215)
					.build(),
				TestItem.builder().id(5).testTarget("RX.POWER").unit("dBm").criteria("MIN=-40").operator("George Lynch")
					.resultHistory(Arrays.asList(TestResult.builder().id(5).result("-34").date(new Date()).operator("Snoop Dogg").build()))
					.completeDueDate(dueDate1215)
					.build()
				);
		TestPoint testPointCable001Fiber001_Marunouchi = TestPoint.builder().id(0).name("PORT#0@MACHIDA").location("Tokyo Machida").testItems(testItemsMarunouchi).build();
		
		List<TestItem> testItemsMachida = Arrays.asList(
				TestItem.builder().id(6).testTarget("FIBER.TOTAL_LENGTH").criteria("MIN=20.00km; MAX=20.01km")
					.resultHistory(Arrays.asList(TestResult.builder().id(0).result("20.001km").date(new Date()).operator("Quentin Tarantino").build()))
					.completeDueDate(dueDate1230)
					.build(),
				TestItem.builder().id(7).testTarget("FIBER.TOTAL_LOSS").criteria("MAX=10.00dB")
					.completeDueDate(dueDate1230)
					.build(),
				TestItem.builder().id(8).testTarget("FIBER.MACROBEND_COUNT").criteria("MAX=0")
					.completeDueDate(dueDate1230)
					.build(),
				TestItem.builder().id(9).testTarget("FIBER_ENDFACE.SCRATCH_COUNT").criteria("MAX=0")
					.completeDueDate(dueDate1230)
					.build(),
				TestItem.builder().id(10).testTarget("FIBER_ENDFACE.DEFECT_COUNT").criteria("MAX=0")
					.completeDueDate(dueDate1230)
					.build(),
				TestItem.builder().id(11).testTarget("RX.POWER").criteria("MIN=-40dBm")
					.completeDueDate(dueDate1230)
					.build()
				);

		TestPoint testPointCable001Fiber001_Machida = TestPoint.builder().id(1).name("PORT#0@MARUNOUCHI").location("Tokyo Marunouchi").testItems(testItemsMachida).build();
		
		List<Folder> cables = new ArrayList<>();
		for (int cableid = 0; cableid < 8; cableid++) {
			List<Dut> duts = new ArrayList<>();
			Folder cable = Folder.builder().id(cableid).name("CABLEID00" + String.valueOf(cableid)).build();
			for (int fiberid = 0; fiberid < 8; fiberid++) {
				Dut fiber = Dut.builder().id(fiberid + cableid*8).dutName("FIBER#00" + String.valueOf(fiberid)).testPoints(
						Arrays.asList(testPointCable001Fiber001_Marunouchi, testPointCable001Fiber001_Machida)).build();
				duts.add(fiber);
			}
			cable.setDuts(duts);
			cables.add(cable);
		}
		
//		Dut dutCable001Fiber001 = Dut.builder().id(0).dutName("CABLE#001FIBER#001").testPoints(
//				Arrays.asList(testPointCable001Fiber001_Marunouchi, testPointCable001Fiber001_Machida)).build();


		
//		ProjectNode subProject1 = ProjectNode.builder().subProjectName("TPDR001@MARUNOURI_ROAMD102@MACCHIDA").duts(
//				Arrays.asList(dutCable001Fiber001)).build();//.project("DCI_Marunouchi0012_Mchida1203").subProject("TPDR001@MARUNOURI_ROAMD102@MACCHIDA");

		Project projectConstruction = Project.builder().id(0).projectName("DCI Construction@MARUNOURI-MACCHIDA").
				type("CONSTRUCTION")
				.status("COMPLETED")
//				.startDueDate(new Date()). startDate(new Date()).completeDueDate(new Date()).completeDate(new Date())
				.folders(cables)
				.build();
		
		Project projectConstruction2 = Project.builder().id(1).projectName("FTTH@ATSUGI")
				.type("CONSTRUCTION")//.location("Shinbashi, Shinjuku, Yokohama")
				.status("ON GOING\n2weeks delayed")
//				.startDueDate(new Date()).completeDueDate(new Date())
				.folders(cables)
				.build();			
		
		Project projectRepair = Project.builder().id(2).projectName("UENO_SHIBUYA")
				.type("REPAIR")//.location("Ueno, Shibuya")
				.status("UNDER PLANNING")
				.folders(cables)
				.build();	
		
		List<Project> ret = new ArrayList<>();
		ret.add(projectConstruction);
		ret.add(projectConstruction2);
		ret.add(projectRepair);
		return ret;
	}
	public Set<String> allLocations() {
		Set<String> ret = new HashSet<>();
		this.folders.forEach(f -> ret.addAll(f.allLocations()));
		return ret;
	}
	public PassFail passFail() {
		PassFail ret = new PassFail(0, 0, 0);
		this.folders.forEach(f -> {
			ret.add(f.passFail());
		});
		return ret;
	}
	public Date completeDueDate() {
		LatestDate latest = new LatestDate();
		for (Folder folder : this.folders) {
			Date date = folder.comleteDueDate();
			latest.add(date);
		}
		return latest.latest();
	}

}
