package org.opentester.job.project;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ProjectHtmlController {

	private static final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd");
	@GetMapping("/admin/projectlist")
	public String projects() {
		
		return "project";
	}
	
	@GetMapping("/admin/fragment_projectlist")
	public String fragment_projects(Model model, Principal principal) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		List<ProjectDto> projects = new ArrayList<>();
		Project.testdata().forEach(p -> {
			PassFail passFail = p.passFail();
			projects.add(
					ProjectDto.builder().id(p.getId()).name(p.getProjectName()).type(p.getType())
//					.startDueDate(formatDate(p.getStartDueDate()))
						.completeDueDate(formatDate(p.completeDueDate()))
						.status(p.getStatus())
						.operator(p.allOperators().toString())
						.location(p.allLocations().toString())
						.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched())
						.build()
					);
		});
		
		model.addAttribute("list", projects);
		model.addAttribute("linkList", link);
		return "fragment_projectlist";
	}

	@GetMapping("/admin/fragment_project")
	public String fragment_projectdetail(Model model, Principal principal, @RequestParam(value = "id", required=true) Integer id) {
		
//		List<ProjectDto> projectDto = new ArrayList<>();	
//		for (Dut dut : Project.testdata().get(0).getDuts()) {
//			for (TestPoint testPoint : dut.getTestPoints()) {
//				for (TestItem testItem : testPoint.getTestItems()) {
//					ProjectDto pro = ProjectDto.builder().id(0).dut(dut.getDutName()).testPoint(testPoint.getName()).criteria(testItem.getCriteria())
//							.completeDate(new Date()).completeDueDate(new Date()).startDate(new Date()).startDueDate(new Date()).status("").build();
//					projectDto.add(pro);
//				}
//			}
//		}
//		model.addAttribute("projectlist", projectDto);
		return "fragment_project";
	}
	
	@GetMapping("/admin/fragment_folderlist")
	public String fragment_folderlist(Model model, Principal principal) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
//		model.addAttribute("linkList", principal);
		List<FolderDto> folders = new ArrayList<>();	
		
		Project project = Project.testdata().get(0);
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?id=" + project.getId()).build());
		
		for (Folder folder : project.getFolders()) {
			if (folder.getSubFolder() != null) {
				for (Folder subFolder : folder.getSubFolder()) {
					
				}
			}
			else {
				PassFail passFail = folder.passFail();
				FolderDto folderDto = FolderDto.builder().id(folder.getId()).name(folder.getName())
						.status("ON-GOING (3DAYS DELAY)").summary(folder.getDuts().size() + " FIBERS," + folder.testPointCount() + " TEST POINTS")
						.operator(folder.allOprerators().toString()).completeDueDate(formatDate(folder.comleteDueDate()))
						.location(folder.allLocations().toString())
						.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build();
				folders.add(folderDto);
			}
			for (Dut dut : folder.getDuts()) {
//			for (TestPoint testPoint : dut.getTestPoints()) {
//				for (TestItem testItem : testPoint.getTestItems()) {
//					DutDto dutDto = DutDto.builder().id(dut.getId()).name(dut.getDutName()).passed(10).failed(3).untouched(100).status("ON-GOING")
//							.startDate(new Date()).completeDate(new Date())
//							.build();
//					duts.add(dutDto);

//				}
			}
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", folders);
		return "fragment_folderlist";	
	}
	
	@GetMapping("/admin/fragment_dutlist")
	public String fragment_dutlist(Model model, Principal principal) {
		List<DutDto> duts = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = Project.testdata().get(0);
		Folder folder = Project.testdata().get(0).getFolders().get(0);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?id=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?id=" + folder.getId()).build());

		//		for (Folder folder : Project.testdata().get(0).getFolders()) {
			
		
			for (Dut dut : folder.getDuts()) {
				PassFail passFail = dut.passFail();
				duts.add(DutDto.builder().name(dut.getDutName()).id(dut.getId())
						.summary(dut.getTestPoints().size() + " Test Points, " + dut.getTestItemCount() + " Test Items")
						.completeDate(formatDate(new Date())).completeDueDate(formatDate(dut.completeDueDate()))
						.operator(dut.allOperators().toString())
						.location(dut.allLocations().toString())
						.status("ON-GOING 2days Delay").operator(dut.allOperators().toString())
						.summary(dut.getTestPoints().size() + "TEST POINTS, " + dut.getTestItemCount()+ "TEST ITEMS")
						.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build());
//			for (TestPoint testPoint : dut.getTestPoints()) {
//				for (TestItem testItem : testPoint.getTestItems()) {
//					DutDto dutDto = DutDto.builder().id(dut.getId()).name(dut.getDutName()).passed(10).failed(3).untouched(100).status("ON-GOING")
//							.startDate(new Date()).completeDate(new Date())
//							.build();
//					duts.add(dutDto);

//				}
			}
//		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", duts);
		return "fragment_dutlist";
	}	
	
	@GetMapping("/admin/fragment_testpointlist")
	public String fragment_testpointlist(Model model, Principal principal) {
		List<TestPointDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = Project.testdata().get(0);
		Folder folder = Project.testdata().get(0).getFolders().get(0);
		Dut dut = Project.testdata().get(0).getFolders().get(0).getDuts().get(0);
//		TestPoint testpoint = Project.testdata().get(0).getFolders().get(0).getDuts().get(0).getTestPoints().get(0);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?id=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?id=" + folder.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?id=" + dut.getId()).build());
//		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testpointlist?id=" + folder.getId()).build());

		//		for (Folder folder : Project.testdata().get(0).getFolders()) {
			
		
//			for (Dut dut : folder.getDuts()) {
//				duts.add(DutDto.builder().name(dut.getDutName()).id(dut.getId()).passed((int)(Math.random()*10)).failed((int)(Math.random()*10)).untouched((int)(Math.random()*10)).build());
			for (TestPoint testPoint : dut.getTestPoints()) {
//				for (TestItem testItem : testPoint.getTestItems()) {
				
				PassFail passFail = testPoint.passFail();
				list.add(TestPointDto.builder().id(testPoint.getId()).name(testPoint.getName())
						.status("ON-GOING")
						.operator(testPoint.allOperators().toString())
						.location(testPoint.getLocation())
						.summary(testPoint.getTestItems().size() + " TEST ITEMS")
						.completeDate(formatDate(new Date())).completeDueDate(formatDate(testPoint.completeDueDate()))
						.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched())
								.build());
//				}
				
//				for (TestItem testItem : testPoint.getTestItems()) {
//					DutDto dutDto = DutDto.builder().id(dut.getId()).name(dut.getDutName()).passed(10).failed(3).untouched(100).status("ON-GOING")
//							.startDate(new Date()).completeDate(new Date())
//							.build();
//					duts.add(dutDto);

//				}
			}
//		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		return "fragment_testpointlist";
	}	
	
	@GetMapping("/admin/fragment_testitemlist")
	public String fragment_testitemlist(Model model, Principal principal) {
		List<TestItemDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = Project.testdata().get(0);
		Folder folder = Project.testdata().get(0).getFolders().get(0);
		Dut dut = Project.testdata().get(0).getFolders().get(0).getDuts().get(0);
		TestPoint testpoint = Project.testdata().get(0).getFolders().get(0).getDuts().get(0).getTestPoints().get(0);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?id=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?id=" + folder.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?id=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?id=" + testpoint.getId()).build());

		//		for (Folder folder : Project.testdata().get(0).getFolders()) {
			
		
//			for (Dut dut : folder.getDuts()) {
//				duts.add(DutDto.builder().name(dut.getDutName()).id(dut.getId()).passed((int)(Math.random()*10)).failed((int)(Math.random()*10)).untouched((int)(Math.random()*10)).build());
//			for (TestPoint testPoint : dut.getTestPoints()) {
				for (TestItem testItem : testpoint.getTestItems()) {
					TestItemDto testItemDto = TestItemDto.builder().id(testItem.getId())
					.testTarget(testItem.getTestTarget()).unit(testItem.getUnit()).criteria(testItem.getCriteria())
					.status("Pass").operator("Marshal Mathers").completeDueDate(formatDate(testItem.getCompleteDueDate()))
					.build();
					
					if (testItem.getResultHistory().size()> 0) {
						TestResult testResult = testItem.getResultHistory().get(0);
						testItemDto.setResult(testResult.getResult());
						testItemDto.setCompleteDate(formatDate(testResult.getDate()));
						testItemDto.setOperator(testResult.getOperator());
					}
					list.add(testItemDto);
//				}
				
//				for (TestItem testItem : testPoint.getTestItems()) {
//					DutDto dutDto = DutDto.builder().id(dut.getId()).name(dut.getDutName()).passed(10).failed(3).untouched(100).status("ON-GOING")
//							.startDate(new Date()).completeDate(new Date())
//							.build();
//					duts.add(dutDto);

				}
//			}
//		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		return "fragment_testitemlist";
	}

	private String formatDate(Date date) {
		if (date == null) {
			return "";
		}
		else {
			return dateFormatter.format(date);
		}
	}	
}
