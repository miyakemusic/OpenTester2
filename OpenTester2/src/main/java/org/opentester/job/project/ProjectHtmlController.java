package org.opentester.job.project;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ProjectHtmlController {

	private static final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd");
	@GetMapping("/admin/projectlist")
	public String projects() {
		
		return "project";
	}
	
	@GetMapping("/admin/fragment_projectlist")
	public String fragment_projects(Model model, Principal principal) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		List<ProjectDto> projects = new ArrayList<>();
		TempDB.instance().projects() .forEach(p -> {
			PassFail passFail = p.passFail();
			projects.add(
					ProjectDto.builder().id(p.getId()).name(p.getProjectName()).type(p.getType())
//					.startDueDate(formatDate(p.getStartDueDate()))
						.completeDueDate(formatDate(p.completeDueDate()))
						.status(p.getStatus())
						.operator(p.allOperators().toString())
						.location(p.allLocations().toString())
						.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched())
						.build()
					);
		});
		
		model.addAttribute("list", projects);
		model.addAttribute("linkList", link);
		return "fragment_projectlist";
	}
	
	@GetMapping("/admin/fragment_folderlist")
	public String fragment_folderlist(Model model, Principal principal, @RequestParam(value = "projectid", required=true) Integer projectid) {
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
//		model.addAttribute("linkList", principal);
		List<FolderDto> folders = new ArrayList<>();	
		
//		Project project = Project.testdata().get(id);
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		
		Project project = TempDB.instance().project(projectid);
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?projectid=" + project.getId()).build());
		
		for (Folder folder : TempDB.instance().getFolders(projectid)) {
			PassFail passFail = folder.passFail();
			FolderDto folderDto = FolderDto.builder().id(folder.getId()).name(folder.getName())
					.status("ON-GOING (3DAYS DELAY)").summary(folder.getDuts().size() + " FIBERS," + folder.testPointCount() + " TEST POINTS")
					.operator(folder.allOprerators().toString()).completeDueDate(formatDate(folder.comleteDueDate()))
					.location(folder.allLocations().toString())
					.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build();
			folders.add(folderDto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", folders);
		return "fragment_folderlist";	
	}
	
	@GetMapping("/admin/fragment_dutlist")
	public String fragment_dutlist(Model model, Principal principal, @RequestParam(value = "folderid", required=true) Integer folderid) {
		List<DutDto> duts = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = TempDB.instance().projectByFolder(folderid);//Project.testdata().get(0);
		Folder folder = TempDB.instance().folder(folderid); //Project.testdata().get(0).getFolders().get(0);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?folderid=" + folder.getId()).build());
	
		for (Dut dut : folder.getDuts()) {
			PassFail passFail = dut.passFail();
			duts.add(DutDto.builder().name(dut.getDutName()).id(dut.getId())
					.summary(dut.getTestPoints().size() + " Test Points, " + dut.getTestItemCount() + " Test Items")
					.completeDate(formatDate(new Date())).completeDueDate(formatDate(dut.completeDueDate()))
					.operator(dut.allOperators().toString())
					.location(dut.allLocations().toString())
					.status("ON-GOING 2days Delay").operator(dut.allOperators().toString())
					.summary(dut.getTestPoints().size() + "TEST POINTS, " + dut.getTestItemCount()+ "TEST ITEMS")
					.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched()).build());

		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", duts);
		return "fragment_dutlist";
	}	
	
	@GetMapping("/admin/fragment_testpointlist")
	public String fragment_testpointlist(Model model, Principal principal, @RequestParam(value = "dutid", required=true) Integer dutid) {
		List<TestPointDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = TempDB.instance().projectByDut(dutid); //Project.testdata().get(0);
		Folder folder = TempDB.instance().folderByDut(dutid);//Project.testdata().get(0).getFolders().get(0);
		Dut dut = TempDB.instance().dut(dutid); //Project.testdata().get(0).getFolders().get(0).getDuts().get(0);
//		TestPoint testpoint = Project.testdata().get(0).getFolders().get(0).getDuts().get(0).getTestPoints().get(0);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?folderid=" + folder.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());

		for (TestPoint testPoint : dut.getTestPoints()) {
				PassFail passFail = testPoint.passFail();
				list.add(TestPointDto.builder().id(testPoint.getId()).name(testPoint.getName())
						.status("ON-GOING")
						.operator(testPoint.allOperators().toString())
						.location(testPoint.getLocation())
						.summary(testPoint.getTestItems().size() + " TEST ITEMS")
						.completeDate(formatDate(new Date())).completeDueDate(formatDate(testPoint.completeDueDate()))
						.passed(passFail.getPassed()).failed(passFail.getFailed()).untouched(passFail.getUntouched())
								.build());
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		return "fragment_testpointlist";
	}	
	
	@GetMapping("/admin/fragment_testitemlist")
	public String fragment_testitemlist(Model model, Principal principal, @RequestParam(value = "testpointid", required=true) Integer testpointid) {
		List<TestItemDto> list = new ArrayList<>();	
		List<ProjectHierarchyDto> link = new ArrayList<>();
		
		Project project = TempDB.instance().projectByTestPoint(testpointid); //Project.testdata().get(0);
		Folder folder = TempDB.instance().folderByTestPoint(testpointid); //Project.testdata().get(0).getFolders().get(0);
		Dut dut = TempDB.instance().dutByTestPoint(testpointid); //Project.testdata().get(0).getFolders().get(0).getDuts().get(0);
		TestPoint testpoint = TempDB.instance().testPoint(testpointid); //Project.testdata().get(0).getFolders().get(0).getDuts().get(0).getTestPoints().get(0);
		
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?folderid=" + folder.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?testpointid=" + testpoint.getId()).build());

		for (TestItem testItem : testpoint.getTestItems()) {
			TestItemDto testItemDto = convertTestItem(testItem);
			list.add(testItemDto);
		}
		
		model.addAttribute("linkList", link);
		model.addAttribute("list", list);
		return "fragment_testitemlist";
	}

	private TestItemDto convertTestItem(TestItem testItem) {
		TestItemDto testItemDto = TestItemDto.builder().id(testItem.getId())
		.testTarget(testItem.getTestTarget()).unit(testItem.getUnit()).criteria(testItem.getCriteria())
		.status(testItem.status()).operator("Marshal Mathers").completeDueDate(formatDate(testItem.getCompleteDueDate()))
		.build();
		
		if (testItem.getResultHistory() != null && testItem.getResultHistory().size()> 0) {
			TestResult testResult = testItem.getResultHistory().get(0);
			testItemDto.setResult(testResult.getResult());
			testItemDto.setCompleteDate(formatDate(testResult.getDate()));
			testItemDto.setOperator(testResult.getOperator());
			testItemDto.setTester(testResult.getTester());
			testItemDto.setRawData(testResult.getRawData());
			testItemDto.setRawDataName(TempDB.instance().rawData(testResult.getRawData()).getName());
		}
		return testItemDto;
	}

	@GetMapping("/admin/fragment_resultdetail")
	public String fragment_resultdetail(Model model, Principal principal, @RequestParam(value = "testitemid", required=true) Integer testitemid) {
		Project project = TempDB.instance().projectByTestItem(testitemid); //Project.testdata().get(0);
		Folder folder = TempDB.instance().folderByTestItem(testitemid); //Project.testdata().get(0).getFolders().get(0);
		Dut dut = TempDB.instance().dutByTestItem(testitemid); //Project.testdata().get(0).getFolders().get(0).getDuts().get(0);
		TestPoint testpoint = TempDB.instance().testPointByTestItem(testitemid); //Project.testdata().get(0).getFolders().get(0).getDuts().get(0).getTestPoints().get(0);
		TestItem testItem = TempDB.instance().testItem(testitemid);
		
		TestItemDto testItemDto =convertTestItem(testItem);
		
		model.addAttribute("dut", project.getProjectName() + " - " + folder.getName() + " - " + dut.getDutName() + " - " + testpoint.getName() + " - " + testItem.getTestTarget());
		model.addAttribute("criteria", testItemDto.getCriteria());
		model.addAttribute("result", testItemDto.getResult());
		model.addAttribute("status", testItemDto.getStatus());
		model.addAttribute("unit", testItemDto.getUnit());
		model.addAttribute("operator", testItemDto.getOperator());
		model.addAttribute("completeDueDate", testItemDto.getCompleteDueDate());
		model.addAttribute("completeDate", testItemDto.getCompleteDate());
		
		model.addAttribute("rawDataName", testItemDto.getRawDataName());
		model.addAttribute("rawDataUrl", "/api/project/admin/rawData?id=" + testItemDto.getRawData());
		model.addAttribute("imageUrl", "/api/project/admin/image?id=" + testItemDto.getRawData());
		
		List<ProjectHierarchyDto> link = new ArrayList<>();
		link.add(ProjectHierarchyDto.builder().name("Projects").page("/admin/fragment_projectlist").build());
		link.add(ProjectHierarchyDto.builder().name(project.getProjectName()).page("/admin/fragment_folderlist?projectid=" + project.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(folder.getName()).page("/admin/fragment_dutlist?folderid=" + folder.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(dut.getDutName()).page("/admin/fragment_testpointlist?dutid=" + dut.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testpoint.getName()).page("/admin/fragment_testitemlist?testpointid=" + testpoint.getId()).build());
		link.add(ProjectHierarchyDto.builder().name(testItem.getTestTarget()).page("/admin/fragment_resultdetail?testitemid=" + testItem.getId()).build());
		
		model.addAttribute("linkList", link);
		
		return "fragment_resultdetail";
	}
	
	private String formatDate(Date date) {
		if (date == null) {
			return "";
		}
		else {
			return dateFormatter.format(date);
		}
	}	
}
