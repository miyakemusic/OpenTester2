package org.opentester.job.project;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class TempDB {

	private List<Project> projects = null;
	private List<RawData> rawData = null;
	private Map<Integer, ProjectUser> users = new HashMap<>();
	public List<Folder> getFolders(Integer id) {
		return project(id).getFolders();
	}
	
	private TempDB() {
		try {
			rawData = new ArrayList<>();	
			projects = new ArrayList<>();
			
			users.put(0, ProjectUser.builder().id(0).username("Anderson Paak").team("MA34").role("Drummer").organization("Aftermath").build());
			users.put(1, ProjectUser.builder().id(1).username("Andre Young").team("MA34").role("Producer/Rapper").organization("Aftermath").build());
			users.put(2, ProjectUser.builder().id(2).username("Marshal Mathers").team("MA34").role("Rapper").organization("Aftermath").build());
			users.put(3, ProjectUser.builder().id(3).username("Chris Brown").team("MA34").role("Singer").organization("JIVE").build());
			
			
			TestPoint testPointMarunouchi = createTestPoint("MARUNOUCHI");
			TestPoint testPointMachida = createTestPoint("MACHIDA");
			
			List<Folder> cables = new ArrayList<>();
			for (int cableid = 0; cableid < 8; cableid++) {
				List<Dut> duts = new ArrayList<>();
				Folder cable = Folder.builder().id(cableid).name("CABLEID00" + String.valueOf(cableid)).build();
				for (int fiberid = 0; fiberid < 8; fiberid++) {
					Dut fiber = Dut.builder().id(fiberid + cableid*8).dutName("FIBER#00" + String.valueOf(fiberid)).testPoints(
							Arrays.asList(testPointMarunouchi, testPointMachida)).build();
					duts.add(fiber);
				}
				cable.setDuts(duts);
				cables.add(cable);
			}
			
	//		Dut dutCable001Fiber001 = Dut.builder().id(0).dutName("CABLE#001FIBER#001").testPoints(
	//				Arrays.asList(testPointCable001Fiber001_Marunouchi, testPointCable001Fiber001_Machida)).build();
	
	
			
	//		ProjectNode subProject1 = ProjectNode.builder().subProjectName("TPDR001@MARUNOURI_ROAMD102@MACCHIDA").duts(
	//				Arrays.asList(dutCable001Fiber001)).build();//.project("DCI_Marunouchi0012_Mchida1203").subProject("TPDR001@MARUNOURI_ROAMD102@MACCHIDA");
	
			Project projectConstruction = Project.builder().id(0).projectName("DCI Construction@MARUNOURI-MACCHIDA").
					type("CONSTRUCTION")
					.status("COMPLETED")
	//				.startDueDate(new Date()). startDate(new Date()).completeDueDate(new Date()).completeDate(new Date())
					.folders(cables)
					.build();
			
			Project projectConstruction2 = Project.builder().id(1).projectName("FTTH@ATSUGI")
					.type("CONSTRUCTION")//.location("Shinbashi, Shinjuku, Yokohama")
					.status("ON GOING\n2weeks delayed")
	//				.startDueDate(new Date()).completeDueDate(new Date())
					.folders(cables)
					.build();			
			
			Project projectRepair = Project.builder().id(2).projectName("UENO_SHIBUYA")
					.type("REPAIR")//.location("Ueno, Shibuya")
					.status("UNDER PLANNING")
					.folders(cables)
					.build();	
			
			projects.add(projectConstruction);
			projects.add(projectConstruction2);
			projects.add(projectRepair);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private TestPoint createTestPoint(String location) {
		Calendar calendar = Calendar.getInstance();
		calendar.set(2023, 11, 15);
		Date dueDate1215 = calendar.getTime();
		
		calendar.set(2023, 11, 30);
		Date dueDate1230 = calendar.getTime();
		
		int otdr = this.rawDataOtdr();
		int fip = this.rawDataFip();
		
		List<TestItem> testItemsMarunouchi = Arrays.asList(
				TestItem.builder().id(0).testTarget("FIBER.TOTAL_LENGTH").unit("km").criteria("(20.00 <= x) && (x <= 20.01)").operator(0)
					.resultHistory(Arrays.asList(TestResult.builder().id(0).result("20.001").date(new Date()).operator(0).tester("MT9085A-053").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(1).testTarget("FIBER.TOTAL_LOSS").unit("dB").criteria("x<=10.00").operator(1)
					.resultHistory(Arrays.asList(TestResult.builder().id(1).result("6.5").date(new Date()).operator(1).tester("MT9085A-053").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(2).testTarget("FIBER.MACROBEND_COUNT").unit("").criteria("x==0").operator(2)
					.resultHistory(Arrays.asList(TestResult.builder().id(2).result("0").date(new Date()).operator(2).tester("MT9085A-053").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(3).testTarget("FIBER.ENDFACE.SCRATCH_COUNT").unit("").criteria("x==0").operator(3)
					.resultHistory(Arrays.asList(TestResult.builder().id(3).result("0").date(new Date()).operator(3).tester("MT9085A-053").rawData(fip).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(4).testTarget("FIBER.ENDFACE.DEFECT_COUNT").unit("").criteria("x==0").operator(0)
					.resultHistory(Arrays.asList(TestResult.builder().id(4).result("0").date(new Date()).operator(0).tester("MT9085A-053").rawData(fip).build()))
					.completeDueDate(dueDate1215)
					.build().calculate(),
				TestItem.builder().id(5).testTarget("RX.POWER").unit("dBm").criteria("x >= -40").operator(1)
					.resultHistory(Arrays.asList(TestResult.builder().id(5).result("-41").date(new Date()).operator(1).tester("CMA5").rawData(otdr).build()))
					.completeDueDate(dueDate1215)
					.build().calculate()
				);
		TestPoint testPoint = TestPoint.builder().id(0).name("PORT#0").location(location).testItems(testItemsMarunouchi).build();
		
//		List<TestItem> testItemsMachida = Arrays.asList(
//				TestItem.builder().id(6).testTarget("FIBER.TOTAL_LENGTH").criteria("(x>=20.00) && (x<=20.01)")
//					.resultHistory(Arrays.asList(TestResult.builder().id(0).result("20.001").date(new Date()).operator("Quentin Tarantino").rawData(rawDataOtdr()).build()))
//					.completeDueDate(dueDate1230)
//					.build().calculate(),
//				TestItem.builder().id(7).testTarget("FIBER.TOTAL_LOSS").criteria("x<=10.00")
//					.completeDueDate(dueDate1230)
//					.build().calculate(),
//				TestItem.builder().id(8).testTarget("FIBER.MACROBEND_COUNT").criteria("x==0")
//					.completeDueDate(dueDate1230)
//					.build().calculate(),
//				TestItem.builder().id(9).testTarget("FIBER_ENDFACE.SCRATCH_COUNT").criteria("x==0")
//					.completeDueDate(dueDate1230)
//					.build().calculate(),
//				TestItem.builder().id(10).testTarget("FIBER_ENDFACE.DEFECT_COUNT").criteria("x==0")
//					.completeDueDate(dueDate1230)
//					.build().calculate(),
//				TestItem.builder().id(11).testTarget("RX.POWER").criteria("x >= -40")
//					.completeDueDate(dueDate1230)
//					.build().calculate()
//				);
//
//		TestPoint testPoint = TestPoint.builder().id(1).name("PORT#0@MARUNOUCHI").location("Tokyo Marunouchi").testItems(testItemsMachida).build();

		return testPoint;
	}

	private int rawDataFip() {
		try {
			RawData fip = RawData.builder().id(rawDataId++)
					.name("VIP.vipi")
					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png")))
					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\FF-730AW_09.png"))).build();
			this.rawData.add(fip);
			return fip.getId();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	private int rawDataId = 0;
	private int rawDataOtdr() {
		try {
			RawData otdr = RawData.builder().id(rawDataId++)
					.name("otdr.sor")
					.file(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG")))
					.image(Files.readAllBytes(Paths.get("C:\\Users\\miyak\\Desktop\\otdr.PNG"))).build();
			this.rawData.add(otdr);
			return otdr.getId();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	private static TempDB instance = null;
	public static TempDB instance() {
		if (instance == null) {
			instance = new TempDB();

		}
		return instance;
	}
	public Project project(Integer id) {
		for (Project project : projects) {
			if (project.getId() == id) {
				return project;
			}
		}
		return null;
	}

	public Project projectByFolder(Integer folderid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				if (folder.getId() == folderid) {
					return project;
				}
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Folder folder(Integer folderid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				if (folder.getId() == folderid) {
					return folder;
				}
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByDut(Integer dutid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return project;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Folder folderByDut(Integer dutid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return folder;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return project;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Folder folderByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return folder;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dutByTestPoint(Integer testpointid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return dut;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public TestPoint testPoint(Integer testpointid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						if (testPoint.getId() == testpointid) {
							return testPoint;
						}
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dut(Integer dutid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					if (dut.getId() == dutid) {
						return dut;
					}
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							
						}
					}
				}
			}
		}
		return null;
	}

	public Project projectByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return project;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public Folder folderByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return folder;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public Dut dutByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return dut;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public TestPoint testPointByTestItem(Integer testitemid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return testPoint;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public TestItem testItem(Integer testitemid) {
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getId() == testitemid) {
								return testItem;
							}
						}
					}
				}
			}
		}
		return null;
	}

	public void addRawData(RawData fip) {
		rawData.add(fip);
	}

	public RawData rawData(int id) {
		for (RawData d : rawData) {
			if (d.getId() == id) {
				return d;
			}
		}
		return null;
	}

	public List<Project> projects() {
		return this.projects;
	}

	public Set<TestItem> relatedTestItemsByRawData(int rawData2) {
		Set<TestItem> ret = new HashSet<>();
		for (Project project : projects) {
			for (Folder folder : project.getFolders()) {
				for (Dut dut : folder.getDuts()) {
					for (TestPoint testPoint : dut.getTestPoints()) {
						for (TestItem testItem : testPoint.getTestItems()) {
							if (testItem.getResultHistory() == null) {
								continue;
							}
							for (TestResult result : testItem.getResultHistory()) {
								if (result.getRawData() == rawData2) {
									ret.add(testItem);
								}
							}
						}
					}
				}
			}
		}
		return ret;
	}

	public ProjectUser user(int operator) {
		return this.users.get(operator);
	}

}
