package org.opentester.job.vi;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

import org.opentester.project.TestResultPackageDto;
import org.opentester.project.dto.TestItemDto;
import org.opentester.project.dto.TestPointDto;
import org.opentester.project.dto.TestResultDto;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClient;

class TempResult {
	public int tester = -1;
	public String result = "";
	public String rawData = "";
}
public class VirtualInstrument extends JFrame {

	public static void main(String[] args) {
		new VirtualInstrument().setVisible(true);;
	}

	protected TestPointDto testPointDto;

	private Map<Integer, TempResult> results = new HashMap<>();
	
	public VirtualInstrument() {
		
		String token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiUk9MRV9BRE1JTixST0xFX1VTRVIiLCJpc3MiOiJPcGVuVGVzdGVyIiwiaWF0IjoxNzAzOTkwOTQyLCJ1c2VybmFtZSI6Im1peWFrZW11c2ljQGdtYWlsLmNvbSJ9.knakZ0xQhxVzgwlnwdWwK8i_40tPz2gA0zpTszHLDWY";
		RestClient restClient = RestClient.builder().defaultHeader("X-AUTH-TOKEN", token).build();
		
		this.setSize(new Dimension(1000, 700));
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		
		this.getContentPane().setLayout(new BorderLayout());
		JPanel north = new JPanel();
		north.setLayout(new BorderLayout());
		this.getContentPane().add(north, BorderLayout.NORTH);
		JButton updateList = new JButton("Update Table");
		
		north.setLayout(new FlowLayout());
		north.add(updateList);
		
		List<String> title = Arrays.asList("ID", "NAME", "TARGET", "CRITERIA", "RESULT", "RAWDATA", "TESTER");
		AbstractTableModel model = new AbstractTableModel() {

			@Override
			public int getRowCount() {
				if (testPointDto == null) {
					return 0;
				}
				return testPointDto.getTestItems().size();
			}

			@Override
			public int getColumnCount() {
				return title.size();
			}
			
			@Override
			public String getColumnName(int column) {
				return title.get(column);
			}

			@Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
				if (title.indexOf("RESULT") == columnIndex || title.indexOf("RAWDATA") == columnIndex || title.indexOf("TESTER") == columnIndex) {
					return true;
				}
				return false;
			}

			@Override
			public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
				TestItemDto testItemDto = testPointDto.getTestItems().get(rowIndex);
				//int id = (int)getValueAt(rowIndex, title.indexOf("ID"));
				
				if (title.indexOf("RESULT") == columnIndex){
					result(testItemDto.getId()).result = (String)aValue;
				}
				else if (title.indexOf("RAWDATA") == columnIndex){
					result(testItemDto.getId()).rawData = (String)aValue;
				}
				else if (title.indexOf("TESTER") == columnIndex){
					result(testItemDto.getId()).tester = Integer.valueOf((String)aValue);
				}
				this.fireTableDataChanged();
			}

			@Override
			public Object getValueAt(int rowIndex, int columnIndex) {
				TestItemDto testItemDto = testPointDto.getTestItems().get(rowIndex);
				if (title.indexOf("ID") == columnIndex) {
					return testItemDto.getId();
				}
				else if (title.indexOf("DESCRIPTION") == columnIndex){
					return testItemDto.getName();
				}
				else if (title.indexOf("TARGET") == columnIndex){
					return testItemDto.getTestTarget();
				}
				else if (title.indexOf("CRITERIA") == columnIndex){
					return testItemDto.getCriteria();
				}
				else if (title.indexOf("NAME") == columnIndex){
					return testItemDto.getName();
				}
				else if (title.indexOf("RESULT") == columnIndex){
					//return testItemDto.getResult();
					return result(testItemDto.getId()).result;
				}
				else if (title.indexOf("RAWDATA") == columnIndex){
					return result(testItemDto.getId()).rawData;
				}
				else if (title.indexOf("TESTER") == columnIndex){
					return result(testItemDto.getId()).tester;
				}
				return "";
			}
		};
		JTable table = new JTable(model);
		this.getContentPane().add(new JScrollPane(table), BorderLayout.CENTER);
		
		updateList.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				testPointDto = get(restClient);
				model.fireTableDataChanged();
			}
		});
		
		JButton upload = new JButton("Upload");
		JPanel south = new JPanel();
		south.setLayout(new FlowLayout());
		this.getContentPane().add(south, BorderLayout.SOUTH);
		upload.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {				
				List<TestResultDto> resultItems = new ArrayList<>();
				String rawData = "";
				for (Map.Entry<Integer, TempResult> result : results.entrySet()) {
					if (result.getValue().result.isBlank()) {
						continue;
					}
					resultItems.add(TestResultDto.builder().id(result.getKey()).result(result.getValue().result).build());
					if (result.getValue().rawData != null && !result.getValue().rawData.isEmpty()) {
						rawData = result.getValue().rawData;
					}
				}
				
				try {
					TestResultPackageDto result = TestResultPackageDto.builder()
							.date(new Date()).operator(0).tester(0).results(resultItems)
							.rawDataName(new File(rawData).getName())
							.rawData(Files.readAllBytes(Paths.get(rawData)))
							.build();
					post(restClient, result);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		});
		south.add(upload);
	}

	protected void upload(int[] selectedRows, JTable table) {
		
	}

	private TestPointDto get(RestClient restClient) {
		TestPointDto result = restClient.get() 
				  .uri("http://localhost:8080/api/project/admin/testPoint/0") 
				  .retrieve() 
				  .body(TestPointDto.class); 

		return result;
	}
	
	private void post(RestClient restClient, TestResultPackageDto result) {
		try {
			ResponseEntity<Void> response = restClient.post() 
					  .uri("http://localhost:8080/api/project/admin/resultData") 
					  .contentType(MediaType.APPLICATION_JSON) 
					  .body(result) 
					  .retrieve()
					  .toBodilessEntity(); 
			System.out.println(response);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private TempResult result(int id) {
		if (!this.results.containsKey(id)) {
			this.results.put(id, new TempResult());
		}
		return this.results.get(id);
	}
}