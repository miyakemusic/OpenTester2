function auth_createJsonError(responseText) {
	var errors = JSON.parse(responseText);
	var html = '<div>' + errors.error.code + '</div>';
	for (var e of errors.error.errors) {
		html += '<div>' + e.field + ':' + e.error + '</div>';
	}
	return html;
}

class Auth {
	constructor() {

	}
	
	auth_showJsonError(responseText) {
		$('#fragment_auth_loginmessagediv').empty();
		$('#fragment_auth_loginmessagediv').addClass('alert alert-danger');
		$('#fragment_auth_loginmessagediv').append(auth_createJsonError(responseText));
		$('#fragment_auth_loginmessagediv').show();
	}
	
	initAuth() {
		var token = localStorage.getItem('OPENTESTER-X-AUTH-TOKEN');
		if (token != null) {
	        $.ajaxSetup({
			    headers: { "X-AUTH-TOKEN": token }
			});				
			
			checkLoggedIn();	
		}
		else {
			this.getLoginPage('fragment_auth_logindiv');
		}
		
		var me = this;
		function checkLoggedIn() {
			$.ajax({
			  url: '/api/isLoggedIn',
			  type: 'GET',
			  dataType: "text",
			}).done((data, textStatus, jqXHR) => {
				if (data == 'NotLoggedIn') {
					me.changeState('requestLogin');
				}
				else {
					me.changeState('loggedIn');
				}
			}).fail((jqXHR, textStatus, errorThrown) => {

			});				
		}
	}

	
	getLoginPage(base) {
		$.ajax({
			url: '/fragment_signin',
			type: 'GET',
		  //contentType: 'text/html',
		  dataType: "text",
		}).done((html, textStatus, jqXHR) => {
			$('#' + base).empty();
			this.hideLoginMessage();
			$('#' + base).append(html);
		}).fail((jqXHR, textStatus, errorThrown) => {

		});	
	}

	sendemail() {
		$.ajax({
		  url: '/api/sendEmail',
		  type: 'POST',
		  contentType: 'application/json',
		  dataType: "text", 
		  data: JSON.stringify(fragment_sendemail_object()),
		}).done((data, textStatus, jqXHR) => {
			fragment_sendemail_showSentMessage();			
		}).fail((jqXHR, textStatus, errorThrown) => {
		    this.showLoginError(jqXHR, textStatus, errorThrown);
		});		
	}

	login() {	
		var me = this;		
		$.ajax({
		  url: '/api/login',
		  type: 'POST',
		  contentType: 'application/json',
		  dataType: "html", 
		  data: JSON.stringify({username: $('#fragment_signin_username').val(), password: $('#fragment_signin_password').val()}),
		}).done((data, textStatus, jqXHR) => {
			me.hideLoginMessage();
			localStorage.setItem('OPENTESTER-X-AUTH-TOKEN', jqXHR.getResponseHeader('X-AUTH-TOKEN'));
	        $.ajaxSetup({
			    headers: { "X-AUTH-TOKEN": jqXHR.getResponseHeader('X-AUTH-TOKEN') }
			});						
			me.changeState('loggedIn');
		}).fail((jqXHR, textStatus, errorThrown) => {
		    me.showLoginError(jqXHR, textStatus, errorThrown);
		});				
	}

	logout() {
		var me = this;
		$.ajax({
		  url: '/api/logout',
		  type: 'GET',
		  dataType: "text", 
		}).done((data, textStatus, jqXHR) => {
			localStorage.removeItem('OPENTESTER-X-AUTH-TOKEN');
			delete $.ajaxSettings.headers["X-AUTH-TOKEN"];
			auth.changeState('loggedOut');	
		}).fail((jqXHR, textStatus, errorThrown) => {
		    me.showLoginError(jqXHR, textStatus, errorThrown);
		});			
			
	}

	forgotpassword() {
		var me = this;
		$.ajax({
		  url: '/fragment_forgotpassword',
		  type: 'GET',
		  dataType: "text",
		}).done((data, textStatus, jqXHR) => {
//			$('#fragment_auth_logindiv').empty();
			me.hideLoginMessage();	
			$('#fragment_auth_logindiv').append(data);	
		}).fail((jqXHR, textStatus, errorThrown) => {
			me.showLoginError(jqXHR, textStatus, errorThrown);
		});			
	}	

	showLoginError( err, text, message)	{
		$('#fragment_auth_loginmessagediv').empty();
		$('#fragment_auth_loginmessagediv').show();
		$('#fragment_auth_loginmessagediv').addClass('alert alert-danger');
		$('#fragment_auth_loginmessagediv').removeClass('alert-primary');
		$('#fragment_auth_loginmessagediv').append('<div>' + err.status +', ' + text + ', ' + message.message + '</div>');
	}	
	
	hideLoginMessage() {
		$('#fragment_auth_loginmessagediv').hide();
	}
	
	callback(cb) {
		this.cb = cb;
	}
	
	changeState(state) {
		this.cb(state);
	}
}
var auth = new Auth();