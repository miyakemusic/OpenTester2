package org.opentester.instrument;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.opentester.instrument.InstrumentEntity;
import org.opentester.instrument.InstrumentRepository;
import org.opentester.instrument.InstrumentVendorEntity;
import org.opentester.instrument.InstrumentVendorRepository;
import org.opentester.instrument.TestAbilityEntity;
import org.opentester.instrument.TestAbilityRepository;
import org.opentester.instrument.TestItemEntity;
import org.opentester.instrument.TestItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

@SpringBootTest//(classes = {TestItemRepository.class, InstrumentRepository.class, TestAbilityRepository.class, InstrumentVendorRepository.class})
//@ContextConfiguration(classes = {TestItemRepository.class, InstrumentRepository.class, TestAbilityRepository.class, InstrumentVendorRepository.class})
//@Import({TestItemRepository.class, InstrumentRepository.class})

@ActiveProfiles("test")
public class OtdrTester2InstrumentTests {
	@TestConfiguration
	static class TestConfig {
		@Bean
		public MailSender emailSender() {
			return new MailSender() {
				@Override
				public void send(SimpleMailMessage simpleMessage) throws MailException {
				}

				@Override
				public void send(SimpleMailMessage... simpleMessages) throws MailException {
				}
			};
		}
	}
	@Autowired
	private TestItemRepository testItemRepository;
	
	@Autowired
	private InstrumentRepository instrumentRepository;
	
	@Autowired
	private TestAbilityRepository testAbilityRepository;
	
	@Autowired
	private InstrumentVendorRepository instrumentVendorRepository;
	
	@Autowired
	private MyInstrumentRepository myInstrumentRepository;
	
	@Test
	void test() {
		InstrumentVendorEntity instVendor = InstrumentVendorEntity.builder().name("EXFO").headquarter("Canada").url("https://www.exfo.com").build();
		instVendor = instrumentVendorRepository.save(instVendor);
		
		TestItemEntity fiberLength = TestItemEntity.builder().name("Fiber Length").unit("km").build();
		fiberLength = testItemRepository.save(fiberLength);
		TestItemEntity totalLoss = TestItemEntity.builder().name("Total Loss").unit("dB").build();
		totalLoss = testItemRepository.save(totalLoss);
		TestItemEntity opticalPower = TestItemEntity.builder().name("Optical Power").unit("dBm").build();
		opticalPower = testItemRepository.save(opticalPower);
			
		List<TestAbilityEntity> abilities = new ArrayList<>();

		InstrumentEntity inst = InstrumentEntity.builder().instrumentVendor(instVendor).
				productFamily("MaxTester").modelName("730D").description("PON/metro OTDR").testAbilities(abilities).build();
		inst = instrumentRepository.save(inst);
		
		TestAbilityEntity fiberLengthMaxTester720 = TestAbilityEntity.builder().testitem(fiberLength).instrument(inst).min(0.0).max(200.0).build();
		fiberLengthMaxTester720 = testAbilityRepository.save(fiberLengthMaxTester720);
		TestAbilityEntity totalLossMaxTester720 = TestAbilityEntity.builder().testitem(totalLoss).instrument(inst).min(0.0).max(35.0).build();
		totalLossMaxTester720 = testAbilityRepository.save(totalLossMaxTester720);
		TestAbilityEntity opticalPowerMaxTester720 = TestAbilityEntity.builder().testitem(opticalPower).instrument(inst).min(-50.0).max(10.0).build();
		opticalPowerMaxTester720 = testAbilityRepository.save(opticalPowerMaxTester720);
	
		inst = instrumentRepository.findByProductFamilyAndModelName("MaxTester", "730D");
		
		MyInstrumentEntity myInst = MyInstrumentEntity.builder().instrument(inst).serialNumber("SN01234567890").build();
		myInst = myInstrumentRepository.save(myInst);
	}
	
}
