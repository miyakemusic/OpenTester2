package org.opentester.job.project;

import java.util.Arrays;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.opentester.project.entity.DutEntity;
import org.opentester.project.entity.DutPackageEntity;
import org.opentester.project.entity.ProjectEntity;
import org.opentester.project.entity.SubRoleEntity;
import org.opentester.project.entity.TestPointEntity;
import org.opentester.project.entity.TesterEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.CriteriaTemplateRepository;
import org.opentester.project.repository.RawDataRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.SubRoleRepository;
import org.opentester.project.repository.TestItemRepository;
import org.opentester.project.repository.TestItemTemplateRepository;
import org.opentester.project.repository.TestPointRepository;
import org.opentester.project.repository.TesterHistoryRepository;
import org.opentester.project.repository.TesterRepository;
import org.opentester.project.repository.TesterSupplierRepository;
import org.opentester.project.repository.TesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
@SpringBootTest
@ActiveProfiles("test")
public class TestProject {
	
	@Autowired
	private SubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private TestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private TestItemRepository projectTestItemRepository;
	
	@Autowired
	private CriteriaTemplateRepository projectCriteriaTemplateRepository;
	 
	@Autowired
	private TesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private TesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private TesterHistoryRepository projectTesterHistoryRepository;
	
	@Autowired
	private TesterRepository projectTesterRepository;
	
	@Autowired
	private TestPointRepository projectTestPointRepository;

	@Autowired
	private DutPackageRepository dutPackageRepository;

	@Autowired
	private DutRepository dutRepository;

	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private RawDataRepository projectRawDataRepository;
	@Test
	public void testUser() {		
		
		// SubRoles
		SubRoleEntity leader = SubRoleEntity.builder().name("Team Leader").build();
		SubRoleEntity technician = SubRoleEntity.builder().name("Technician").build();
		SubRoleEntity engineer = SubRoleEntity.builder().name("Engineer").build();
		SubRoleEntity engineer2 = SubRoleEntity.builder().name("Engineer").build();
		
		projectSubRoleRepository.save(leader);
		assertTrue(leader.getId() != null);
		assertEquals("Team Leader", projectSubRoleRepository.findById(leader.getId()).get().getName());
		
		projectSubRoleRepository.save(technician);
		assertTrue(technician.getId() != null);
		projectSubRoleRepository.save(engineer);
		assertTrue(engineer.getId() != null);
		try {
			projectSubRoleRepository.save(engineer2);
		}
		catch (Exception e) {
			assertTrue(engineer2.getId() == null);
		}
		
		// User and SubRoles
		ProjectUserEntity user = projectUserRepository.save(ProjectUserEntity.builder().username("dr.dre@aftermath.com").fullName("Andre Young").team("TEAM#999").subRoles(Arrays.asList(leader, engineer)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
		ProjectUserEntity user2 = projectUserRepository.findById(user.getId()).get();
		assertEquals("dr.dre@aftermath.com", user2.getUsername());
		// Sub Role is loaded correctly
		
//		Hibernate.initialize(user2.getSubRoles());
		assertEquals("Team Leader", user2.getSubRoles().get(0).getName());
		
		ProjectUserEntity savedUser = projectUserRepository.save(ProjectUserEntity.builder().username("icecube@aftermath.com").fullName("Calvin Cordozar Broadus, Jr.").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());		
		// duplicated username is not allowed
		ProjectUserEntity duplicatedUser = null;
		try {
			duplicatedUser = projectUserRepository.save(ProjectUserEntity.builder().username("icecube@aftermath.com").fullName("Calvin Cordozar Broadus, Jr.").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
		}
		catch (Exception e) {
			
		}
		assertEquals(null, duplicatedUser);
		
		// Set user to tester entity
		TesterEntity tester = this.projectTesterRepository.save( TesterEntity.builder()
				.currentUser(user2)
				.serialNumber("1")
				.build() );
		TesterEntity tester2 = this.projectTesterRepository.save( TesterEntity.builder()
				.currentUser(user2)
				.serialNumber("2")
				.build() );
		
		// Confirm user owns testers
		ProjectUserEntity loadedUser = this.projectUserRepository.findById(user2.getId()).get();
		assertEquals("1", loadedUser.getTesters().get(0).getSerialNumber());
		assertEquals("2", loadedUser.getTesters().get(1).getSerialNumber());
		
		
		
//		List<TestItem> testItemsMarunouchi = Arrays.asList(
//				TestItem.builder().testTarget("FIBER.TOTAL_LENGTH").criteria("MIN=20.00km; MAX=20.01km").build(),
//				TestItem.builder().testTarget("FIBER.TOTAL_LOSS").criteria("MAX=10.00dB").build(),
//				TestItem.builder().testTarget("FIBER.MACROBEND_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER.ENDFACE.SCRATCH_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER.ENDFACE.DEFECT_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("RX.POWER").criteria("MIN=-40dBm").build()
//				);
//		TestPoint testPointCable001Fiber001_Marunouchi = TestPoint.builder().name("@CABLE#001@FIBER#001@MARUNOUCHI").testItems(testItemsMarunouchi).build();
//		
//		List<TestItem> testItemsMachida = Arrays.asList(
//				TestItem.builder().testTarget("FIBER.TOTAL_LENGTH").criteria("MIN=20.00km; MAX=20.01km").build(),
//				TestItem.builder().testTarget("FIBER.TOTAL_LOSS").criteria("MAX=10.00dB").build(),
//				TestItem.builder().testTarget("FIBER.MACROBEND_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER_ENDFACE.SCRATCH_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER_ENDFACE.DEFECT_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("RX.POWER").criteria("MIN=-40dBm").build()
//				);
//		TestPoint testPointCable001Fiber001_Machida = TestPoint.builder().name("@CABLE#001@FIBER#001@MACHIDA").testItems(testItemsMachida).build();
//
//		Dut dutCable001Fiber001 = Dut.builder().dutName("CABLE#001FIBER#001").testPoints(
//				Arrays.asList(testPointCable001Fiber001_Marunouchi, testPointCable001Fiber001_Machida)).build();

		
//		ProjectNode subProject1 = ProjectNode.builder().subProjectName("TPDR001@MARUNOURI_ROAMD102@MACCHIDA").duts(
//				Arrays.asList(dutCable001Fiber001)).build();//.project("DCI_Marunouchi0012_Mchida1203").subProject("TPDR001@MARUNOURI_ROAMD102@MACCHIDA");

//		Project project = Project.builder().projectName("MARUNOURI_MACCHIDA_DCI").type("CONSTRUCTION").location("Marunouchi, Machida")
//				.duts(Arrays.asList(dutCable001Fiber001))
//				.build();
		
	}
	
	@Test
	public void testProject() {		
		// create new project
		ProjectEntity savedProject = this.projectRepository.save(
				ProjectEntity.builder()
					.dutPackages(null)
					.projectName("PROJECT#1")
					.type("CONSTRUCTION")
					.build()
				);
		
		
		ProjectEntity duplicatedProject = null;
		try {
			// create new project
			duplicatedProject = this.projectRepository.save(
					ProjectEntity.builder()
						.dutPackages(null)
						.projectName("PROJECT#1")
						.type("CONSTRUCTION")
						.build()
					);			
		}
		catch (Exception e) {
			
		}
		assertEquals(null, duplicatedProject);
		
		// create sub package
		DutPackageEntity package1 = this.dutPackageRepository.save(DutPackageEntity.builder()
				.name("CABLE#1")
				.project(savedProject)
				.build());
		
		// Confirm project has sub package
		ProjectEntity loadedProject = this.projectRepository.findById(savedProject.getId()).get();
		assertEquals("CABLE#1", loadedProject.getDutPackages().get(0).getName());
		
		// create dut
		DutEntity dut = this.dutRepository.save(DutEntity.builder()
				.name("FIBER#1")
				.dutPackage(package1)
				.build());
		
		DutPackageEntity loadedPackage = this.dutPackageRepository.findById(package1.getId()).get();
		assertEquals("FIBER#1", loadedPackage.getDuts().get(0).getName());
		
		TestPointEntity testPoint1 = this.projectTestPointRepository.save(TestPointEntity.builder()
				.dut(dut)
				.name("PORT@001")
				.location("TOKYO JUJO")
				.build());
		
		TestPointEntity testPoint2 = this.projectTestPointRepository.save(TestPointEntity.builder()
				.dut(dut)
				.name("PORT@001")
				.location("TOKYO ITABASHI")
				.build());
		
	}
}
