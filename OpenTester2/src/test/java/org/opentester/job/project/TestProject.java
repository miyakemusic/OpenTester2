package org.opentester.job.project;

import java.util.Arrays;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.opentester.project.ProjectSubRoleRepository;
import org.opentester.project.entity.ProjectSubRoleEntity;
import org.opentester.project.entity.ProjectUserEntity;
import org.opentester.project.repository.DutPackageRepository;
import org.opentester.project.repository.DutRepository;
import org.opentester.project.repository.ProjectCriteriaTemplateRepository;
import org.opentester.project.repository.ProjectRawDataRepository;
import org.opentester.project.repository.ProjectRepository;
import org.opentester.project.repository.ProjectTestItemRepository;
import org.opentester.project.repository.ProjectTestItemTemplateRepository;
import org.opentester.project.repository.ProjectTestPointRepository;
import org.opentester.project.repository.ProjectTesterHistoryRepository;
import org.opentester.project.repository.ProjectTesterRepository;
import org.opentester.project.repository.ProjectTesterSupplierRepository;
import org.opentester.project.repository.ProjectTesterTemplateRepository;
import org.opentester.project.repository.ProjectUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
@SpringBootTest
@ActiveProfiles("test")
public class TestProject {
	
	@Autowired
	private ProjectSubRoleRepository projectSubRoleRepository;
	
	@Autowired
	private ProjectUserRepository projectUserRepository;
	
	@Autowired
	private ProjectTestItemTemplateRepository projectTestItemTemplateRepository;
	
	@Autowired
	private ProjectTestItemRepository projectTestItemRepository;
	
	@Autowired
	private ProjectCriteriaTemplateRepository projectCriteriaTemplateRepository;
	 
	@Autowired
	private ProjectTesterSupplierRepository projectTesterSupplierRepository;
	
	@Autowired
	private ProjectTesterTemplateRepository projectTesterTemplateRepository;
	
	@Autowired
	private ProjectTesterHistoryRepository projectTesterHistoryRepository;
	
	@Autowired
	private ProjectTesterRepository projectTesterRepository;
	
	@Autowired
	private ProjectTestPointRepository projectTestPointRepository;

	@Autowired
	private DutPackageRepository dutPackageRepository;

	@Autowired
	private DutRepository dutRepository;

	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private ProjectRawDataRepository projectRawDataRepository;
	@Test
	public void test() {		
		
		ProjectSubRoleEntity leader = ProjectSubRoleEntity.builder().name("Team Leader").build();
		ProjectSubRoleEntity technician = ProjectSubRoleEntity.builder().name("Technician").build();
		ProjectSubRoleEntity engineer = ProjectSubRoleEntity.builder().name("Engineer").build();
		ProjectSubRoleEntity engineer2 = ProjectSubRoleEntity.builder().name("Engineer").build();
		
		projectSubRoleRepository.save(leader);
		assertTrue(leader.getId() != null);
		assertEquals("Team Leader", projectSubRoleRepository.findById(leader.getId()).get().getName());
		
		projectSubRoleRepository.save(technician);
		assertTrue(technician.getId() != null);
		projectSubRoleRepository.save(engineer);
		assertTrue(engineer.getId() != null);
		try {
			projectSubRoleRepository.save(engineer2);
		}
		catch (Exception e) {
			assertTrue(engineer2.getId() == null);
		}
		
		ProjectUserEntity user = projectUserRepository.save(ProjectUserEntity.builder().username("dr.dre@aftermath.com").fullName("Andre Young").team("TEAM#999").subRoles(Arrays.asList(leader, engineer)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());
		ProjectUserEntity user2 = projectUserRepository.findById(user.getId()).get();
		assertEquals("dr.dre@aftermath.com", user2.getUsername());
		assertEquals("Team Leader", user2.getSubRoles().get(0).getName());
		
		projectUserRepository.save(ProjectUserEntity.builder().username("icecube@aftermath.com").fullName("Calvin Cordozar Broadus, Jr.").team("TEAM#999").subRoles(Arrays.asList(technician)).qualification("OPTICAL,ELECTRICAL,WIRELESS").organization("ABC Construction Co., Ltd.").build());

//		List<TestItem> testItemsMarunouchi = Arrays.asList(
//				TestItem.builder().testTarget("FIBER.TOTAL_LENGTH").criteria("MIN=20.00km; MAX=20.01km").build(),
//				TestItem.builder().testTarget("FIBER.TOTAL_LOSS").criteria("MAX=10.00dB").build(),
//				TestItem.builder().testTarget("FIBER.MACROBEND_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER.ENDFACE.SCRATCH_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER.ENDFACE.DEFECT_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("RX.POWER").criteria("MIN=-40dBm").build()
//				);
//		TestPoint testPointCable001Fiber001_Marunouchi = TestPoint.builder().name("@CABLE#001@FIBER#001@MARUNOUCHI").testItems(testItemsMarunouchi).build();
//		
//		List<TestItem> testItemsMachida = Arrays.asList(
//				TestItem.builder().testTarget("FIBER.TOTAL_LENGTH").criteria("MIN=20.00km; MAX=20.01km").build(),
//				TestItem.builder().testTarget("FIBER.TOTAL_LOSS").criteria("MAX=10.00dB").build(),
//				TestItem.builder().testTarget("FIBER.MACROBEND_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER_ENDFACE.SCRATCH_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("FIBER_ENDFACE.DEFECT_COUNT").criteria("MAX=0").build(),
//				TestItem.builder().testTarget("RX.POWER").criteria("MIN=-40dBm").build()
//				);
//		TestPoint testPointCable001Fiber001_Machida = TestPoint.builder().name("@CABLE#001@FIBER#001@MACHIDA").testItems(testItemsMachida).build();
//
//		Dut dutCable001Fiber001 = Dut.builder().dutName("CABLE#001FIBER#001").testPoints(
//				Arrays.asList(testPointCable001Fiber001_Marunouchi, testPointCable001Fiber001_Machida)).build();

		
//		ProjectNode subProject1 = ProjectNode.builder().subProjectName("TPDR001@MARUNOURI_ROAMD102@MACCHIDA").duts(
//				Arrays.asList(dutCable001Fiber001)).build();//.project("DCI_Marunouchi0012_Mchida1203").subProject("TPDR001@MARUNOURI_ROAMD102@MACCHIDA");

//		Project project = Project.builder().projectName("MARUNOURI_MACCHIDA_DCI").type("CONSTRUCTION").location("Marunouchi, Machida")
//				.duts(Arrays.asList(dutCable001Fiber001))
//				.build();
		
	}
}
