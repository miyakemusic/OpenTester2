package org.opentester.user;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.opentester.user.AuthorityRepository;
import org.opentester.user.EmailDto;
import org.opentester.user.HtmlController;
import org.opentester.user.UserController;
import org.opentester.user.UserDetailsServiceImpl;
import org.opentester.user.UserDto;
import org.opentester.user.UserEntity;
import org.opentester.user.UserRepository;
import org.opentester.user.VerificationCodeManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.http.MediaType;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.AssertFalse.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.containsString;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.formLogin;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest
@ActiveProfiles("test")
class OpenTester2ApplicationTests {
	private MockMvc mockMvcRest;
	private MockMvc mockMvcWeb;
	
	@Autowired
	private UserController userController;
	
	@Autowired
	private HtmlController htmlController;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private AuthorityRepository authorityRepository;
		
	@Autowired
	private UserDetailsServiceImpl userService;
		
	@BeforeAll
	public static void init() {
	

	}
	
	private static SimpleMailMessage sentMessage = null;
	
	@TestConfiguration
	static class TestConfig {
		@Bean
		public MailSender emailSender() {
			return new MailSender() {

				@Override
				public void send(SimpleMailMessage simpleMessage) throws MailException {
					sentMessage = simpleMessage;
				}

				@Override
				public void send(SimpleMailMessage... simpleMessages) throws MailException {
					// TODO Auto-generated method stub
					
				}
				
			};
		}
	}
	
	@Autowired 
	private VerificationCodeManager verificationCodeManager;

    @BeforeEach
    public void setupEach() {
    	userRepository.deleteAll();
        authorityRepository.deleteAll();
    	mockMvcRest = MockMvcBuilders.standaloneSetup(userController).build();
    	mockMvcWeb = MockMvcBuilders.standaloneSetup(htmlController).build();	
    }
    
	@Test
	void testDB() throws Exception {
		assertEquals(0, userRepository.count());
		assertEquals(0, authorityRepository.count());
		
		UserDto userDto = UserDto.builder().username("test@test.com").password("password").roles(Arrays.asList("USER")).
				firstName("FirstName").lastName("LastName").build();
		
		userService.createUser(userDto);
		
		assertEquals(1, userRepository.count());
		
		UserEntity userEntity = userRepository.findByUsername("test@test.com");
		assertEquals("test@test.com", userEntity.getUsername());
		assertEquals("FirstName", userEntity.getFirstname());
		assertEquals("LastName", userEntity.getLastname());
		assertEquals("ROLE_USER", userEntity.getAuthorities().get(0).getAuthority());
		assertEquals("ROLE_ADMIN", userEntity.getAuthorities().get(1).getAuthority());
		
		userRepository.deleteByUsername("test@test.com");
		assertEquals(0, userRepository.count());
		assertEquals(0, authorityRepository.count());		
	}

	@Test
	void testCreateInitialUser() throws Exception {
		MvcResult mvcResult;
		
		mvcResult = mockMvcWeb.perform(get("/fragment_signin"))
//		.andDo(print())
		.andExpect(status().isOk()).andReturn();	
		
		mvcResult = mockMvcWeb.perform(get("/fragment_signout")).andExpect(status().isOk())
		.andExpect(view().name("fragment_sendemail")).andExpect(model().attribute("title", "Create Initial User (ADMIN)")).andReturn();
		
//		String code = VerificationCodeManager.findCode(HtmlController.INITIALADMIN).getCode();
		EmailDto emailDto = new EmailDto();
		emailDto.setEmail("test@test.com");
//		emailDto.setCode(code);
		
		mvcResult = mockMvcRest.perform(post("/api/sendEmail")
				.content(new ObjectMapper().writeValueAsString(emailDto))
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				).andExpect(status().isOk()).andReturn();		
		
		String code = verificationCodeManager.findCode("test@test.com").getCode();
		assertTrue(sentMessage.getText().contains(code));
		assertEquals("test@test.com", sentMessage.getTo()[0]);
		
		UserDto userDto = UserDto.builder().username("test@test.com").password("").firstName("First Name").lastName("Last Name")
				.roles(Arrays.asList("USER", "ADMIN")).build();
		userDto.setCode(code);
		
		// Error when password is empty
		userDto.setPassword("");
		userDto.setMatchingPassword("");
		mvcResult = mockMvcRest.perform(post("/api/registeruser")
				.content(new ObjectMapper().writeValueAsString(userDto))
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				).andExpect(status().isBadRequest()).andReturn();		

		// Error when password mismatch
		userDto.setPassword("password1");
		userDto.setMatchingPassword("password2");
		mvcResult = mockMvcRest.perform(post("/api/registeruser")
				.content(new ObjectMapper().writeValueAsString(userDto))
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				).andExpect(status().isBadRequest()).andReturn();	
		
		// Successful
		userDto.setPassword("password1");
		userDto.setMatchingPassword("password1");		
		mvcResult = mockMvcRest.perform(post("/api/registeruser")
				.content(new ObjectMapper().writeValueAsString(userDto))
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				).andExpect(status().isOk()).andReturn();
		
//		mvcResult = mockMvcRest.perform(post("/api/login")
//				.content(new ObjectMapper().writeValueAsString(userDto))
//				.contentType(MediaType.APPLICATION_JSON_VALUE)
//				).andExpect(status().isOk()).andReturn();	
		
//		String token = mvcResult.getResponse().getHeader("X-AUTH-TOKEN");
//		mvcResult = mockMvcWeb.perform(get("/api/admin/user").header("X-AUTH-TOKEN", token)).andExpect(status().isOk())
//		.andReturn();
	}
	
	@Test
	@WithMockUser(username = "admin", roles = { "USER" , "ADMIN" })
	void deleteUser() throws Exception {
		userService.createUser(UserDto.builder().username("admin@test.com").password("password").roles(Arrays.asList("USER", "ADMIN")).build());
		userService.createUser(UserDto.builder().username("admin2@test.com").password("password").roles(Arrays.asList("USER", "ADMIN")).build());
		userService.createUser(UserDto.builder().username("user@test.com").password("password").roles(Arrays.asList("USER")).build());
		userService.createUser(UserDto.builder().username("user2@test.com").password("password").roles(Arrays.asList("USER")).build());
		
		MvcResult mvcResult;
		mvcResult = mockMvcRest.perform(delete("/api/admin/user").param("username", "user2@test.com")
				).andExpect(status().isOk()).andReturn();	
		
		assertEquals(3, userRepository.count());

		mvcResult = mockMvcRest.perform(delete("/api/admin/user").param("username", "user@test.com")
				).andExpect(status().isOk()).andReturn();	
		
		assertEquals(2, userRepository.count());
	
		mvcResult = mockMvcRest.perform(delete("/api/admin/user").param("username", "admin2@test.com")
				).andExpect(status().isOk()).andReturn();	
		
		assertEquals(1, userRepository.count());

		// Cannot delete admin user
		mvcResult = mockMvcRest.perform(delete("/api/admin/user").param("username", "admin@test.com")
				).andExpect(status().isBadRequest()).andReturn();	
		
		assertEquals(1, userRepository.count());
		
		// Cannot remove admin role from last admin user
		String json = new ObjectMapper().writeValueAsString(UserDto.builder().username("admin@test.com").password("password").roles(Arrays.asList("USER")));
		mvcResult = mockMvcRest.perform(post("/api/admin/user").contentType(MediaType.APPLICATION_JSON).content(json)
				).andExpect(status().isBadRequest()).andReturn();	
	}
	
//	@Test
    @WithMockUser(username = "admin", roles = { "USER" , "ADMIN" })
    void accessWithAdminToAdmin() throws Exception {
		userService.createUser(UserDto.builder().username("user1@test.com").password("passss").roles(Arrays.asList("USER")).build());
		userService.createUser(UserDto.builder().username("user2@test.com").password("passss").roles(Arrays.asList("USER")).build());
		
    	MvcResult mvcResult = mockMvcRest.perform(get("/api/admin/user"))
                .andExpect(status().isOk()).andReturn();
    	UserDto[] list = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), UserDto[].class );
    	for (UserDto o : list) {
    		System.out.println(o);
    	}
    }
}
